// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: cline/commands.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Diagnostic, Empty } from "./common";

export interface CommandContext {
  /** The absolute path of the current file. */
  filePath?:
    | string
    | undefined;
  /** The selected source text. */
  selectedText?:
    | string
    | undefined;
  /** The language identifier for the current file. */
  language?:
    | string
    | undefined;
  /** Any diagnostic problems for the current file. */
  diagnostics: Diagnostic[];
}

function createBaseCommandContext(): CommandContext {
  return { filePath: undefined, selectedText: undefined, language: undefined, diagnostics: [] };
}

export const CommandContext: MessageFns<CommandContext> = {
  encode(message: CommandContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== undefined) {
      writer.uint32(10).string(message.filePath);
    }
    if (message.selectedText !== undefined) {
      writer.uint32(18).string(message.selectedText);
    }
    if (message.language !== undefined) {
      writer.uint32(26).string(message.language);
    }
    for (const v of message.diagnostics) {
      Diagnostic.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selectedText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.diagnostics.push(Diagnostic.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandContext {
    return {
      filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : undefined,
      selectedText: isSet(object.selectedText) ? globalThis.String(object.selectedText) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : undefined,
      diagnostics: globalThis.Array.isArray(object?.diagnostics)
        ? object.diagnostics.map((e: any) => Diagnostic.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CommandContext): unknown {
    const obj: any = {};
    if (message.filePath !== undefined) {
      obj.filePath = message.filePath;
    }
    if (message.selectedText !== undefined) {
      obj.selectedText = message.selectedText;
    }
    if (message.language !== undefined) {
      obj.language = message.language;
    }
    if (message.diagnostics?.length) {
      obj.diagnostics = message.diagnostics.map((e) => Diagnostic.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandContext>, I>>(base?: I): CommandContext {
    return CommandContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandContext>, I>>(object: I): CommandContext {
    const message = createBaseCommandContext();
    message.filePath = object.filePath ?? undefined;
    message.selectedText = object.selectedText ?? undefined;
    message.language = object.language ?? undefined;
    message.diagnostics = object.diagnostics?.map((e) => Diagnostic.fromPartial(e)) || [];
    return message;
  },
};

/**
 * Service for running IDE commands, for example context menu actions,
 * commands, etc.
 * In contrast to the rest of the ProtoBus services, these are
 * intended to be called by the IDE directly instead of through the webview,
 * because they are triggered by interactions in the IDE.
 */
export type CommandsServiceDefinition = typeof CommandsServiceDefinition;
export const CommandsServiceDefinition = {
  name: "CommandsService",
  fullName: "cline.CommandsService",
  methods: {
    addToCline: {
      name: "addToCline",
      requestType: CommandContext,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    fixWithCline: {
      name: "fixWithCline",
      requestType: CommandContext,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    explainWithCline: {
      name: "explainWithCline",
      requestType: CommandContext,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    improveWithCline: {
      name: "improveWithCline",
      requestType: CommandContext,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
