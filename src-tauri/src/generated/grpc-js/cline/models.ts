// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: cline/models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleServerStreamingCall, handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { Empty, EmptyRequest, Metadata, StringArray, StringRequest } from "./common";

/** API Provider enumeration */
export enum ApiProvider {
  ANTHROPIC = 0,
  OPENROUTER = 1,
  BEDROCK = 2,
  VERTEX = 3,
  OPENAI = 4,
  OLLAMA = 5,
  LMSTUDIO = 6,
  GEMINI = 7,
  OPENAI_NATIVE = 8,
  REQUESTY = 9,
  TOGETHER = 10,
  DEEPSEEK = 11,
  QWEN = 12,
  DOUBAO = 13,
  MISTRAL = 14,
  VSCODE_LM = 15,
  CLINE = 16,
  LITELLM = 17,
  NEBIUS = 18,
  FIREWORKS = 19,
  ASKSAGE = 20,
  XAI = 21,
  SAMBANOVA = 22,
  CEREBRAS = 23,
  GROQ = 24,
  SAPAICORE = 25,
  CLAUDE_CODE = 26,
  MOONSHOT = 27,
  HUGGINGFACE = 28,
  HUAWEI_CLOUD_MAAS = 29,
  BASETEN = 30,
  ZAI = 31,
  UNRECOGNIZED = -1,
}

export function apiProviderFromJSON(object: any): ApiProvider {
  switch (object) {
    case 0:
    case "ANTHROPIC":
      return ApiProvider.ANTHROPIC;
    case 1:
    case "OPENROUTER":
      return ApiProvider.OPENROUTER;
    case 2:
    case "BEDROCK":
      return ApiProvider.BEDROCK;
    case 3:
    case "VERTEX":
      return ApiProvider.VERTEX;
    case 4:
    case "OPENAI":
      return ApiProvider.OPENAI;
    case 5:
    case "OLLAMA":
      return ApiProvider.OLLAMA;
    case 6:
    case "LMSTUDIO":
      return ApiProvider.LMSTUDIO;
    case 7:
    case "GEMINI":
      return ApiProvider.GEMINI;
    case 8:
    case "OPENAI_NATIVE":
      return ApiProvider.OPENAI_NATIVE;
    case 9:
    case "REQUESTY":
      return ApiProvider.REQUESTY;
    case 10:
    case "TOGETHER":
      return ApiProvider.TOGETHER;
    case 11:
    case "DEEPSEEK":
      return ApiProvider.DEEPSEEK;
    case 12:
    case "QWEN":
      return ApiProvider.QWEN;
    case 13:
    case "DOUBAO":
      return ApiProvider.DOUBAO;
    case 14:
    case "MISTRAL":
      return ApiProvider.MISTRAL;
    case 15:
    case "VSCODE_LM":
      return ApiProvider.VSCODE_LM;
    case 16:
    case "CLINE":
      return ApiProvider.CLINE;
    case 17:
    case "LITELLM":
      return ApiProvider.LITELLM;
    case 18:
    case "NEBIUS":
      return ApiProvider.NEBIUS;
    case 19:
    case "FIREWORKS":
      return ApiProvider.FIREWORKS;
    case 20:
    case "ASKSAGE":
      return ApiProvider.ASKSAGE;
    case 21:
    case "XAI":
      return ApiProvider.XAI;
    case 22:
    case "SAMBANOVA":
      return ApiProvider.SAMBANOVA;
    case 23:
    case "CEREBRAS":
      return ApiProvider.CEREBRAS;
    case 24:
    case "GROQ":
      return ApiProvider.GROQ;
    case 25:
    case "SAPAICORE":
      return ApiProvider.SAPAICORE;
    case 26:
    case "CLAUDE_CODE":
      return ApiProvider.CLAUDE_CODE;
    case 27:
    case "MOONSHOT":
      return ApiProvider.MOONSHOT;
    case 28:
    case "HUGGINGFACE":
      return ApiProvider.HUGGINGFACE;
    case 29:
    case "HUAWEI_CLOUD_MAAS":
      return ApiProvider.HUAWEI_CLOUD_MAAS;
    case 30:
    case "BASETEN":
      return ApiProvider.BASETEN;
    case 31:
    case "ZAI":
      return ApiProvider.ZAI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApiProvider.UNRECOGNIZED;
  }
}

export function apiProviderToJSON(object: ApiProvider): string {
  switch (object) {
    case ApiProvider.ANTHROPIC:
      return "ANTHROPIC";
    case ApiProvider.OPENROUTER:
      return "OPENROUTER";
    case ApiProvider.BEDROCK:
      return "BEDROCK";
    case ApiProvider.VERTEX:
      return "VERTEX";
    case ApiProvider.OPENAI:
      return "OPENAI";
    case ApiProvider.OLLAMA:
      return "OLLAMA";
    case ApiProvider.LMSTUDIO:
      return "LMSTUDIO";
    case ApiProvider.GEMINI:
      return "GEMINI";
    case ApiProvider.OPENAI_NATIVE:
      return "OPENAI_NATIVE";
    case ApiProvider.REQUESTY:
      return "REQUESTY";
    case ApiProvider.TOGETHER:
      return "TOGETHER";
    case ApiProvider.DEEPSEEK:
      return "DEEPSEEK";
    case ApiProvider.QWEN:
      return "QWEN";
    case ApiProvider.DOUBAO:
      return "DOUBAO";
    case ApiProvider.MISTRAL:
      return "MISTRAL";
    case ApiProvider.VSCODE_LM:
      return "VSCODE_LM";
    case ApiProvider.CLINE:
      return "CLINE";
    case ApiProvider.LITELLM:
      return "LITELLM";
    case ApiProvider.NEBIUS:
      return "NEBIUS";
    case ApiProvider.FIREWORKS:
      return "FIREWORKS";
    case ApiProvider.ASKSAGE:
      return "ASKSAGE";
    case ApiProvider.XAI:
      return "XAI";
    case ApiProvider.SAMBANOVA:
      return "SAMBANOVA";
    case ApiProvider.CEREBRAS:
      return "CEREBRAS";
    case ApiProvider.GROQ:
      return "GROQ";
    case ApiProvider.SAPAICORE:
      return "SAPAICORE";
    case ApiProvider.CLAUDE_CODE:
      return "CLAUDE_CODE";
    case ApiProvider.MOONSHOT:
      return "MOONSHOT";
    case ApiProvider.HUGGINGFACE:
      return "HUGGINGFACE";
    case ApiProvider.HUAWEI_CLOUD_MAAS:
      return "HUAWEI_CLOUD_MAAS";
    case ApiProvider.BASETEN:
      return "BASETEN";
    case ApiProvider.ZAI:
      return "ZAI";
    case ApiProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** List of VS Code LM models */
export interface VsCodeLmModelsArray {
  models: LanguageModelChatSelector[];
}

/** Structure representing a language model chat selector */
export interface LanguageModelChatSelector {
  vendor?: string | undefined;
  family?: string | undefined;
  version?: string | undefined;
  id?: string | undefined;
}

/** Price tier for tiered pricing models */
export interface PriceTier {
  /** Upper limit (inclusive) of input tokens for this price */
  tokenLimit: number;
  /** Price per million tokens for this tier */
  price: number;
}

/** Thinking configuration for models that support thinking/reasoning */
export interface ThinkingConfig {
  /** Max allowed thinking budget tokens */
  maxBudget?:
    | number
    | undefined;
  /** Output price per million tokens when budget > 0 */
  outputPrice?:
    | number
    | undefined;
  /** Optional: Tiered output price when budget > 0 */
  outputPriceTiers: PriceTier[];
}

/** Model tier for tiered pricing structures */
export interface ModelTier {
  contextWindow: number;
  inputPrice?: number | undefined;
  outputPrice?: number | undefined;
  cacheWritesPrice?: number | undefined;
  cacheReadsPrice?: number | undefined;
}

/** For OpenRouterCompatibleModelInfo structure in OpenRouterModels */
export interface OpenRouterModelInfo {
  maxTokens?: number | undefined;
  contextWindow?: number | undefined;
  supportsImages?: boolean | undefined;
  supportsPromptCache: boolean;
  inputPrice?: number | undefined;
  outputPrice?: number | undefined;
  cacheWritesPrice?: number | undefined;
  cacheReadsPrice?: number | undefined;
  description?: string | undefined;
  thinkingConfig?: ThinkingConfig | undefined;
  supportsGlobalEndpoint?: boolean | undefined;
  tiers: ModelTier[];
}

/** Shared response message for model information */
export interface OpenRouterCompatibleModelInfo {
  models: { [key: string]: OpenRouterModelInfo };
}

export interface OpenRouterCompatibleModelInfo_ModelsEntry {
  key: string;
  value?: OpenRouterModelInfo | undefined;
}

/** Request for fetching OpenAI models */
export interface OpenAiModelsRequest {
  metadata?: Metadata | undefined;
  baseUrl: string;
  apiKey: string;
}

/** Request for updating API configuration */
export interface UpdateApiConfigurationRequest {
  metadata?: Metadata | undefined;
  apiConfiguration?: ModelsApiConfiguration | undefined;
}

/** Model info for OpenAI-compatible models */
export interface OpenAiCompatibleModelInfo {
  maxTokens?: number | undefined;
  contextWindow?: number | undefined;
  supportsImages?: boolean | undefined;
  supportsPromptCache: boolean;
  inputPrice?: number | undefined;
  outputPrice?: number | undefined;
  thinkingConfig?: ThinkingConfig | undefined;
  supportsGlobalEndpoint?: boolean | undefined;
  cacheWritesPrice?: number | undefined;
  cacheReadsPrice?: number | undefined;
  description?: string | undefined;
  tiers: ModelTier[];
  temperature?: number | undefined;
  isR1FormatRequired?: boolean | undefined;
}

/** Model info for LiteLLM models */
export interface LiteLLMModelInfo {
  maxTokens?: number | undefined;
  contextWindow?: number | undefined;
  supportsImages?: boolean | undefined;
  supportsPromptCache: boolean;
  inputPrice?: number | undefined;
  outputPrice?: number | undefined;
  thinkingConfig?: ThinkingConfig | undefined;
  supportsGlobalEndpoint?: boolean | undefined;
  cacheWritesPrice?: number | undefined;
  cacheReadsPrice?: number | undefined;
  description?: string | undefined;
  tiers: ModelTier[];
  temperature?: number | undefined;
}

/** Main ApiConfiguration message */
export interface ModelsApiConfiguration {
  /** Global configuration fields (not mode-specific) */
  apiKey?: string | undefined;
  clineApiKey?: string | undefined;
  ulid?: string | undefined;
  liteLlmBaseUrl?: string | undefined;
  liteLlmApiKey?: string | undefined;
  liteLlmUsePromptCache?: boolean | undefined;
  openAiHeaders: { [key: string]: string };
  anthropicBaseUrl?: string | undefined;
  openRouterApiKey?: string | undefined;
  openRouterProviderSorting?: string | undefined;
  awsAccessKey?: string | undefined;
  awsSecretKey?: string | undefined;
  awsSessionToken?: string | undefined;
  awsRegion?: string | undefined;
  awsUseCrossRegionInference?: boolean | undefined;
  awsBedrockUsePromptCache?: boolean | undefined;
  awsUseProfile?: boolean | undefined;
  awsProfile?: string | undefined;
  awsBedrockEndpoint?: string | undefined;
  claudeCodePath?: string | undefined;
  vertexProjectId?: string | undefined;
  vertexRegion?: string | undefined;
  openAiBaseUrl?: string | undefined;
  openAiApiKey?: string | undefined;
  ollamaBaseUrl?: string | undefined;
  ollamaApiOptionsCtxNum?: string | undefined;
  lmStudioBaseUrl?: string | undefined;
  geminiApiKey?: string | undefined;
  geminiBaseUrl?: string | undefined;
  openAiNativeApiKey?: string | undefined;
  deepSeekApiKey?: string | undefined;
  requestyApiKey?: string | undefined;
  requestyBaseUrl?: string | undefined;
  togetherApiKey?: string | undefined;
  fireworksApiKey?: string | undefined;
  fireworksModelMaxCompletionTokens?: number | undefined;
  fireworksModelMaxTokens?: number | undefined;
  qwenApiKey?: string | undefined;
  doubaoApiKey?: string | undefined;
  mistralApiKey?: string | undefined;
  azureApiVersion?: string | undefined;
  qwenApiLine?: string | undefined;
  nebiusApiKey?: string | undefined;
  asksageApiUrl?: string | undefined;
  asksageApiKey?: string | undefined;
  xaiApiKey?: string | undefined;
  sambanovaApiKey?: string | undefined;
  cerebrasApiKey?: string | undefined;
  requestTimeoutMs?: number | undefined;
  sapAiCoreClientId?: string | undefined;
  sapAiCoreClientSecret?: string | undefined;
  sapAiResourceGroup?: string | undefined;
  sapAiCoreTokenUrl?: string | undefined;
  sapAiCoreBaseUrl?: string | undefined;
  moonshotApiKey?: string | undefined;
  moonshotApiLine?: string | undefined;
  awsAuthentication?: string | undefined;
  awsBedrockApiKey?: string | undefined;
  clineAccountId?: string | undefined;
  groqApiKey?: string | undefined;
  huggingFaceApiKey?: string | undefined;
  huaweiCloudMaasApiKey?: string | undefined;
  basetenApiKey?: string | undefined;
  ollamaApiKey?: string | undefined;
  zaiApiKey?: string | undefined;
  zaiApiLine?: string | undefined;
  lmStudioMaxTokens?:
    | string
    | undefined;
  /** Plan mode configurations */
  planModeApiProvider?: ApiProvider | undefined;
  planModeApiModelId?: string | undefined;
  planModeThinkingBudgetTokens?: number | undefined;
  planModeReasoningEffort?: string | undefined;
  planModeVsCodeLmModelSelector?: LanguageModelChatSelector | undefined;
  planModeAwsBedrockCustomSelected?: boolean | undefined;
  planModeAwsBedrockCustomModelBaseId?: string | undefined;
  planModeOpenRouterModelId?: string | undefined;
  planModeOpenRouterModelInfo?: OpenRouterModelInfo | undefined;
  planModeOpenAiModelId?: string | undefined;
  planModeOpenAiModelInfo?: OpenAiCompatibleModelInfo | undefined;
  planModeOllamaModelId?: string | undefined;
  planModeLmStudioModelId?: string | undefined;
  planModeLiteLlmModelId?: string | undefined;
  planModeLiteLlmModelInfo?: LiteLLMModelInfo | undefined;
  planModeRequestyModelId?: string | undefined;
  planModeRequestyModelInfo?: OpenRouterModelInfo | undefined;
  planModeTogetherModelId?: string | undefined;
  planModeFireworksModelId?: string | undefined;
  planModeSapAiCoreModelId?: string | undefined;
  planModeGroqModelId?: string | undefined;
  planModeGroqModelInfo?: OpenRouterModelInfo | undefined;
  planModeHuggingFaceModelId?: string | undefined;
  planModeHuggingFaceModelInfo?: OpenRouterModelInfo | undefined;
  planModeHuaweiCloudMaasModelId?: string | undefined;
  planModeHuaweiCloudMaasModelInfo?: OpenRouterModelInfo | undefined;
  planModeBasetenModelId?: string | undefined;
  planModeBasetenModelInfo?:
    | OpenRouterModelInfo
    | undefined;
  /** Act mode configurations */
  actModeApiProvider?: ApiProvider | undefined;
  actModeApiModelId?: string | undefined;
  actModeThinkingBudgetTokens?: number | undefined;
  actModeReasoningEffort?: string | undefined;
  actModeVsCodeLmModelSelector?: LanguageModelChatSelector | undefined;
  actModeAwsBedrockCustomSelected?: boolean | undefined;
  actModeAwsBedrockCustomModelBaseId?: string | undefined;
  actModeOpenRouterModelId?: string | undefined;
  actModeOpenRouterModelInfo?: OpenRouterModelInfo | undefined;
  actModeOpenAiModelId?: string | undefined;
  actModeOpenAiModelInfo?: OpenAiCompatibleModelInfo | undefined;
  actModeOllamaModelId?: string | undefined;
  actModeLmStudioModelId?: string | undefined;
  actModeLiteLlmModelId?: string | undefined;
  actModeLiteLlmModelInfo?: LiteLLMModelInfo | undefined;
  actModeRequestyModelId?: string | undefined;
  actModeRequestyModelInfo?: OpenRouterModelInfo | undefined;
  actModeTogetherModelId?: string | undefined;
  actModeFireworksModelId?: string | undefined;
  actModeSapAiCoreModelId?: string | undefined;
  actModeGroqModelId?: string | undefined;
  actModeGroqModelInfo?: OpenRouterModelInfo | undefined;
  actModeHuggingFaceModelId?: string | undefined;
  actModeHuggingFaceModelInfo?: OpenRouterModelInfo | undefined;
  actModeHuaweiCloudMaasModelId?: string | undefined;
  actModeHuaweiCloudMaasModelInfo?: OpenRouterModelInfo | undefined;
  actModeBasetenModelId?: string | undefined;
  actModeBasetenModelInfo?: OpenRouterModelInfo | undefined;
  favoritedModelIds: string[];
}

export interface ModelsApiConfiguration_OpenAiHeadersEntry {
  key: string;
  value: string;
}

function createBaseVsCodeLmModelsArray(): VsCodeLmModelsArray {
  return { models: [] };
}

export const VsCodeLmModelsArray: MessageFns<VsCodeLmModelsArray> = {
  encode(message: VsCodeLmModelsArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.models) {
      LanguageModelChatSelector.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VsCodeLmModelsArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVsCodeLmModelsArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.models.push(LanguageModelChatSelector.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VsCodeLmModelsArray {
    return {
      models: globalThis.Array.isArray(object?.models)
        ? object.models.map((e: any) => LanguageModelChatSelector.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VsCodeLmModelsArray): unknown {
    const obj: any = {};
    if (message.models?.length) {
      obj.models = message.models.map((e) => LanguageModelChatSelector.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VsCodeLmModelsArray>, I>>(base?: I): VsCodeLmModelsArray {
    return VsCodeLmModelsArray.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VsCodeLmModelsArray>, I>>(object: I): VsCodeLmModelsArray {
    const message = createBaseVsCodeLmModelsArray();
    message.models = object.models?.map((e) => LanguageModelChatSelector.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLanguageModelChatSelector(): LanguageModelChatSelector {
  return { vendor: undefined, family: undefined, version: undefined, id: undefined };
}

export const LanguageModelChatSelector: MessageFns<LanguageModelChatSelector> = {
  encode(message: LanguageModelChatSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vendor !== undefined) {
      writer.uint32(10).string(message.vendor);
    }
    if (message.family !== undefined) {
      writer.uint32(18).string(message.family);
    }
    if (message.version !== undefined) {
      writer.uint32(26).string(message.version);
    }
    if (message.id !== undefined) {
      writer.uint32(34).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LanguageModelChatSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguageModelChatSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vendor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.family = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LanguageModelChatSelector {
    return {
      vendor: isSet(object.vendor) ? globalThis.String(object.vendor) : undefined,
      family: isSet(object.family) ? globalThis.String(object.family) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: LanguageModelChatSelector): unknown {
    const obj: any = {};
    if (message.vendor !== undefined) {
      obj.vendor = message.vendor;
    }
    if (message.family !== undefined) {
      obj.family = message.family;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LanguageModelChatSelector>, I>>(base?: I): LanguageModelChatSelector {
    return LanguageModelChatSelector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LanguageModelChatSelector>, I>>(object: I): LanguageModelChatSelector {
    const message = createBaseLanguageModelChatSelector();
    message.vendor = object.vendor ?? undefined;
    message.family = object.family ?? undefined;
    message.version = object.version ?? undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBasePriceTier(): PriceTier {
  return { tokenLimit: 0, price: 0 };
}

export const PriceTier: MessageFns<PriceTier> = {
  encode(message: PriceTier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenLimit !== 0) {
      writer.uint32(8).int32(message.tokenLimit);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PriceTier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceTier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tokenLimit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PriceTier {
    return {
      tokenLimit: isSet(object.tokenLimit) ? globalThis.Number(object.tokenLimit) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: PriceTier): unknown {
    const obj: any = {};
    if (message.tokenLimit !== 0) {
      obj.tokenLimit = Math.round(message.tokenLimit);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PriceTier>, I>>(base?: I): PriceTier {
    return PriceTier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PriceTier>, I>>(object: I): PriceTier {
    const message = createBasePriceTier();
    message.tokenLimit = object.tokenLimit ?? 0;
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseThinkingConfig(): ThinkingConfig {
  return { maxBudget: undefined, outputPrice: undefined, outputPriceTiers: [] };
}

export const ThinkingConfig: MessageFns<ThinkingConfig> = {
  encode(message: ThinkingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxBudget !== undefined) {
      writer.uint32(8).int32(message.maxBudget);
    }
    if (message.outputPrice !== undefined) {
      writer.uint32(17).double(message.outputPrice);
    }
    for (const v of message.outputPriceTiers) {
      PriceTier.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThinkingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThinkingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxBudget = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.outputPrice = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.outputPriceTiers.push(PriceTier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThinkingConfig {
    return {
      maxBudget: isSet(object.maxBudget) ? globalThis.Number(object.maxBudget) : undefined,
      outputPrice: isSet(object.outputPrice) ? globalThis.Number(object.outputPrice) : undefined,
      outputPriceTiers: globalThis.Array.isArray(object?.outputPriceTiers)
        ? object.outputPriceTiers.map((e: any) => PriceTier.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ThinkingConfig): unknown {
    const obj: any = {};
    if (message.maxBudget !== undefined) {
      obj.maxBudget = Math.round(message.maxBudget);
    }
    if (message.outputPrice !== undefined) {
      obj.outputPrice = message.outputPrice;
    }
    if (message.outputPriceTiers?.length) {
      obj.outputPriceTiers = message.outputPriceTiers.map((e) => PriceTier.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThinkingConfig>, I>>(base?: I): ThinkingConfig {
    return ThinkingConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThinkingConfig>, I>>(object: I): ThinkingConfig {
    const message = createBaseThinkingConfig();
    message.maxBudget = object.maxBudget ?? undefined;
    message.outputPrice = object.outputPrice ?? undefined;
    message.outputPriceTiers = object.outputPriceTiers?.map((e) => PriceTier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseModelTier(): ModelTier {
  return {
    contextWindow: 0,
    inputPrice: undefined,
    outputPrice: undefined,
    cacheWritesPrice: undefined,
    cacheReadsPrice: undefined,
  };
}

export const ModelTier: MessageFns<ModelTier> = {
  encode(message: ModelTier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextWindow !== 0) {
      writer.uint32(8).int32(message.contextWindow);
    }
    if (message.inputPrice !== undefined) {
      writer.uint32(17).double(message.inputPrice);
    }
    if (message.outputPrice !== undefined) {
      writer.uint32(25).double(message.outputPrice);
    }
    if (message.cacheWritesPrice !== undefined) {
      writer.uint32(33).double(message.cacheWritesPrice);
    }
    if (message.cacheReadsPrice !== undefined) {
      writer.uint32(41).double(message.cacheReadsPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelTier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelTier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.contextWindow = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.inputPrice = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.outputPrice = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.cacheWritesPrice = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.cacheReadsPrice = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelTier {
    return {
      contextWindow: isSet(object.contextWindow) ? globalThis.Number(object.contextWindow) : 0,
      inputPrice: isSet(object.inputPrice) ? globalThis.Number(object.inputPrice) : undefined,
      outputPrice: isSet(object.outputPrice) ? globalThis.Number(object.outputPrice) : undefined,
      cacheWritesPrice: isSet(object.cacheWritesPrice) ? globalThis.Number(object.cacheWritesPrice) : undefined,
      cacheReadsPrice: isSet(object.cacheReadsPrice) ? globalThis.Number(object.cacheReadsPrice) : undefined,
    };
  },

  toJSON(message: ModelTier): unknown {
    const obj: any = {};
    if (message.contextWindow !== 0) {
      obj.contextWindow = Math.round(message.contextWindow);
    }
    if (message.inputPrice !== undefined) {
      obj.inputPrice = message.inputPrice;
    }
    if (message.outputPrice !== undefined) {
      obj.outputPrice = message.outputPrice;
    }
    if (message.cacheWritesPrice !== undefined) {
      obj.cacheWritesPrice = message.cacheWritesPrice;
    }
    if (message.cacheReadsPrice !== undefined) {
      obj.cacheReadsPrice = message.cacheReadsPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModelTier>, I>>(base?: I): ModelTier {
    return ModelTier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModelTier>, I>>(object: I): ModelTier {
    const message = createBaseModelTier();
    message.contextWindow = object.contextWindow ?? 0;
    message.inputPrice = object.inputPrice ?? undefined;
    message.outputPrice = object.outputPrice ?? undefined;
    message.cacheWritesPrice = object.cacheWritesPrice ?? undefined;
    message.cacheReadsPrice = object.cacheReadsPrice ?? undefined;
    return message;
  },
};

function createBaseOpenRouterModelInfo(): OpenRouterModelInfo {
  return {
    maxTokens: undefined,
    contextWindow: undefined,
    supportsImages: undefined,
    supportsPromptCache: false,
    inputPrice: undefined,
    outputPrice: undefined,
    cacheWritesPrice: undefined,
    cacheReadsPrice: undefined,
    description: undefined,
    thinkingConfig: undefined,
    supportsGlobalEndpoint: undefined,
    tiers: [],
  };
}

export const OpenRouterModelInfo: MessageFns<OpenRouterModelInfo> = {
  encode(message: OpenRouterModelInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxTokens !== undefined) {
      writer.uint32(8).int32(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      writer.uint32(16).int32(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      writer.uint32(24).bool(message.supportsImages);
    }
    if (message.supportsPromptCache !== false) {
      writer.uint32(32).bool(message.supportsPromptCache);
    }
    if (message.inputPrice !== undefined) {
      writer.uint32(41).double(message.inputPrice);
    }
    if (message.outputPrice !== undefined) {
      writer.uint32(49).double(message.outputPrice);
    }
    if (message.cacheWritesPrice !== undefined) {
      writer.uint32(57).double(message.cacheWritesPrice);
    }
    if (message.cacheReadsPrice !== undefined) {
      writer.uint32(65).double(message.cacheReadsPrice);
    }
    if (message.description !== undefined) {
      writer.uint32(74).string(message.description);
    }
    if (message.thinkingConfig !== undefined) {
      ThinkingConfig.encode(message.thinkingConfig, writer.uint32(82).fork()).join();
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      writer.uint32(88).bool(message.supportsGlobalEndpoint);
    }
    for (const v of message.tiers) {
      ModelTier.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenRouterModelInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenRouterModelInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxTokens = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contextWindow = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportsImages = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.supportsPromptCache = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.inputPrice = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.outputPrice = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.cacheWritesPrice = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.cacheReadsPrice = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.thinkingConfig = ThinkingConfig.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.supportsGlobalEndpoint = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tiers.push(ModelTier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenRouterModelInfo {
    return {
      maxTokens: isSet(object.maxTokens) ? globalThis.Number(object.maxTokens) : undefined,
      contextWindow: isSet(object.contextWindow) ? globalThis.Number(object.contextWindow) : undefined,
      supportsImages: isSet(object.supportsImages) ? globalThis.Boolean(object.supportsImages) : undefined,
      supportsPromptCache: isSet(object.supportsPromptCache) ? globalThis.Boolean(object.supportsPromptCache) : false,
      inputPrice: isSet(object.inputPrice) ? globalThis.Number(object.inputPrice) : undefined,
      outputPrice: isSet(object.outputPrice) ? globalThis.Number(object.outputPrice) : undefined,
      cacheWritesPrice: isSet(object.cacheWritesPrice) ? globalThis.Number(object.cacheWritesPrice) : undefined,
      cacheReadsPrice: isSet(object.cacheReadsPrice) ? globalThis.Number(object.cacheReadsPrice) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      thinkingConfig: isSet(object.thinkingConfig) ? ThinkingConfig.fromJSON(object.thinkingConfig) : undefined,
      supportsGlobalEndpoint: isSet(object.supportsGlobalEndpoint)
        ? globalThis.Boolean(object.supportsGlobalEndpoint)
        : undefined,
      tiers: globalThis.Array.isArray(object?.tiers) ? object.tiers.map((e: any) => ModelTier.fromJSON(e)) : [],
    };
  },

  toJSON(message: OpenRouterModelInfo): unknown {
    const obj: any = {};
    if (message.maxTokens !== undefined) {
      obj.maxTokens = Math.round(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      obj.contextWindow = Math.round(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      obj.supportsImages = message.supportsImages;
    }
    if (message.supportsPromptCache !== false) {
      obj.supportsPromptCache = message.supportsPromptCache;
    }
    if (message.inputPrice !== undefined) {
      obj.inputPrice = message.inputPrice;
    }
    if (message.outputPrice !== undefined) {
      obj.outputPrice = message.outputPrice;
    }
    if (message.cacheWritesPrice !== undefined) {
      obj.cacheWritesPrice = message.cacheWritesPrice;
    }
    if (message.cacheReadsPrice !== undefined) {
      obj.cacheReadsPrice = message.cacheReadsPrice;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.thinkingConfig !== undefined) {
      obj.thinkingConfig = ThinkingConfig.toJSON(message.thinkingConfig);
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      obj.supportsGlobalEndpoint = message.supportsGlobalEndpoint;
    }
    if (message.tiers?.length) {
      obj.tiers = message.tiers.map((e) => ModelTier.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenRouterModelInfo>, I>>(base?: I): OpenRouterModelInfo {
    return OpenRouterModelInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenRouterModelInfo>, I>>(object: I): OpenRouterModelInfo {
    const message = createBaseOpenRouterModelInfo();
    message.maxTokens = object.maxTokens ?? undefined;
    message.contextWindow = object.contextWindow ?? undefined;
    message.supportsImages = object.supportsImages ?? undefined;
    message.supportsPromptCache = object.supportsPromptCache ?? false;
    message.inputPrice = object.inputPrice ?? undefined;
    message.outputPrice = object.outputPrice ?? undefined;
    message.cacheWritesPrice = object.cacheWritesPrice ?? undefined;
    message.cacheReadsPrice = object.cacheReadsPrice ?? undefined;
    message.description = object.description ?? undefined;
    message.thinkingConfig = (object.thinkingConfig !== undefined && object.thinkingConfig !== null)
      ? ThinkingConfig.fromPartial(object.thinkingConfig)
      : undefined;
    message.supportsGlobalEndpoint = object.supportsGlobalEndpoint ?? undefined;
    message.tiers = object.tiers?.map((e) => ModelTier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOpenRouterCompatibleModelInfo(): OpenRouterCompatibleModelInfo {
  return { models: {} };
}

export const OpenRouterCompatibleModelInfo: MessageFns<OpenRouterCompatibleModelInfo> = {
  encode(message: OpenRouterCompatibleModelInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.models).forEach(([key, value]) => {
      OpenRouterCompatibleModelInfo_ModelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenRouterCompatibleModelInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenRouterCompatibleModelInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = OpenRouterCompatibleModelInfo_ModelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.models[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenRouterCompatibleModelInfo {
    return {
      models: isObject(object.models)
        ? Object.entries(object.models).reduce<{ [key: string]: OpenRouterModelInfo }>((acc, [key, value]) => {
          acc[key] = OpenRouterModelInfo.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: OpenRouterCompatibleModelInfo): unknown {
    const obj: any = {};
    if (message.models) {
      const entries = Object.entries(message.models);
      if (entries.length > 0) {
        obj.models = {};
        entries.forEach(([k, v]) => {
          obj.models[k] = OpenRouterModelInfo.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenRouterCompatibleModelInfo>, I>>(base?: I): OpenRouterCompatibleModelInfo {
    return OpenRouterCompatibleModelInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenRouterCompatibleModelInfo>, I>>(
    object: I,
  ): OpenRouterCompatibleModelInfo {
    const message = createBaseOpenRouterCompatibleModelInfo();
    message.models = Object.entries(object.models ?? {}).reduce<{ [key: string]: OpenRouterModelInfo }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = OpenRouterModelInfo.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseOpenRouterCompatibleModelInfo_ModelsEntry(): OpenRouterCompatibleModelInfo_ModelsEntry {
  return { key: "", value: undefined };
}

export const OpenRouterCompatibleModelInfo_ModelsEntry: MessageFns<OpenRouterCompatibleModelInfo_ModelsEntry> = {
  encode(message: OpenRouterCompatibleModelInfo_ModelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      OpenRouterModelInfo.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenRouterCompatibleModelInfo_ModelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenRouterCompatibleModelInfo_ModelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenRouterCompatibleModelInfo_ModelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? OpenRouterModelInfo.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: OpenRouterCompatibleModelInfo_ModelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = OpenRouterModelInfo.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenRouterCompatibleModelInfo_ModelsEntry>, I>>(
    base?: I,
  ): OpenRouterCompatibleModelInfo_ModelsEntry {
    return OpenRouterCompatibleModelInfo_ModelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenRouterCompatibleModelInfo_ModelsEntry>, I>>(
    object: I,
  ): OpenRouterCompatibleModelInfo_ModelsEntry {
    const message = createBaseOpenRouterCompatibleModelInfo_ModelsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? OpenRouterModelInfo.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseOpenAiModelsRequest(): OpenAiModelsRequest {
  return { metadata: undefined, baseUrl: "", apiKey: "" };
}

export const OpenAiModelsRequest: MessageFns<OpenAiModelsRequest> = {
  encode(message: OpenAiModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.baseUrl !== "") {
      writer.uint32(18).string(message.baseUrl);
    }
    if (message.apiKey !== "") {
      writer.uint32(26).string(message.apiKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenAiModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenAiModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenAiModelsRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      baseUrl: isSet(object.baseUrl) ? globalThis.String(object.baseUrl) : "",
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
    };
  },

  toJSON(message: OpenAiModelsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.baseUrl !== "") {
      obj.baseUrl = message.baseUrl;
    }
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenAiModelsRequest>, I>>(base?: I): OpenAiModelsRequest {
    return OpenAiModelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenAiModelsRequest>, I>>(object: I): OpenAiModelsRequest {
    const message = createBaseOpenAiModelsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.baseUrl = object.baseUrl ?? "";
    message.apiKey = object.apiKey ?? "";
    return message;
  },
};

function createBaseUpdateApiConfigurationRequest(): UpdateApiConfigurationRequest {
  return { metadata: undefined, apiConfiguration: undefined };
}

export const UpdateApiConfigurationRequest: MessageFns<UpdateApiConfigurationRequest> = {
  encode(message: UpdateApiConfigurationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.apiConfiguration !== undefined) {
      ModelsApiConfiguration.encode(message.apiConfiguration, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateApiConfigurationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateApiConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiConfiguration = ModelsApiConfiguration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateApiConfigurationRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      apiConfiguration: isSet(object.apiConfiguration)
        ? ModelsApiConfiguration.fromJSON(object.apiConfiguration)
        : undefined,
    };
  },

  toJSON(message: UpdateApiConfigurationRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.apiConfiguration !== undefined) {
      obj.apiConfiguration = ModelsApiConfiguration.toJSON(message.apiConfiguration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateApiConfigurationRequest>, I>>(base?: I): UpdateApiConfigurationRequest {
    return UpdateApiConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateApiConfigurationRequest>, I>>(
    object: I,
  ): UpdateApiConfigurationRequest {
    const message = createBaseUpdateApiConfigurationRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.apiConfiguration = (object.apiConfiguration !== undefined && object.apiConfiguration !== null)
      ? ModelsApiConfiguration.fromPartial(object.apiConfiguration)
      : undefined;
    return message;
  },
};

function createBaseOpenAiCompatibleModelInfo(): OpenAiCompatibleModelInfo {
  return {
    maxTokens: undefined,
    contextWindow: undefined,
    supportsImages: undefined,
    supportsPromptCache: false,
    inputPrice: undefined,
    outputPrice: undefined,
    thinkingConfig: undefined,
    supportsGlobalEndpoint: undefined,
    cacheWritesPrice: undefined,
    cacheReadsPrice: undefined,
    description: undefined,
    tiers: [],
    temperature: undefined,
    isR1FormatRequired: undefined,
  };
}

export const OpenAiCompatibleModelInfo: MessageFns<OpenAiCompatibleModelInfo> = {
  encode(message: OpenAiCompatibleModelInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxTokens !== undefined) {
      writer.uint32(8).int32(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      writer.uint32(16).int32(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      writer.uint32(24).bool(message.supportsImages);
    }
    if (message.supportsPromptCache !== false) {
      writer.uint32(32).bool(message.supportsPromptCache);
    }
    if (message.inputPrice !== undefined) {
      writer.uint32(41).double(message.inputPrice);
    }
    if (message.outputPrice !== undefined) {
      writer.uint32(49).double(message.outputPrice);
    }
    if (message.thinkingConfig !== undefined) {
      ThinkingConfig.encode(message.thinkingConfig, writer.uint32(58).fork()).join();
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      writer.uint32(64).bool(message.supportsGlobalEndpoint);
    }
    if (message.cacheWritesPrice !== undefined) {
      writer.uint32(73).double(message.cacheWritesPrice);
    }
    if (message.cacheReadsPrice !== undefined) {
      writer.uint32(81).double(message.cacheReadsPrice);
    }
    if (message.description !== undefined) {
      writer.uint32(90).string(message.description);
    }
    for (const v of message.tiers) {
      ModelTier.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.temperature !== undefined) {
      writer.uint32(105).double(message.temperature);
    }
    if (message.isR1FormatRequired !== undefined) {
      writer.uint32(112).bool(message.isR1FormatRequired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenAiCompatibleModelInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenAiCompatibleModelInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxTokens = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contextWindow = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportsImages = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.supportsPromptCache = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.inputPrice = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.outputPrice = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.thinkingConfig = ThinkingConfig.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.supportsGlobalEndpoint = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.cacheWritesPrice = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.cacheReadsPrice = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tiers.push(ModelTier.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.isR1FormatRequired = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenAiCompatibleModelInfo {
    return {
      maxTokens: isSet(object.maxTokens) ? globalThis.Number(object.maxTokens) : undefined,
      contextWindow: isSet(object.contextWindow) ? globalThis.Number(object.contextWindow) : undefined,
      supportsImages: isSet(object.supportsImages) ? globalThis.Boolean(object.supportsImages) : undefined,
      supportsPromptCache: isSet(object.supportsPromptCache) ? globalThis.Boolean(object.supportsPromptCache) : false,
      inputPrice: isSet(object.inputPrice) ? globalThis.Number(object.inputPrice) : undefined,
      outputPrice: isSet(object.outputPrice) ? globalThis.Number(object.outputPrice) : undefined,
      thinkingConfig: isSet(object.thinkingConfig) ? ThinkingConfig.fromJSON(object.thinkingConfig) : undefined,
      supportsGlobalEndpoint: isSet(object.supportsGlobalEndpoint)
        ? globalThis.Boolean(object.supportsGlobalEndpoint)
        : undefined,
      cacheWritesPrice: isSet(object.cacheWritesPrice) ? globalThis.Number(object.cacheWritesPrice) : undefined,
      cacheReadsPrice: isSet(object.cacheReadsPrice) ? globalThis.Number(object.cacheReadsPrice) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      tiers: globalThis.Array.isArray(object?.tiers) ? object.tiers.map((e: any) => ModelTier.fromJSON(e)) : [],
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : undefined,
      isR1FormatRequired: isSet(object.isR1FormatRequired) ? globalThis.Boolean(object.isR1FormatRequired) : undefined,
    };
  },

  toJSON(message: OpenAiCompatibleModelInfo): unknown {
    const obj: any = {};
    if (message.maxTokens !== undefined) {
      obj.maxTokens = Math.round(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      obj.contextWindow = Math.round(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      obj.supportsImages = message.supportsImages;
    }
    if (message.supportsPromptCache !== false) {
      obj.supportsPromptCache = message.supportsPromptCache;
    }
    if (message.inputPrice !== undefined) {
      obj.inputPrice = message.inputPrice;
    }
    if (message.outputPrice !== undefined) {
      obj.outputPrice = message.outputPrice;
    }
    if (message.thinkingConfig !== undefined) {
      obj.thinkingConfig = ThinkingConfig.toJSON(message.thinkingConfig);
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      obj.supportsGlobalEndpoint = message.supportsGlobalEndpoint;
    }
    if (message.cacheWritesPrice !== undefined) {
      obj.cacheWritesPrice = message.cacheWritesPrice;
    }
    if (message.cacheReadsPrice !== undefined) {
      obj.cacheReadsPrice = message.cacheReadsPrice;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.tiers?.length) {
      obj.tiers = message.tiers.map((e) => ModelTier.toJSON(e));
    }
    if (message.temperature !== undefined) {
      obj.temperature = message.temperature;
    }
    if (message.isR1FormatRequired !== undefined) {
      obj.isR1FormatRequired = message.isR1FormatRequired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenAiCompatibleModelInfo>, I>>(base?: I): OpenAiCompatibleModelInfo {
    return OpenAiCompatibleModelInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenAiCompatibleModelInfo>, I>>(object: I): OpenAiCompatibleModelInfo {
    const message = createBaseOpenAiCompatibleModelInfo();
    message.maxTokens = object.maxTokens ?? undefined;
    message.contextWindow = object.contextWindow ?? undefined;
    message.supportsImages = object.supportsImages ?? undefined;
    message.supportsPromptCache = object.supportsPromptCache ?? false;
    message.inputPrice = object.inputPrice ?? undefined;
    message.outputPrice = object.outputPrice ?? undefined;
    message.thinkingConfig = (object.thinkingConfig !== undefined && object.thinkingConfig !== null)
      ? ThinkingConfig.fromPartial(object.thinkingConfig)
      : undefined;
    message.supportsGlobalEndpoint = object.supportsGlobalEndpoint ?? undefined;
    message.cacheWritesPrice = object.cacheWritesPrice ?? undefined;
    message.cacheReadsPrice = object.cacheReadsPrice ?? undefined;
    message.description = object.description ?? undefined;
    message.tiers = object.tiers?.map((e) => ModelTier.fromPartial(e)) || [];
    message.temperature = object.temperature ?? undefined;
    message.isR1FormatRequired = object.isR1FormatRequired ?? undefined;
    return message;
  },
};

function createBaseLiteLLMModelInfo(): LiteLLMModelInfo {
  return {
    maxTokens: undefined,
    contextWindow: undefined,
    supportsImages: undefined,
    supportsPromptCache: false,
    inputPrice: undefined,
    outputPrice: undefined,
    thinkingConfig: undefined,
    supportsGlobalEndpoint: undefined,
    cacheWritesPrice: undefined,
    cacheReadsPrice: undefined,
    description: undefined,
    tiers: [],
    temperature: undefined,
  };
}

export const LiteLLMModelInfo: MessageFns<LiteLLMModelInfo> = {
  encode(message: LiteLLMModelInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxTokens !== undefined) {
      writer.uint32(8).int32(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      writer.uint32(16).int32(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      writer.uint32(24).bool(message.supportsImages);
    }
    if (message.supportsPromptCache !== false) {
      writer.uint32(32).bool(message.supportsPromptCache);
    }
    if (message.inputPrice !== undefined) {
      writer.uint32(41).double(message.inputPrice);
    }
    if (message.outputPrice !== undefined) {
      writer.uint32(49).double(message.outputPrice);
    }
    if (message.thinkingConfig !== undefined) {
      ThinkingConfig.encode(message.thinkingConfig, writer.uint32(58).fork()).join();
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      writer.uint32(64).bool(message.supportsGlobalEndpoint);
    }
    if (message.cacheWritesPrice !== undefined) {
      writer.uint32(73).double(message.cacheWritesPrice);
    }
    if (message.cacheReadsPrice !== undefined) {
      writer.uint32(81).double(message.cacheReadsPrice);
    }
    if (message.description !== undefined) {
      writer.uint32(90).string(message.description);
    }
    for (const v of message.tiers) {
      ModelTier.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.temperature !== undefined) {
      writer.uint32(105).double(message.temperature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LiteLLMModelInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLiteLLMModelInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxTokens = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contextWindow = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportsImages = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.supportsPromptCache = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.inputPrice = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.outputPrice = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.thinkingConfig = ThinkingConfig.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.supportsGlobalEndpoint = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.cacheWritesPrice = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.cacheReadsPrice = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tiers.push(ModelTier.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.temperature = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LiteLLMModelInfo {
    return {
      maxTokens: isSet(object.maxTokens) ? globalThis.Number(object.maxTokens) : undefined,
      contextWindow: isSet(object.contextWindow) ? globalThis.Number(object.contextWindow) : undefined,
      supportsImages: isSet(object.supportsImages) ? globalThis.Boolean(object.supportsImages) : undefined,
      supportsPromptCache: isSet(object.supportsPromptCache) ? globalThis.Boolean(object.supportsPromptCache) : false,
      inputPrice: isSet(object.inputPrice) ? globalThis.Number(object.inputPrice) : undefined,
      outputPrice: isSet(object.outputPrice) ? globalThis.Number(object.outputPrice) : undefined,
      thinkingConfig: isSet(object.thinkingConfig) ? ThinkingConfig.fromJSON(object.thinkingConfig) : undefined,
      supportsGlobalEndpoint: isSet(object.supportsGlobalEndpoint)
        ? globalThis.Boolean(object.supportsGlobalEndpoint)
        : undefined,
      cacheWritesPrice: isSet(object.cacheWritesPrice) ? globalThis.Number(object.cacheWritesPrice) : undefined,
      cacheReadsPrice: isSet(object.cacheReadsPrice) ? globalThis.Number(object.cacheReadsPrice) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      tiers: globalThis.Array.isArray(object?.tiers) ? object.tiers.map((e: any) => ModelTier.fromJSON(e)) : [],
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : undefined,
    };
  },

  toJSON(message: LiteLLMModelInfo): unknown {
    const obj: any = {};
    if (message.maxTokens !== undefined) {
      obj.maxTokens = Math.round(message.maxTokens);
    }
    if (message.contextWindow !== undefined) {
      obj.contextWindow = Math.round(message.contextWindow);
    }
    if (message.supportsImages !== undefined) {
      obj.supportsImages = message.supportsImages;
    }
    if (message.supportsPromptCache !== false) {
      obj.supportsPromptCache = message.supportsPromptCache;
    }
    if (message.inputPrice !== undefined) {
      obj.inputPrice = message.inputPrice;
    }
    if (message.outputPrice !== undefined) {
      obj.outputPrice = message.outputPrice;
    }
    if (message.thinkingConfig !== undefined) {
      obj.thinkingConfig = ThinkingConfig.toJSON(message.thinkingConfig);
    }
    if (message.supportsGlobalEndpoint !== undefined) {
      obj.supportsGlobalEndpoint = message.supportsGlobalEndpoint;
    }
    if (message.cacheWritesPrice !== undefined) {
      obj.cacheWritesPrice = message.cacheWritesPrice;
    }
    if (message.cacheReadsPrice !== undefined) {
      obj.cacheReadsPrice = message.cacheReadsPrice;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.tiers?.length) {
      obj.tiers = message.tiers.map((e) => ModelTier.toJSON(e));
    }
    if (message.temperature !== undefined) {
      obj.temperature = message.temperature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LiteLLMModelInfo>, I>>(base?: I): LiteLLMModelInfo {
    return LiteLLMModelInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LiteLLMModelInfo>, I>>(object: I): LiteLLMModelInfo {
    const message = createBaseLiteLLMModelInfo();
    message.maxTokens = object.maxTokens ?? undefined;
    message.contextWindow = object.contextWindow ?? undefined;
    message.supportsImages = object.supportsImages ?? undefined;
    message.supportsPromptCache = object.supportsPromptCache ?? false;
    message.inputPrice = object.inputPrice ?? undefined;
    message.outputPrice = object.outputPrice ?? undefined;
    message.thinkingConfig = (object.thinkingConfig !== undefined && object.thinkingConfig !== null)
      ? ThinkingConfig.fromPartial(object.thinkingConfig)
      : undefined;
    message.supportsGlobalEndpoint = object.supportsGlobalEndpoint ?? undefined;
    message.cacheWritesPrice = object.cacheWritesPrice ?? undefined;
    message.cacheReadsPrice = object.cacheReadsPrice ?? undefined;
    message.description = object.description ?? undefined;
    message.tiers = object.tiers?.map((e) => ModelTier.fromPartial(e)) || [];
    message.temperature = object.temperature ?? undefined;
    return message;
  },
};

function createBaseModelsApiConfiguration(): ModelsApiConfiguration {
  return {
    apiKey: undefined,
    clineApiKey: undefined,
    ulid: undefined,
    liteLlmBaseUrl: undefined,
    liteLlmApiKey: undefined,
    liteLlmUsePromptCache: undefined,
    openAiHeaders: {},
    anthropicBaseUrl: undefined,
    openRouterApiKey: undefined,
    openRouterProviderSorting: undefined,
    awsAccessKey: undefined,
    awsSecretKey: undefined,
    awsSessionToken: undefined,
    awsRegion: undefined,
    awsUseCrossRegionInference: undefined,
    awsBedrockUsePromptCache: undefined,
    awsUseProfile: undefined,
    awsProfile: undefined,
    awsBedrockEndpoint: undefined,
    claudeCodePath: undefined,
    vertexProjectId: undefined,
    vertexRegion: undefined,
    openAiBaseUrl: undefined,
    openAiApiKey: undefined,
    ollamaBaseUrl: undefined,
    ollamaApiOptionsCtxNum: undefined,
    lmStudioBaseUrl: undefined,
    geminiApiKey: undefined,
    geminiBaseUrl: undefined,
    openAiNativeApiKey: undefined,
    deepSeekApiKey: undefined,
    requestyApiKey: undefined,
    requestyBaseUrl: undefined,
    togetherApiKey: undefined,
    fireworksApiKey: undefined,
    fireworksModelMaxCompletionTokens: undefined,
    fireworksModelMaxTokens: undefined,
    qwenApiKey: undefined,
    doubaoApiKey: undefined,
    mistralApiKey: undefined,
    azureApiVersion: undefined,
    qwenApiLine: undefined,
    nebiusApiKey: undefined,
    asksageApiUrl: undefined,
    asksageApiKey: undefined,
    xaiApiKey: undefined,
    sambanovaApiKey: undefined,
    cerebrasApiKey: undefined,
    requestTimeoutMs: undefined,
    sapAiCoreClientId: undefined,
    sapAiCoreClientSecret: undefined,
    sapAiResourceGroup: undefined,
    sapAiCoreTokenUrl: undefined,
    sapAiCoreBaseUrl: undefined,
    moonshotApiKey: undefined,
    moonshotApiLine: undefined,
    awsAuthentication: undefined,
    awsBedrockApiKey: undefined,
    clineAccountId: undefined,
    groqApiKey: undefined,
    huggingFaceApiKey: undefined,
    huaweiCloudMaasApiKey: undefined,
    basetenApiKey: undefined,
    ollamaApiKey: undefined,
    zaiApiKey: undefined,
    zaiApiLine: undefined,
    lmStudioMaxTokens: undefined,
    planModeApiProvider: undefined,
    planModeApiModelId: undefined,
    planModeThinkingBudgetTokens: undefined,
    planModeReasoningEffort: undefined,
    planModeVsCodeLmModelSelector: undefined,
    planModeAwsBedrockCustomSelected: undefined,
    planModeAwsBedrockCustomModelBaseId: undefined,
    planModeOpenRouterModelId: undefined,
    planModeOpenRouterModelInfo: undefined,
    planModeOpenAiModelId: undefined,
    planModeOpenAiModelInfo: undefined,
    planModeOllamaModelId: undefined,
    planModeLmStudioModelId: undefined,
    planModeLiteLlmModelId: undefined,
    planModeLiteLlmModelInfo: undefined,
    planModeRequestyModelId: undefined,
    planModeRequestyModelInfo: undefined,
    planModeTogetherModelId: undefined,
    planModeFireworksModelId: undefined,
    planModeSapAiCoreModelId: undefined,
    planModeGroqModelId: undefined,
    planModeGroqModelInfo: undefined,
    planModeHuggingFaceModelId: undefined,
    planModeHuggingFaceModelInfo: undefined,
    planModeHuaweiCloudMaasModelId: undefined,
    planModeHuaweiCloudMaasModelInfo: undefined,
    planModeBasetenModelId: undefined,
    planModeBasetenModelInfo: undefined,
    actModeApiProvider: undefined,
    actModeApiModelId: undefined,
    actModeThinkingBudgetTokens: undefined,
    actModeReasoningEffort: undefined,
    actModeVsCodeLmModelSelector: undefined,
    actModeAwsBedrockCustomSelected: undefined,
    actModeAwsBedrockCustomModelBaseId: undefined,
    actModeOpenRouterModelId: undefined,
    actModeOpenRouterModelInfo: undefined,
    actModeOpenAiModelId: undefined,
    actModeOpenAiModelInfo: undefined,
    actModeOllamaModelId: undefined,
    actModeLmStudioModelId: undefined,
    actModeLiteLlmModelId: undefined,
    actModeLiteLlmModelInfo: undefined,
    actModeRequestyModelId: undefined,
    actModeRequestyModelInfo: undefined,
    actModeTogetherModelId: undefined,
    actModeFireworksModelId: undefined,
    actModeSapAiCoreModelId: undefined,
    actModeGroqModelId: undefined,
    actModeGroqModelInfo: undefined,
    actModeHuggingFaceModelId: undefined,
    actModeHuggingFaceModelInfo: undefined,
    actModeHuaweiCloudMaasModelId: undefined,
    actModeHuaweiCloudMaasModelInfo: undefined,
    actModeBasetenModelId: undefined,
    actModeBasetenModelInfo: undefined,
    favoritedModelIds: [],
  };
}

export const ModelsApiConfiguration: MessageFns<ModelsApiConfiguration> = {
  encode(message: ModelsApiConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKey !== undefined) {
      writer.uint32(10).string(message.apiKey);
    }
    if (message.clineApiKey !== undefined) {
      writer.uint32(18).string(message.clineApiKey);
    }
    if (message.ulid !== undefined) {
      writer.uint32(26).string(message.ulid);
    }
    if (message.liteLlmBaseUrl !== undefined) {
      writer.uint32(34).string(message.liteLlmBaseUrl);
    }
    if (message.liteLlmApiKey !== undefined) {
      writer.uint32(42).string(message.liteLlmApiKey);
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      writer.uint32(48).bool(message.liteLlmUsePromptCache);
    }
    Object.entries(message.openAiHeaders).forEach(([key, value]) => {
      ModelsApiConfiguration_OpenAiHeadersEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.anthropicBaseUrl !== undefined) {
      writer.uint32(66).string(message.anthropicBaseUrl);
    }
    if (message.openRouterApiKey !== undefined) {
      writer.uint32(74).string(message.openRouterApiKey);
    }
    if (message.openRouterProviderSorting !== undefined) {
      writer.uint32(82).string(message.openRouterProviderSorting);
    }
    if (message.awsAccessKey !== undefined) {
      writer.uint32(90).string(message.awsAccessKey);
    }
    if (message.awsSecretKey !== undefined) {
      writer.uint32(98).string(message.awsSecretKey);
    }
    if (message.awsSessionToken !== undefined) {
      writer.uint32(106).string(message.awsSessionToken);
    }
    if (message.awsRegion !== undefined) {
      writer.uint32(114).string(message.awsRegion);
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      writer.uint32(120).bool(message.awsUseCrossRegionInference);
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      writer.uint32(128).bool(message.awsBedrockUsePromptCache);
    }
    if (message.awsUseProfile !== undefined) {
      writer.uint32(136).bool(message.awsUseProfile);
    }
    if (message.awsProfile !== undefined) {
      writer.uint32(146).string(message.awsProfile);
    }
    if (message.awsBedrockEndpoint !== undefined) {
      writer.uint32(154).string(message.awsBedrockEndpoint);
    }
    if (message.claudeCodePath !== undefined) {
      writer.uint32(162).string(message.claudeCodePath);
    }
    if (message.vertexProjectId !== undefined) {
      writer.uint32(170).string(message.vertexProjectId);
    }
    if (message.vertexRegion !== undefined) {
      writer.uint32(178).string(message.vertexRegion);
    }
    if (message.openAiBaseUrl !== undefined) {
      writer.uint32(186).string(message.openAiBaseUrl);
    }
    if (message.openAiApiKey !== undefined) {
      writer.uint32(194).string(message.openAiApiKey);
    }
    if (message.ollamaBaseUrl !== undefined) {
      writer.uint32(202).string(message.ollamaBaseUrl);
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      writer.uint32(210).string(message.ollamaApiOptionsCtxNum);
    }
    if (message.lmStudioBaseUrl !== undefined) {
      writer.uint32(218).string(message.lmStudioBaseUrl);
    }
    if (message.geminiApiKey !== undefined) {
      writer.uint32(226).string(message.geminiApiKey);
    }
    if (message.geminiBaseUrl !== undefined) {
      writer.uint32(234).string(message.geminiBaseUrl);
    }
    if (message.openAiNativeApiKey !== undefined) {
      writer.uint32(242).string(message.openAiNativeApiKey);
    }
    if (message.deepSeekApiKey !== undefined) {
      writer.uint32(250).string(message.deepSeekApiKey);
    }
    if (message.requestyApiKey !== undefined) {
      writer.uint32(258).string(message.requestyApiKey);
    }
    if (message.requestyBaseUrl !== undefined) {
      writer.uint32(266).string(message.requestyBaseUrl);
    }
    if (message.togetherApiKey !== undefined) {
      writer.uint32(274).string(message.togetherApiKey);
    }
    if (message.fireworksApiKey !== undefined) {
      writer.uint32(282).string(message.fireworksApiKey);
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      writer.uint32(288).int32(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      writer.uint32(296).int32(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      writer.uint32(306).string(message.qwenApiKey);
    }
    if (message.doubaoApiKey !== undefined) {
      writer.uint32(314).string(message.doubaoApiKey);
    }
    if (message.mistralApiKey !== undefined) {
      writer.uint32(322).string(message.mistralApiKey);
    }
    if (message.azureApiVersion !== undefined) {
      writer.uint32(330).string(message.azureApiVersion);
    }
    if (message.qwenApiLine !== undefined) {
      writer.uint32(338).string(message.qwenApiLine);
    }
    if (message.nebiusApiKey !== undefined) {
      writer.uint32(346).string(message.nebiusApiKey);
    }
    if (message.asksageApiUrl !== undefined) {
      writer.uint32(354).string(message.asksageApiUrl);
    }
    if (message.asksageApiKey !== undefined) {
      writer.uint32(362).string(message.asksageApiKey);
    }
    if (message.xaiApiKey !== undefined) {
      writer.uint32(370).string(message.xaiApiKey);
    }
    if (message.sambanovaApiKey !== undefined) {
      writer.uint32(378).string(message.sambanovaApiKey);
    }
    if (message.cerebrasApiKey !== undefined) {
      writer.uint32(386).string(message.cerebrasApiKey);
    }
    if (message.requestTimeoutMs !== undefined) {
      writer.uint32(392).int32(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      writer.uint32(402).string(message.sapAiCoreClientId);
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      writer.uint32(410).string(message.sapAiCoreClientSecret);
    }
    if (message.sapAiResourceGroup !== undefined) {
      writer.uint32(418).string(message.sapAiResourceGroup);
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      writer.uint32(426).string(message.sapAiCoreTokenUrl);
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      writer.uint32(434).string(message.sapAiCoreBaseUrl);
    }
    if (message.moonshotApiKey !== undefined) {
      writer.uint32(442).string(message.moonshotApiKey);
    }
    if (message.moonshotApiLine !== undefined) {
      writer.uint32(450).string(message.moonshotApiLine);
    }
    if (message.awsAuthentication !== undefined) {
      writer.uint32(458).string(message.awsAuthentication);
    }
    if (message.awsBedrockApiKey !== undefined) {
      writer.uint32(466).string(message.awsBedrockApiKey);
    }
    if (message.clineAccountId !== undefined) {
      writer.uint32(474).string(message.clineAccountId);
    }
    if (message.groqApiKey !== undefined) {
      writer.uint32(482).string(message.groqApiKey);
    }
    if (message.huggingFaceApiKey !== undefined) {
      writer.uint32(490).string(message.huggingFaceApiKey);
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      writer.uint32(498).string(message.huaweiCloudMaasApiKey);
    }
    if (message.basetenApiKey !== undefined) {
      writer.uint32(506).string(message.basetenApiKey);
    }
    if (message.ollamaApiKey !== undefined) {
      writer.uint32(514).string(message.ollamaApiKey);
    }
    if (message.zaiApiKey !== undefined) {
      writer.uint32(522).string(message.zaiApiKey);
    }
    if (message.zaiApiLine !== undefined) {
      writer.uint32(530).string(message.zaiApiLine);
    }
    if (message.lmStudioMaxTokens !== undefined) {
      writer.uint32(538).string(message.lmStudioMaxTokens);
    }
    if (message.planModeApiProvider !== undefined) {
      writer.uint32(800).int32(message.planModeApiProvider);
    }
    if (message.planModeApiModelId !== undefined) {
      writer.uint32(810).string(message.planModeApiModelId);
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      writer.uint32(816).int32(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      writer.uint32(826).string(message.planModeReasoningEffort);
    }
    if (message.planModeVsCodeLmModelSelector !== undefined) {
      LanguageModelChatSelector.encode(message.planModeVsCodeLmModelSelector, writer.uint32(834).fork()).join();
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(840).bool(message.planModeAwsBedrockCustomSelected);
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(850).string(message.planModeAwsBedrockCustomModelBaseId);
    }
    if (message.planModeOpenRouterModelId !== undefined) {
      writer.uint32(858).string(message.planModeOpenRouterModelId);
    }
    if (message.planModeOpenRouterModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeOpenRouterModelInfo, writer.uint32(866).fork()).join();
    }
    if (message.planModeOpenAiModelId !== undefined) {
      writer.uint32(874).string(message.planModeOpenAiModelId);
    }
    if (message.planModeOpenAiModelInfo !== undefined) {
      OpenAiCompatibleModelInfo.encode(message.planModeOpenAiModelInfo, writer.uint32(882).fork()).join();
    }
    if (message.planModeOllamaModelId !== undefined) {
      writer.uint32(890).string(message.planModeOllamaModelId);
    }
    if (message.planModeLmStudioModelId !== undefined) {
      writer.uint32(898).string(message.planModeLmStudioModelId);
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      writer.uint32(906).string(message.planModeLiteLlmModelId);
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      LiteLLMModelInfo.encode(message.planModeLiteLlmModelInfo, writer.uint32(914).fork()).join();
    }
    if (message.planModeRequestyModelId !== undefined) {
      writer.uint32(922).string(message.planModeRequestyModelId);
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeRequestyModelInfo, writer.uint32(930).fork()).join();
    }
    if (message.planModeTogetherModelId !== undefined) {
      writer.uint32(938).string(message.planModeTogetherModelId);
    }
    if (message.planModeFireworksModelId !== undefined) {
      writer.uint32(946).string(message.planModeFireworksModelId);
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      writer.uint32(954).string(message.planModeSapAiCoreModelId);
    }
    if (message.planModeGroqModelId !== undefined) {
      writer.uint32(962).string(message.planModeGroqModelId);
    }
    if (message.planModeGroqModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeGroqModelInfo, writer.uint32(970).fork()).join();
    }
    if (message.planModeHuggingFaceModelId !== undefined) {
      writer.uint32(978).string(message.planModeHuggingFaceModelId);
    }
    if (message.planModeHuggingFaceModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeHuggingFaceModelInfo, writer.uint32(986).fork()).join();
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(994).string(message.planModeHuaweiCloudMaasModelId);
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeHuaweiCloudMaasModelInfo, writer.uint32(1002).fork()).join();
    }
    if (message.planModeBasetenModelId !== undefined) {
      writer.uint32(1010).string(message.planModeBasetenModelId);
    }
    if (message.planModeBasetenModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeBasetenModelInfo, writer.uint32(1018).fork()).join();
    }
    if (message.actModeApiProvider !== undefined) {
      writer.uint32(1600).int32(message.actModeApiProvider);
    }
    if (message.actModeApiModelId !== undefined) {
      writer.uint32(1610).string(message.actModeApiModelId);
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      writer.uint32(1616).int32(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      writer.uint32(1626).string(message.actModeReasoningEffort);
    }
    if (message.actModeVsCodeLmModelSelector !== undefined) {
      LanguageModelChatSelector.encode(message.actModeVsCodeLmModelSelector, writer.uint32(1634).fork()).join();
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(1640).bool(message.actModeAwsBedrockCustomSelected);
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(1650).string(message.actModeAwsBedrockCustomModelBaseId);
    }
    if (message.actModeOpenRouterModelId !== undefined) {
      writer.uint32(1658).string(message.actModeOpenRouterModelId);
    }
    if (message.actModeOpenRouterModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeOpenRouterModelInfo, writer.uint32(1666).fork()).join();
    }
    if (message.actModeOpenAiModelId !== undefined) {
      writer.uint32(1674).string(message.actModeOpenAiModelId);
    }
    if (message.actModeOpenAiModelInfo !== undefined) {
      OpenAiCompatibleModelInfo.encode(message.actModeOpenAiModelInfo, writer.uint32(1682).fork()).join();
    }
    if (message.actModeOllamaModelId !== undefined) {
      writer.uint32(1690).string(message.actModeOllamaModelId);
    }
    if (message.actModeLmStudioModelId !== undefined) {
      writer.uint32(1698).string(message.actModeLmStudioModelId);
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      writer.uint32(1706).string(message.actModeLiteLlmModelId);
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      LiteLLMModelInfo.encode(message.actModeLiteLlmModelInfo, writer.uint32(1714).fork()).join();
    }
    if (message.actModeRequestyModelId !== undefined) {
      writer.uint32(1722).string(message.actModeRequestyModelId);
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeRequestyModelInfo, writer.uint32(1730).fork()).join();
    }
    if (message.actModeTogetherModelId !== undefined) {
      writer.uint32(1738).string(message.actModeTogetherModelId);
    }
    if (message.actModeFireworksModelId !== undefined) {
      writer.uint32(1746).string(message.actModeFireworksModelId);
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      writer.uint32(1754).string(message.actModeSapAiCoreModelId);
    }
    if (message.actModeGroqModelId !== undefined) {
      writer.uint32(1762).string(message.actModeGroqModelId);
    }
    if (message.actModeGroqModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeGroqModelInfo, writer.uint32(1770).fork()).join();
    }
    if (message.actModeHuggingFaceModelId !== undefined) {
      writer.uint32(1778).string(message.actModeHuggingFaceModelId);
    }
    if (message.actModeHuggingFaceModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeHuggingFaceModelInfo, writer.uint32(1786).fork()).join();
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(1794).string(message.actModeHuaweiCloudMaasModelId);
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeHuaweiCloudMaasModelInfo, writer.uint32(1802).fork()).join();
    }
    if (message.actModeBasetenModelId !== undefined) {
      writer.uint32(1810).string(message.actModeBasetenModelId);
    }
    if (message.actModeBasetenModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeBasetenModelInfo, writer.uint32(1818).fork()).join();
    }
    for (const v of message.favoritedModelIds) {
      writer.uint32(2402).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelsApiConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelsApiConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clineApiKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ulid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.liteLlmBaseUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.liteLlmApiKey = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.liteLlmUsePromptCache = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ModelsApiConfiguration_OpenAiHeadersEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.openAiHeaders[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.anthropicBaseUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.openRouterApiKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.openRouterProviderSorting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.awsAccessKey = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.awsSecretKey = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.awsSessionToken = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.awsRegion = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.awsUseCrossRegionInference = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.awsBedrockUsePromptCache = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.awsUseProfile = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.awsProfile = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.awsBedrockEndpoint = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.claudeCodePath = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.vertexProjectId = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.vertexRegion = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.openAiBaseUrl = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.openAiApiKey = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.ollamaBaseUrl = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.ollamaApiOptionsCtxNum = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.lmStudioBaseUrl = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.geminiApiKey = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.geminiBaseUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.openAiNativeApiKey = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.deepSeekApiKey = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.requestyApiKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.requestyBaseUrl = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.togetherApiKey = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.fireworksApiKey = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.fireworksModelMaxCompletionTokens = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.fireworksModelMaxTokens = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.qwenApiKey = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.doubaoApiKey = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.mistralApiKey = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.azureApiVersion = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.qwenApiLine = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.nebiusApiKey = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.asksageApiUrl = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.asksageApiKey = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.xaiApiKey = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.sambanovaApiKey = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.cerebrasApiKey = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.requestTimeoutMs = reader.int32();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.sapAiCoreClientId = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.sapAiCoreClientSecret = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.sapAiResourceGroup = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.sapAiCoreTokenUrl = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.sapAiCoreBaseUrl = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.moonshotApiKey = reader.string();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.moonshotApiLine = reader.string();
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.awsAuthentication = reader.string();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.awsBedrockApiKey = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.clineAccountId = reader.string();
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.groqApiKey = reader.string();
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.huggingFaceApiKey = reader.string();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.huaweiCloudMaasApiKey = reader.string();
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.basetenApiKey = reader.string();
          continue;
        }
        case 64: {
          if (tag !== 514) {
            break;
          }

          message.ollamaApiKey = reader.string();
          continue;
        }
        case 65: {
          if (tag !== 522) {
            break;
          }

          message.zaiApiKey = reader.string();
          continue;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.zaiApiLine = reader.string();
          continue;
        }
        case 67: {
          if (tag !== 538) {
            break;
          }

          message.lmStudioMaxTokens = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.planModeApiProvider = reader.int32() as any;
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.planModeApiModelId = reader.string();
          continue;
        }
        case 102: {
          if (tag !== 816) {
            break;
          }

          message.planModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.planModeReasoningEffort = reader.string();
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.planModeVsCodeLmModelSelector = LanguageModelChatSelector.decode(reader, reader.uint32());
          continue;
        }
        case 105: {
          if (tag !== 840) {
            break;
          }

          message.planModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 106: {
          if (tag !== 850) {
            break;
          }

          message.planModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.planModeOpenRouterModelId = reader.string();
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.planModeOpenRouterModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 109: {
          if (tag !== 874) {
            break;
          }

          message.planModeOpenAiModelId = reader.string();
          continue;
        }
        case 110: {
          if (tag !== 882) {
            break;
          }

          message.planModeOpenAiModelInfo = OpenAiCompatibleModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 111: {
          if (tag !== 890) {
            break;
          }

          message.planModeOllamaModelId = reader.string();
          continue;
        }
        case 112: {
          if (tag !== 898) {
            break;
          }

          message.planModeLmStudioModelId = reader.string();
          continue;
        }
        case 113: {
          if (tag !== 906) {
            break;
          }

          message.planModeLiteLlmModelId = reader.string();
          continue;
        }
        case 114: {
          if (tag !== 914) {
            break;
          }

          message.planModeLiteLlmModelInfo = LiteLLMModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.planModeRequestyModelId = reader.string();
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.planModeRequestyModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 117: {
          if (tag !== 938) {
            break;
          }

          message.planModeTogetherModelId = reader.string();
          continue;
        }
        case 118: {
          if (tag !== 946) {
            break;
          }

          message.planModeFireworksModelId = reader.string();
          continue;
        }
        case 119: {
          if (tag !== 954) {
            break;
          }

          message.planModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 120: {
          if (tag !== 962) {
            break;
          }

          message.planModeGroqModelId = reader.string();
          continue;
        }
        case 121: {
          if (tag !== 970) {
            break;
          }

          message.planModeGroqModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 122: {
          if (tag !== 978) {
            break;
          }

          message.planModeHuggingFaceModelId = reader.string();
          continue;
        }
        case 123: {
          if (tag !== 986) {
            break;
          }

          message.planModeHuggingFaceModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 124: {
          if (tag !== 994) {
            break;
          }

          message.planModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 125: {
          if (tag !== 1002) {
            break;
          }

          message.planModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 126: {
          if (tag !== 1010) {
            break;
          }

          message.planModeBasetenModelId = reader.string();
          continue;
        }
        case 127: {
          if (tag !== 1018) {
            break;
          }

          message.planModeBasetenModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 200: {
          if (tag !== 1600) {
            break;
          }

          message.actModeApiProvider = reader.int32() as any;
          continue;
        }
        case 201: {
          if (tag !== 1610) {
            break;
          }

          message.actModeApiModelId = reader.string();
          continue;
        }
        case 202: {
          if (tag !== 1616) {
            break;
          }

          message.actModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 203: {
          if (tag !== 1626) {
            break;
          }

          message.actModeReasoningEffort = reader.string();
          continue;
        }
        case 204: {
          if (tag !== 1634) {
            break;
          }

          message.actModeVsCodeLmModelSelector = LanguageModelChatSelector.decode(reader, reader.uint32());
          continue;
        }
        case 205: {
          if (tag !== 1640) {
            break;
          }

          message.actModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 206: {
          if (tag !== 1650) {
            break;
          }

          message.actModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 207: {
          if (tag !== 1658) {
            break;
          }

          message.actModeOpenRouterModelId = reader.string();
          continue;
        }
        case 208: {
          if (tag !== 1666) {
            break;
          }

          message.actModeOpenRouterModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 209: {
          if (tag !== 1674) {
            break;
          }

          message.actModeOpenAiModelId = reader.string();
          continue;
        }
        case 210: {
          if (tag !== 1682) {
            break;
          }

          message.actModeOpenAiModelInfo = OpenAiCompatibleModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 211: {
          if (tag !== 1690) {
            break;
          }

          message.actModeOllamaModelId = reader.string();
          continue;
        }
        case 212: {
          if (tag !== 1698) {
            break;
          }

          message.actModeLmStudioModelId = reader.string();
          continue;
        }
        case 213: {
          if (tag !== 1706) {
            break;
          }

          message.actModeLiteLlmModelId = reader.string();
          continue;
        }
        case 214: {
          if (tag !== 1714) {
            break;
          }

          message.actModeLiteLlmModelInfo = LiteLLMModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 215: {
          if (tag !== 1722) {
            break;
          }

          message.actModeRequestyModelId = reader.string();
          continue;
        }
        case 216: {
          if (tag !== 1730) {
            break;
          }

          message.actModeRequestyModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 217: {
          if (tag !== 1738) {
            break;
          }

          message.actModeTogetherModelId = reader.string();
          continue;
        }
        case 218: {
          if (tag !== 1746) {
            break;
          }

          message.actModeFireworksModelId = reader.string();
          continue;
        }
        case 219: {
          if (tag !== 1754) {
            break;
          }

          message.actModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 220: {
          if (tag !== 1762) {
            break;
          }

          message.actModeGroqModelId = reader.string();
          continue;
        }
        case 221: {
          if (tag !== 1770) {
            break;
          }

          message.actModeGroqModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 222: {
          if (tag !== 1778) {
            break;
          }

          message.actModeHuggingFaceModelId = reader.string();
          continue;
        }
        case 223: {
          if (tag !== 1786) {
            break;
          }

          message.actModeHuggingFaceModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 224: {
          if (tag !== 1794) {
            break;
          }

          message.actModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 225: {
          if (tag !== 1802) {
            break;
          }

          message.actModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 226: {
          if (tag !== 1810) {
            break;
          }

          message.actModeBasetenModelId = reader.string();
          continue;
        }
        case 227: {
          if (tag !== 1818) {
            break;
          }

          message.actModeBasetenModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 300: {
          if (tag !== 2402) {
            break;
          }

          message.favoritedModelIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelsApiConfiguration {
    return {
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : undefined,
      clineApiKey: isSet(object.clineApiKey) ? globalThis.String(object.clineApiKey) : undefined,
      ulid: isSet(object.ulid) ? globalThis.String(object.ulid) : undefined,
      liteLlmBaseUrl: isSet(object.liteLlmBaseUrl) ? globalThis.String(object.liteLlmBaseUrl) : undefined,
      liteLlmApiKey: isSet(object.liteLlmApiKey) ? globalThis.String(object.liteLlmApiKey) : undefined,
      liteLlmUsePromptCache: isSet(object.liteLlmUsePromptCache)
        ? globalThis.Boolean(object.liteLlmUsePromptCache)
        : undefined,
      openAiHeaders: isObject(object.openAiHeaders)
        ? Object.entries(object.openAiHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      anthropicBaseUrl: isSet(object.anthropicBaseUrl) ? globalThis.String(object.anthropicBaseUrl) : undefined,
      openRouterApiKey: isSet(object.openRouterApiKey) ? globalThis.String(object.openRouterApiKey) : undefined,
      openRouterProviderSorting: isSet(object.openRouterProviderSorting)
        ? globalThis.String(object.openRouterProviderSorting)
        : undefined,
      awsAccessKey: isSet(object.awsAccessKey) ? globalThis.String(object.awsAccessKey) : undefined,
      awsSecretKey: isSet(object.awsSecretKey) ? globalThis.String(object.awsSecretKey) : undefined,
      awsSessionToken: isSet(object.awsSessionToken) ? globalThis.String(object.awsSessionToken) : undefined,
      awsRegion: isSet(object.awsRegion) ? globalThis.String(object.awsRegion) : undefined,
      awsUseCrossRegionInference: isSet(object.awsUseCrossRegionInference)
        ? globalThis.Boolean(object.awsUseCrossRegionInference)
        : undefined,
      awsBedrockUsePromptCache: isSet(object.awsBedrockUsePromptCache)
        ? globalThis.Boolean(object.awsBedrockUsePromptCache)
        : undefined,
      awsUseProfile: isSet(object.awsUseProfile) ? globalThis.Boolean(object.awsUseProfile) : undefined,
      awsProfile: isSet(object.awsProfile) ? globalThis.String(object.awsProfile) : undefined,
      awsBedrockEndpoint: isSet(object.awsBedrockEndpoint) ? globalThis.String(object.awsBedrockEndpoint) : undefined,
      claudeCodePath: isSet(object.claudeCodePath) ? globalThis.String(object.claudeCodePath) : undefined,
      vertexProjectId: isSet(object.vertexProjectId) ? globalThis.String(object.vertexProjectId) : undefined,
      vertexRegion: isSet(object.vertexRegion) ? globalThis.String(object.vertexRegion) : undefined,
      openAiBaseUrl: isSet(object.openAiBaseUrl) ? globalThis.String(object.openAiBaseUrl) : undefined,
      openAiApiKey: isSet(object.openAiApiKey) ? globalThis.String(object.openAiApiKey) : undefined,
      ollamaBaseUrl: isSet(object.ollamaBaseUrl) ? globalThis.String(object.ollamaBaseUrl) : undefined,
      ollamaApiOptionsCtxNum: isSet(object.ollamaApiOptionsCtxNum)
        ? globalThis.String(object.ollamaApiOptionsCtxNum)
        : undefined,
      lmStudioBaseUrl: isSet(object.lmStudioBaseUrl) ? globalThis.String(object.lmStudioBaseUrl) : undefined,
      geminiApiKey: isSet(object.geminiApiKey) ? globalThis.String(object.geminiApiKey) : undefined,
      geminiBaseUrl: isSet(object.geminiBaseUrl) ? globalThis.String(object.geminiBaseUrl) : undefined,
      openAiNativeApiKey: isSet(object.openAiNativeApiKey) ? globalThis.String(object.openAiNativeApiKey) : undefined,
      deepSeekApiKey: isSet(object.deepSeekApiKey) ? globalThis.String(object.deepSeekApiKey) : undefined,
      requestyApiKey: isSet(object.requestyApiKey) ? globalThis.String(object.requestyApiKey) : undefined,
      requestyBaseUrl: isSet(object.requestyBaseUrl) ? globalThis.String(object.requestyBaseUrl) : undefined,
      togetherApiKey: isSet(object.togetherApiKey) ? globalThis.String(object.togetherApiKey) : undefined,
      fireworksApiKey: isSet(object.fireworksApiKey) ? globalThis.String(object.fireworksApiKey) : undefined,
      fireworksModelMaxCompletionTokens: isSet(object.fireworksModelMaxCompletionTokens)
        ? globalThis.Number(object.fireworksModelMaxCompletionTokens)
        : undefined,
      fireworksModelMaxTokens: isSet(object.fireworksModelMaxTokens)
        ? globalThis.Number(object.fireworksModelMaxTokens)
        : undefined,
      qwenApiKey: isSet(object.qwenApiKey) ? globalThis.String(object.qwenApiKey) : undefined,
      doubaoApiKey: isSet(object.doubaoApiKey) ? globalThis.String(object.doubaoApiKey) : undefined,
      mistralApiKey: isSet(object.mistralApiKey) ? globalThis.String(object.mistralApiKey) : undefined,
      azureApiVersion: isSet(object.azureApiVersion) ? globalThis.String(object.azureApiVersion) : undefined,
      qwenApiLine: isSet(object.qwenApiLine) ? globalThis.String(object.qwenApiLine) : undefined,
      nebiusApiKey: isSet(object.nebiusApiKey) ? globalThis.String(object.nebiusApiKey) : undefined,
      asksageApiUrl: isSet(object.asksageApiUrl) ? globalThis.String(object.asksageApiUrl) : undefined,
      asksageApiKey: isSet(object.asksageApiKey) ? globalThis.String(object.asksageApiKey) : undefined,
      xaiApiKey: isSet(object.xaiApiKey) ? globalThis.String(object.xaiApiKey) : undefined,
      sambanovaApiKey: isSet(object.sambanovaApiKey) ? globalThis.String(object.sambanovaApiKey) : undefined,
      cerebrasApiKey: isSet(object.cerebrasApiKey) ? globalThis.String(object.cerebrasApiKey) : undefined,
      requestTimeoutMs: isSet(object.requestTimeoutMs) ? globalThis.Number(object.requestTimeoutMs) : undefined,
      sapAiCoreClientId: isSet(object.sapAiCoreClientId) ? globalThis.String(object.sapAiCoreClientId) : undefined,
      sapAiCoreClientSecret: isSet(object.sapAiCoreClientSecret)
        ? globalThis.String(object.sapAiCoreClientSecret)
        : undefined,
      sapAiResourceGroup: isSet(object.sapAiResourceGroup) ? globalThis.String(object.sapAiResourceGroup) : undefined,
      sapAiCoreTokenUrl: isSet(object.sapAiCoreTokenUrl) ? globalThis.String(object.sapAiCoreTokenUrl) : undefined,
      sapAiCoreBaseUrl: isSet(object.sapAiCoreBaseUrl) ? globalThis.String(object.sapAiCoreBaseUrl) : undefined,
      moonshotApiKey: isSet(object.moonshotApiKey) ? globalThis.String(object.moonshotApiKey) : undefined,
      moonshotApiLine: isSet(object.moonshotApiLine) ? globalThis.String(object.moonshotApiLine) : undefined,
      awsAuthentication: isSet(object.awsAuthentication) ? globalThis.String(object.awsAuthentication) : undefined,
      awsBedrockApiKey: isSet(object.awsBedrockApiKey) ? globalThis.String(object.awsBedrockApiKey) : undefined,
      clineAccountId: isSet(object.clineAccountId) ? globalThis.String(object.clineAccountId) : undefined,
      groqApiKey: isSet(object.groqApiKey) ? globalThis.String(object.groqApiKey) : undefined,
      huggingFaceApiKey: isSet(object.huggingFaceApiKey) ? globalThis.String(object.huggingFaceApiKey) : undefined,
      huaweiCloudMaasApiKey: isSet(object.huaweiCloudMaasApiKey)
        ? globalThis.String(object.huaweiCloudMaasApiKey)
        : undefined,
      basetenApiKey: isSet(object.basetenApiKey) ? globalThis.String(object.basetenApiKey) : undefined,
      ollamaApiKey: isSet(object.ollamaApiKey) ? globalThis.String(object.ollamaApiKey) : undefined,
      zaiApiKey: isSet(object.zaiApiKey) ? globalThis.String(object.zaiApiKey) : undefined,
      zaiApiLine: isSet(object.zaiApiLine) ? globalThis.String(object.zaiApiLine) : undefined,
      lmStudioMaxTokens: isSet(object.lmStudioMaxTokens) ? globalThis.String(object.lmStudioMaxTokens) : undefined,
      planModeApiProvider: isSet(object.planModeApiProvider)
        ? apiProviderFromJSON(object.planModeApiProvider)
        : undefined,
      planModeApiModelId: isSet(object.planModeApiModelId) ? globalThis.String(object.planModeApiModelId) : undefined,
      planModeThinkingBudgetTokens: isSet(object.planModeThinkingBudgetTokens)
        ? globalThis.Number(object.planModeThinkingBudgetTokens)
        : undefined,
      planModeReasoningEffort: isSet(object.planModeReasoningEffort)
        ? globalThis.String(object.planModeReasoningEffort)
        : undefined,
      planModeVsCodeLmModelSelector: isSet(object.planModeVsCodeLmModelSelector)
        ? LanguageModelChatSelector.fromJSON(object.planModeVsCodeLmModelSelector)
        : undefined,
      planModeAwsBedrockCustomSelected: isSet(object.planModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.planModeAwsBedrockCustomSelected)
        : undefined,
      planModeAwsBedrockCustomModelBaseId: isSet(object.planModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.planModeAwsBedrockCustomModelBaseId)
        : undefined,
      planModeOpenRouterModelId: isSet(object.planModeOpenRouterModelId)
        ? globalThis.String(object.planModeOpenRouterModelId)
        : undefined,
      planModeOpenRouterModelInfo: isSet(object.planModeOpenRouterModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeOpenRouterModelInfo)
        : undefined,
      planModeOpenAiModelId: isSet(object.planModeOpenAiModelId)
        ? globalThis.String(object.planModeOpenAiModelId)
        : undefined,
      planModeOpenAiModelInfo: isSet(object.planModeOpenAiModelInfo)
        ? OpenAiCompatibleModelInfo.fromJSON(object.planModeOpenAiModelInfo)
        : undefined,
      planModeOllamaModelId: isSet(object.planModeOllamaModelId)
        ? globalThis.String(object.planModeOllamaModelId)
        : undefined,
      planModeLmStudioModelId: isSet(object.planModeLmStudioModelId)
        ? globalThis.String(object.planModeLmStudioModelId)
        : undefined,
      planModeLiteLlmModelId: isSet(object.planModeLiteLlmModelId)
        ? globalThis.String(object.planModeLiteLlmModelId)
        : undefined,
      planModeLiteLlmModelInfo: isSet(object.planModeLiteLlmModelInfo)
        ? LiteLLMModelInfo.fromJSON(object.planModeLiteLlmModelInfo)
        : undefined,
      planModeRequestyModelId: isSet(object.planModeRequestyModelId)
        ? globalThis.String(object.planModeRequestyModelId)
        : undefined,
      planModeRequestyModelInfo: isSet(object.planModeRequestyModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeRequestyModelInfo)
        : undefined,
      planModeTogetherModelId: isSet(object.planModeTogetherModelId)
        ? globalThis.String(object.planModeTogetherModelId)
        : undefined,
      planModeFireworksModelId: isSet(object.planModeFireworksModelId)
        ? globalThis.String(object.planModeFireworksModelId)
        : undefined,
      planModeSapAiCoreModelId: isSet(object.planModeSapAiCoreModelId)
        ? globalThis.String(object.planModeSapAiCoreModelId)
        : undefined,
      planModeGroqModelId: isSet(object.planModeGroqModelId)
        ? globalThis.String(object.planModeGroqModelId)
        : undefined,
      planModeGroqModelInfo: isSet(object.planModeGroqModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeGroqModelInfo)
        : undefined,
      planModeHuggingFaceModelId: isSet(object.planModeHuggingFaceModelId)
        ? globalThis.String(object.planModeHuggingFaceModelId)
        : undefined,
      planModeHuggingFaceModelInfo: isSet(object.planModeHuggingFaceModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeHuggingFaceModelInfo)
        : undefined,
      planModeHuaweiCloudMaasModelId: isSet(object.planModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.planModeHuaweiCloudMaasModelId)
        : undefined,
      planModeHuaweiCloudMaasModelInfo: isSet(object.planModeHuaweiCloudMaasModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeHuaweiCloudMaasModelInfo)
        : undefined,
      planModeBasetenModelId: isSet(object.planModeBasetenModelId)
        ? globalThis.String(object.planModeBasetenModelId)
        : undefined,
      planModeBasetenModelInfo: isSet(object.planModeBasetenModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeBasetenModelInfo)
        : undefined,
      actModeApiProvider: isSet(object.actModeApiProvider) ? apiProviderFromJSON(object.actModeApiProvider) : undefined,
      actModeApiModelId: isSet(object.actModeApiModelId) ? globalThis.String(object.actModeApiModelId) : undefined,
      actModeThinkingBudgetTokens: isSet(object.actModeThinkingBudgetTokens)
        ? globalThis.Number(object.actModeThinkingBudgetTokens)
        : undefined,
      actModeReasoningEffort: isSet(object.actModeReasoningEffort)
        ? globalThis.String(object.actModeReasoningEffort)
        : undefined,
      actModeVsCodeLmModelSelector: isSet(object.actModeVsCodeLmModelSelector)
        ? LanguageModelChatSelector.fromJSON(object.actModeVsCodeLmModelSelector)
        : undefined,
      actModeAwsBedrockCustomSelected: isSet(object.actModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.actModeAwsBedrockCustomSelected)
        : undefined,
      actModeAwsBedrockCustomModelBaseId: isSet(object.actModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.actModeAwsBedrockCustomModelBaseId)
        : undefined,
      actModeOpenRouterModelId: isSet(object.actModeOpenRouterModelId)
        ? globalThis.String(object.actModeOpenRouterModelId)
        : undefined,
      actModeOpenRouterModelInfo: isSet(object.actModeOpenRouterModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeOpenRouterModelInfo)
        : undefined,
      actModeOpenAiModelId: isSet(object.actModeOpenAiModelId)
        ? globalThis.String(object.actModeOpenAiModelId)
        : undefined,
      actModeOpenAiModelInfo: isSet(object.actModeOpenAiModelInfo)
        ? OpenAiCompatibleModelInfo.fromJSON(object.actModeOpenAiModelInfo)
        : undefined,
      actModeOllamaModelId: isSet(object.actModeOllamaModelId)
        ? globalThis.String(object.actModeOllamaModelId)
        : undefined,
      actModeLmStudioModelId: isSet(object.actModeLmStudioModelId)
        ? globalThis.String(object.actModeLmStudioModelId)
        : undefined,
      actModeLiteLlmModelId: isSet(object.actModeLiteLlmModelId)
        ? globalThis.String(object.actModeLiteLlmModelId)
        : undefined,
      actModeLiteLlmModelInfo: isSet(object.actModeLiteLlmModelInfo)
        ? LiteLLMModelInfo.fromJSON(object.actModeLiteLlmModelInfo)
        : undefined,
      actModeRequestyModelId: isSet(object.actModeRequestyModelId)
        ? globalThis.String(object.actModeRequestyModelId)
        : undefined,
      actModeRequestyModelInfo: isSet(object.actModeRequestyModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeRequestyModelInfo)
        : undefined,
      actModeTogetherModelId: isSet(object.actModeTogetherModelId)
        ? globalThis.String(object.actModeTogetherModelId)
        : undefined,
      actModeFireworksModelId: isSet(object.actModeFireworksModelId)
        ? globalThis.String(object.actModeFireworksModelId)
        : undefined,
      actModeSapAiCoreModelId: isSet(object.actModeSapAiCoreModelId)
        ? globalThis.String(object.actModeSapAiCoreModelId)
        : undefined,
      actModeGroqModelId: isSet(object.actModeGroqModelId) ? globalThis.String(object.actModeGroqModelId) : undefined,
      actModeGroqModelInfo: isSet(object.actModeGroqModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeGroqModelInfo)
        : undefined,
      actModeHuggingFaceModelId: isSet(object.actModeHuggingFaceModelId)
        ? globalThis.String(object.actModeHuggingFaceModelId)
        : undefined,
      actModeHuggingFaceModelInfo: isSet(object.actModeHuggingFaceModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeHuggingFaceModelInfo)
        : undefined,
      actModeHuaweiCloudMaasModelId: isSet(object.actModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.actModeHuaweiCloudMaasModelId)
        : undefined,
      actModeHuaweiCloudMaasModelInfo: isSet(object.actModeHuaweiCloudMaasModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeHuaweiCloudMaasModelInfo)
        : undefined,
      actModeBasetenModelId: isSet(object.actModeBasetenModelId)
        ? globalThis.String(object.actModeBasetenModelId)
        : undefined,
      actModeBasetenModelInfo: isSet(object.actModeBasetenModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeBasetenModelInfo)
        : undefined,
      favoritedModelIds: globalThis.Array.isArray(object?.favoritedModelIds)
        ? object.favoritedModelIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ModelsApiConfiguration): unknown {
    const obj: any = {};
    if (message.apiKey !== undefined) {
      obj.apiKey = message.apiKey;
    }
    if (message.clineApiKey !== undefined) {
      obj.clineApiKey = message.clineApiKey;
    }
    if (message.ulid !== undefined) {
      obj.ulid = message.ulid;
    }
    if (message.liteLlmBaseUrl !== undefined) {
      obj.liteLlmBaseUrl = message.liteLlmBaseUrl;
    }
    if (message.liteLlmApiKey !== undefined) {
      obj.liteLlmApiKey = message.liteLlmApiKey;
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      obj.liteLlmUsePromptCache = message.liteLlmUsePromptCache;
    }
    if (message.openAiHeaders) {
      const entries = Object.entries(message.openAiHeaders);
      if (entries.length > 0) {
        obj.openAiHeaders = {};
        entries.forEach(([k, v]) => {
          obj.openAiHeaders[k] = v;
        });
      }
    }
    if (message.anthropicBaseUrl !== undefined) {
      obj.anthropicBaseUrl = message.anthropicBaseUrl;
    }
    if (message.openRouterApiKey !== undefined) {
      obj.openRouterApiKey = message.openRouterApiKey;
    }
    if (message.openRouterProviderSorting !== undefined) {
      obj.openRouterProviderSorting = message.openRouterProviderSorting;
    }
    if (message.awsAccessKey !== undefined) {
      obj.awsAccessKey = message.awsAccessKey;
    }
    if (message.awsSecretKey !== undefined) {
      obj.awsSecretKey = message.awsSecretKey;
    }
    if (message.awsSessionToken !== undefined) {
      obj.awsSessionToken = message.awsSessionToken;
    }
    if (message.awsRegion !== undefined) {
      obj.awsRegion = message.awsRegion;
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      obj.awsUseCrossRegionInference = message.awsUseCrossRegionInference;
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      obj.awsBedrockUsePromptCache = message.awsBedrockUsePromptCache;
    }
    if (message.awsUseProfile !== undefined) {
      obj.awsUseProfile = message.awsUseProfile;
    }
    if (message.awsProfile !== undefined) {
      obj.awsProfile = message.awsProfile;
    }
    if (message.awsBedrockEndpoint !== undefined) {
      obj.awsBedrockEndpoint = message.awsBedrockEndpoint;
    }
    if (message.claudeCodePath !== undefined) {
      obj.claudeCodePath = message.claudeCodePath;
    }
    if (message.vertexProjectId !== undefined) {
      obj.vertexProjectId = message.vertexProjectId;
    }
    if (message.vertexRegion !== undefined) {
      obj.vertexRegion = message.vertexRegion;
    }
    if (message.openAiBaseUrl !== undefined) {
      obj.openAiBaseUrl = message.openAiBaseUrl;
    }
    if (message.openAiApiKey !== undefined) {
      obj.openAiApiKey = message.openAiApiKey;
    }
    if (message.ollamaBaseUrl !== undefined) {
      obj.ollamaBaseUrl = message.ollamaBaseUrl;
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      obj.ollamaApiOptionsCtxNum = message.ollamaApiOptionsCtxNum;
    }
    if (message.lmStudioBaseUrl !== undefined) {
      obj.lmStudioBaseUrl = message.lmStudioBaseUrl;
    }
    if (message.geminiApiKey !== undefined) {
      obj.geminiApiKey = message.geminiApiKey;
    }
    if (message.geminiBaseUrl !== undefined) {
      obj.geminiBaseUrl = message.geminiBaseUrl;
    }
    if (message.openAiNativeApiKey !== undefined) {
      obj.openAiNativeApiKey = message.openAiNativeApiKey;
    }
    if (message.deepSeekApiKey !== undefined) {
      obj.deepSeekApiKey = message.deepSeekApiKey;
    }
    if (message.requestyApiKey !== undefined) {
      obj.requestyApiKey = message.requestyApiKey;
    }
    if (message.requestyBaseUrl !== undefined) {
      obj.requestyBaseUrl = message.requestyBaseUrl;
    }
    if (message.togetherApiKey !== undefined) {
      obj.togetherApiKey = message.togetherApiKey;
    }
    if (message.fireworksApiKey !== undefined) {
      obj.fireworksApiKey = message.fireworksApiKey;
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      obj.fireworksModelMaxCompletionTokens = Math.round(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      obj.fireworksModelMaxTokens = Math.round(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      obj.qwenApiKey = message.qwenApiKey;
    }
    if (message.doubaoApiKey !== undefined) {
      obj.doubaoApiKey = message.doubaoApiKey;
    }
    if (message.mistralApiKey !== undefined) {
      obj.mistralApiKey = message.mistralApiKey;
    }
    if (message.azureApiVersion !== undefined) {
      obj.azureApiVersion = message.azureApiVersion;
    }
    if (message.qwenApiLine !== undefined) {
      obj.qwenApiLine = message.qwenApiLine;
    }
    if (message.nebiusApiKey !== undefined) {
      obj.nebiusApiKey = message.nebiusApiKey;
    }
    if (message.asksageApiUrl !== undefined) {
      obj.asksageApiUrl = message.asksageApiUrl;
    }
    if (message.asksageApiKey !== undefined) {
      obj.asksageApiKey = message.asksageApiKey;
    }
    if (message.xaiApiKey !== undefined) {
      obj.xaiApiKey = message.xaiApiKey;
    }
    if (message.sambanovaApiKey !== undefined) {
      obj.sambanovaApiKey = message.sambanovaApiKey;
    }
    if (message.cerebrasApiKey !== undefined) {
      obj.cerebrasApiKey = message.cerebrasApiKey;
    }
    if (message.requestTimeoutMs !== undefined) {
      obj.requestTimeoutMs = Math.round(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      obj.sapAiCoreClientId = message.sapAiCoreClientId;
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      obj.sapAiCoreClientSecret = message.sapAiCoreClientSecret;
    }
    if (message.sapAiResourceGroup !== undefined) {
      obj.sapAiResourceGroup = message.sapAiResourceGroup;
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      obj.sapAiCoreTokenUrl = message.sapAiCoreTokenUrl;
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      obj.sapAiCoreBaseUrl = message.sapAiCoreBaseUrl;
    }
    if (message.moonshotApiKey !== undefined) {
      obj.moonshotApiKey = message.moonshotApiKey;
    }
    if (message.moonshotApiLine !== undefined) {
      obj.moonshotApiLine = message.moonshotApiLine;
    }
    if (message.awsAuthentication !== undefined) {
      obj.awsAuthentication = message.awsAuthentication;
    }
    if (message.awsBedrockApiKey !== undefined) {
      obj.awsBedrockApiKey = message.awsBedrockApiKey;
    }
    if (message.clineAccountId !== undefined) {
      obj.clineAccountId = message.clineAccountId;
    }
    if (message.groqApiKey !== undefined) {
      obj.groqApiKey = message.groqApiKey;
    }
    if (message.huggingFaceApiKey !== undefined) {
      obj.huggingFaceApiKey = message.huggingFaceApiKey;
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      obj.huaweiCloudMaasApiKey = message.huaweiCloudMaasApiKey;
    }
    if (message.basetenApiKey !== undefined) {
      obj.basetenApiKey = message.basetenApiKey;
    }
    if (message.ollamaApiKey !== undefined) {
      obj.ollamaApiKey = message.ollamaApiKey;
    }
    if (message.zaiApiKey !== undefined) {
      obj.zaiApiKey = message.zaiApiKey;
    }
    if (message.zaiApiLine !== undefined) {
      obj.zaiApiLine = message.zaiApiLine;
    }
    if (message.lmStudioMaxTokens !== undefined) {
      obj.lmStudioMaxTokens = message.lmStudioMaxTokens;
    }
    if (message.planModeApiProvider !== undefined) {
      obj.planModeApiProvider = apiProviderToJSON(message.planModeApiProvider);
    }
    if (message.planModeApiModelId !== undefined) {
      obj.planModeApiModelId = message.planModeApiModelId;
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      obj.planModeThinkingBudgetTokens = Math.round(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      obj.planModeReasoningEffort = message.planModeReasoningEffort;
    }
    if (message.planModeVsCodeLmModelSelector !== undefined) {
      obj.planModeVsCodeLmModelSelector = LanguageModelChatSelector.toJSON(message.planModeVsCodeLmModelSelector);
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      obj.planModeAwsBedrockCustomSelected = message.planModeAwsBedrockCustomSelected;
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.planModeAwsBedrockCustomModelBaseId = message.planModeAwsBedrockCustomModelBaseId;
    }
    if (message.planModeOpenRouterModelId !== undefined) {
      obj.planModeOpenRouterModelId = message.planModeOpenRouterModelId;
    }
    if (message.planModeOpenRouterModelInfo !== undefined) {
      obj.planModeOpenRouterModelInfo = OpenRouterModelInfo.toJSON(message.planModeOpenRouterModelInfo);
    }
    if (message.planModeOpenAiModelId !== undefined) {
      obj.planModeOpenAiModelId = message.planModeOpenAiModelId;
    }
    if (message.planModeOpenAiModelInfo !== undefined) {
      obj.planModeOpenAiModelInfo = OpenAiCompatibleModelInfo.toJSON(message.planModeOpenAiModelInfo);
    }
    if (message.planModeOllamaModelId !== undefined) {
      obj.planModeOllamaModelId = message.planModeOllamaModelId;
    }
    if (message.planModeLmStudioModelId !== undefined) {
      obj.planModeLmStudioModelId = message.planModeLmStudioModelId;
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      obj.planModeLiteLlmModelId = message.planModeLiteLlmModelId;
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      obj.planModeLiteLlmModelInfo = LiteLLMModelInfo.toJSON(message.planModeLiteLlmModelInfo);
    }
    if (message.planModeRequestyModelId !== undefined) {
      obj.planModeRequestyModelId = message.planModeRequestyModelId;
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      obj.planModeRequestyModelInfo = OpenRouterModelInfo.toJSON(message.planModeRequestyModelInfo);
    }
    if (message.planModeTogetherModelId !== undefined) {
      obj.planModeTogetherModelId = message.planModeTogetherModelId;
    }
    if (message.planModeFireworksModelId !== undefined) {
      obj.planModeFireworksModelId = message.planModeFireworksModelId;
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      obj.planModeSapAiCoreModelId = message.planModeSapAiCoreModelId;
    }
    if (message.planModeGroqModelId !== undefined) {
      obj.planModeGroqModelId = message.planModeGroqModelId;
    }
    if (message.planModeGroqModelInfo !== undefined) {
      obj.planModeGroqModelInfo = OpenRouterModelInfo.toJSON(message.planModeGroqModelInfo);
    }
    if (message.planModeHuggingFaceModelId !== undefined) {
      obj.planModeHuggingFaceModelId = message.planModeHuggingFaceModelId;
    }
    if (message.planModeHuggingFaceModelInfo !== undefined) {
      obj.planModeHuggingFaceModelInfo = OpenRouterModelInfo.toJSON(message.planModeHuggingFaceModelInfo);
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      obj.planModeHuaweiCloudMaasModelId = message.planModeHuaweiCloudMaasModelId;
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.planModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.toJSON(message.planModeHuaweiCloudMaasModelInfo);
    }
    if (message.planModeBasetenModelId !== undefined) {
      obj.planModeBasetenModelId = message.planModeBasetenModelId;
    }
    if (message.planModeBasetenModelInfo !== undefined) {
      obj.planModeBasetenModelInfo = OpenRouterModelInfo.toJSON(message.planModeBasetenModelInfo);
    }
    if (message.actModeApiProvider !== undefined) {
      obj.actModeApiProvider = apiProviderToJSON(message.actModeApiProvider);
    }
    if (message.actModeApiModelId !== undefined) {
      obj.actModeApiModelId = message.actModeApiModelId;
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      obj.actModeThinkingBudgetTokens = Math.round(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      obj.actModeReasoningEffort = message.actModeReasoningEffort;
    }
    if (message.actModeVsCodeLmModelSelector !== undefined) {
      obj.actModeVsCodeLmModelSelector = LanguageModelChatSelector.toJSON(message.actModeVsCodeLmModelSelector);
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      obj.actModeAwsBedrockCustomSelected = message.actModeAwsBedrockCustomSelected;
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.actModeAwsBedrockCustomModelBaseId = message.actModeAwsBedrockCustomModelBaseId;
    }
    if (message.actModeOpenRouterModelId !== undefined) {
      obj.actModeOpenRouterModelId = message.actModeOpenRouterModelId;
    }
    if (message.actModeOpenRouterModelInfo !== undefined) {
      obj.actModeOpenRouterModelInfo = OpenRouterModelInfo.toJSON(message.actModeOpenRouterModelInfo);
    }
    if (message.actModeOpenAiModelId !== undefined) {
      obj.actModeOpenAiModelId = message.actModeOpenAiModelId;
    }
    if (message.actModeOpenAiModelInfo !== undefined) {
      obj.actModeOpenAiModelInfo = OpenAiCompatibleModelInfo.toJSON(message.actModeOpenAiModelInfo);
    }
    if (message.actModeOllamaModelId !== undefined) {
      obj.actModeOllamaModelId = message.actModeOllamaModelId;
    }
    if (message.actModeLmStudioModelId !== undefined) {
      obj.actModeLmStudioModelId = message.actModeLmStudioModelId;
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      obj.actModeLiteLlmModelId = message.actModeLiteLlmModelId;
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      obj.actModeLiteLlmModelInfo = LiteLLMModelInfo.toJSON(message.actModeLiteLlmModelInfo);
    }
    if (message.actModeRequestyModelId !== undefined) {
      obj.actModeRequestyModelId = message.actModeRequestyModelId;
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      obj.actModeRequestyModelInfo = OpenRouterModelInfo.toJSON(message.actModeRequestyModelInfo);
    }
    if (message.actModeTogetherModelId !== undefined) {
      obj.actModeTogetherModelId = message.actModeTogetherModelId;
    }
    if (message.actModeFireworksModelId !== undefined) {
      obj.actModeFireworksModelId = message.actModeFireworksModelId;
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      obj.actModeSapAiCoreModelId = message.actModeSapAiCoreModelId;
    }
    if (message.actModeGroqModelId !== undefined) {
      obj.actModeGroqModelId = message.actModeGroqModelId;
    }
    if (message.actModeGroqModelInfo !== undefined) {
      obj.actModeGroqModelInfo = OpenRouterModelInfo.toJSON(message.actModeGroqModelInfo);
    }
    if (message.actModeHuggingFaceModelId !== undefined) {
      obj.actModeHuggingFaceModelId = message.actModeHuggingFaceModelId;
    }
    if (message.actModeHuggingFaceModelInfo !== undefined) {
      obj.actModeHuggingFaceModelInfo = OpenRouterModelInfo.toJSON(message.actModeHuggingFaceModelInfo);
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      obj.actModeHuaweiCloudMaasModelId = message.actModeHuaweiCloudMaasModelId;
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.actModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.toJSON(message.actModeHuaweiCloudMaasModelInfo);
    }
    if (message.actModeBasetenModelId !== undefined) {
      obj.actModeBasetenModelId = message.actModeBasetenModelId;
    }
    if (message.actModeBasetenModelInfo !== undefined) {
      obj.actModeBasetenModelInfo = OpenRouterModelInfo.toJSON(message.actModeBasetenModelInfo);
    }
    if (message.favoritedModelIds?.length) {
      obj.favoritedModelIds = message.favoritedModelIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModelsApiConfiguration>, I>>(base?: I): ModelsApiConfiguration {
    return ModelsApiConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModelsApiConfiguration>, I>>(object: I): ModelsApiConfiguration {
    const message = createBaseModelsApiConfiguration();
    message.apiKey = object.apiKey ?? undefined;
    message.clineApiKey = object.clineApiKey ?? undefined;
    message.ulid = object.ulid ?? undefined;
    message.liteLlmBaseUrl = object.liteLlmBaseUrl ?? undefined;
    message.liteLlmApiKey = object.liteLlmApiKey ?? undefined;
    message.liteLlmUsePromptCache = object.liteLlmUsePromptCache ?? undefined;
    message.openAiHeaders = Object.entries(object.openAiHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.anthropicBaseUrl = object.anthropicBaseUrl ?? undefined;
    message.openRouterApiKey = object.openRouterApiKey ?? undefined;
    message.openRouterProviderSorting = object.openRouterProviderSorting ?? undefined;
    message.awsAccessKey = object.awsAccessKey ?? undefined;
    message.awsSecretKey = object.awsSecretKey ?? undefined;
    message.awsSessionToken = object.awsSessionToken ?? undefined;
    message.awsRegion = object.awsRegion ?? undefined;
    message.awsUseCrossRegionInference = object.awsUseCrossRegionInference ?? undefined;
    message.awsBedrockUsePromptCache = object.awsBedrockUsePromptCache ?? undefined;
    message.awsUseProfile = object.awsUseProfile ?? undefined;
    message.awsProfile = object.awsProfile ?? undefined;
    message.awsBedrockEndpoint = object.awsBedrockEndpoint ?? undefined;
    message.claudeCodePath = object.claudeCodePath ?? undefined;
    message.vertexProjectId = object.vertexProjectId ?? undefined;
    message.vertexRegion = object.vertexRegion ?? undefined;
    message.openAiBaseUrl = object.openAiBaseUrl ?? undefined;
    message.openAiApiKey = object.openAiApiKey ?? undefined;
    message.ollamaBaseUrl = object.ollamaBaseUrl ?? undefined;
    message.ollamaApiOptionsCtxNum = object.ollamaApiOptionsCtxNum ?? undefined;
    message.lmStudioBaseUrl = object.lmStudioBaseUrl ?? undefined;
    message.geminiApiKey = object.geminiApiKey ?? undefined;
    message.geminiBaseUrl = object.geminiBaseUrl ?? undefined;
    message.openAiNativeApiKey = object.openAiNativeApiKey ?? undefined;
    message.deepSeekApiKey = object.deepSeekApiKey ?? undefined;
    message.requestyApiKey = object.requestyApiKey ?? undefined;
    message.requestyBaseUrl = object.requestyBaseUrl ?? undefined;
    message.togetherApiKey = object.togetherApiKey ?? undefined;
    message.fireworksApiKey = object.fireworksApiKey ?? undefined;
    message.fireworksModelMaxCompletionTokens = object.fireworksModelMaxCompletionTokens ?? undefined;
    message.fireworksModelMaxTokens = object.fireworksModelMaxTokens ?? undefined;
    message.qwenApiKey = object.qwenApiKey ?? undefined;
    message.doubaoApiKey = object.doubaoApiKey ?? undefined;
    message.mistralApiKey = object.mistralApiKey ?? undefined;
    message.azureApiVersion = object.azureApiVersion ?? undefined;
    message.qwenApiLine = object.qwenApiLine ?? undefined;
    message.nebiusApiKey = object.nebiusApiKey ?? undefined;
    message.asksageApiUrl = object.asksageApiUrl ?? undefined;
    message.asksageApiKey = object.asksageApiKey ?? undefined;
    message.xaiApiKey = object.xaiApiKey ?? undefined;
    message.sambanovaApiKey = object.sambanovaApiKey ?? undefined;
    message.cerebrasApiKey = object.cerebrasApiKey ?? undefined;
    message.requestTimeoutMs = object.requestTimeoutMs ?? undefined;
    message.sapAiCoreClientId = object.sapAiCoreClientId ?? undefined;
    message.sapAiCoreClientSecret = object.sapAiCoreClientSecret ?? undefined;
    message.sapAiResourceGroup = object.sapAiResourceGroup ?? undefined;
    message.sapAiCoreTokenUrl = object.sapAiCoreTokenUrl ?? undefined;
    message.sapAiCoreBaseUrl = object.sapAiCoreBaseUrl ?? undefined;
    message.moonshotApiKey = object.moonshotApiKey ?? undefined;
    message.moonshotApiLine = object.moonshotApiLine ?? undefined;
    message.awsAuthentication = object.awsAuthentication ?? undefined;
    message.awsBedrockApiKey = object.awsBedrockApiKey ?? undefined;
    message.clineAccountId = object.clineAccountId ?? undefined;
    message.groqApiKey = object.groqApiKey ?? undefined;
    message.huggingFaceApiKey = object.huggingFaceApiKey ?? undefined;
    message.huaweiCloudMaasApiKey = object.huaweiCloudMaasApiKey ?? undefined;
    message.basetenApiKey = object.basetenApiKey ?? undefined;
    message.ollamaApiKey = object.ollamaApiKey ?? undefined;
    message.zaiApiKey = object.zaiApiKey ?? undefined;
    message.zaiApiLine = object.zaiApiLine ?? undefined;
    message.lmStudioMaxTokens = object.lmStudioMaxTokens ?? undefined;
    message.planModeApiProvider = object.planModeApiProvider ?? undefined;
    message.planModeApiModelId = object.planModeApiModelId ?? undefined;
    message.planModeThinkingBudgetTokens = object.planModeThinkingBudgetTokens ?? undefined;
    message.planModeReasoningEffort = object.planModeReasoningEffort ?? undefined;
    message.planModeVsCodeLmModelSelector =
      (object.planModeVsCodeLmModelSelector !== undefined && object.planModeVsCodeLmModelSelector !== null)
        ? LanguageModelChatSelector.fromPartial(object.planModeVsCodeLmModelSelector)
        : undefined;
    message.planModeAwsBedrockCustomSelected = object.planModeAwsBedrockCustomSelected ?? undefined;
    message.planModeAwsBedrockCustomModelBaseId = object.planModeAwsBedrockCustomModelBaseId ?? undefined;
    message.planModeOpenRouterModelId = object.planModeOpenRouterModelId ?? undefined;
    message.planModeOpenRouterModelInfo =
      (object.planModeOpenRouterModelInfo !== undefined && object.planModeOpenRouterModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeOpenRouterModelInfo)
        : undefined;
    message.planModeOpenAiModelId = object.planModeOpenAiModelId ?? undefined;
    message.planModeOpenAiModelInfo =
      (object.planModeOpenAiModelInfo !== undefined && object.planModeOpenAiModelInfo !== null)
        ? OpenAiCompatibleModelInfo.fromPartial(object.planModeOpenAiModelInfo)
        : undefined;
    message.planModeOllamaModelId = object.planModeOllamaModelId ?? undefined;
    message.planModeLmStudioModelId = object.planModeLmStudioModelId ?? undefined;
    message.planModeLiteLlmModelId = object.planModeLiteLlmModelId ?? undefined;
    message.planModeLiteLlmModelInfo =
      (object.planModeLiteLlmModelInfo !== undefined && object.planModeLiteLlmModelInfo !== null)
        ? LiteLLMModelInfo.fromPartial(object.planModeLiteLlmModelInfo)
        : undefined;
    message.planModeRequestyModelId = object.planModeRequestyModelId ?? undefined;
    message.planModeRequestyModelInfo =
      (object.planModeRequestyModelInfo !== undefined && object.planModeRequestyModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeRequestyModelInfo)
        : undefined;
    message.planModeTogetherModelId = object.planModeTogetherModelId ?? undefined;
    message.planModeFireworksModelId = object.planModeFireworksModelId ?? undefined;
    message.planModeSapAiCoreModelId = object.planModeSapAiCoreModelId ?? undefined;
    message.planModeGroqModelId = object.planModeGroqModelId ?? undefined;
    message.planModeGroqModelInfo =
      (object.planModeGroqModelInfo !== undefined && object.planModeGroqModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeGroqModelInfo)
        : undefined;
    message.planModeHuggingFaceModelId = object.planModeHuggingFaceModelId ?? undefined;
    message.planModeHuggingFaceModelInfo =
      (object.planModeHuggingFaceModelInfo !== undefined && object.planModeHuggingFaceModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeHuggingFaceModelInfo)
        : undefined;
    message.planModeHuaweiCloudMaasModelId = object.planModeHuaweiCloudMaasModelId ?? undefined;
    message.planModeHuaweiCloudMaasModelInfo =
      (object.planModeHuaweiCloudMaasModelInfo !== undefined && object.planModeHuaweiCloudMaasModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeHuaweiCloudMaasModelInfo)
        : undefined;
    message.planModeBasetenModelId = object.planModeBasetenModelId ?? undefined;
    message.planModeBasetenModelInfo =
      (object.planModeBasetenModelInfo !== undefined && object.planModeBasetenModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeBasetenModelInfo)
        : undefined;
    message.actModeApiProvider = object.actModeApiProvider ?? undefined;
    message.actModeApiModelId = object.actModeApiModelId ?? undefined;
    message.actModeThinkingBudgetTokens = object.actModeThinkingBudgetTokens ?? undefined;
    message.actModeReasoningEffort = object.actModeReasoningEffort ?? undefined;
    message.actModeVsCodeLmModelSelector =
      (object.actModeVsCodeLmModelSelector !== undefined && object.actModeVsCodeLmModelSelector !== null)
        ? LanguageModelChatSelector.fromPartial(object.actModeVsCodeLmModelSelector)
        : undefined;
    message.actModeAwsBedrockCustomSelected = object.actModeAwsBedrockCustomSelected ?? undefined;
    message.actModeAwsBedrockCustomModelBaseId = object.actModeAwsBedrockCustomModelBaseId ?? undefined;
    message.actModeOpenRouterModelId = object.actModeOpenRouterModelId ?? undefined;
    message.actModeOpenRouterModelInfo =
      (object.actModeOpenRouterModelInfo !== undefined && object.actModeOpenRouterModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeOpenRouterModelInfo)
        : undefined;
    message.actModeOpenAiModelId = object.actModeOpenAiModelId ?? undefined;
    message.actModeOpenAiModelInfo =
      (object.actModeOpenAiModelInfo !== undefined && object.actModeOpenAiModelInfo !== null)
        ? OpenAiCompatibleModelInfo.fromPartial(object.actModeOpenAiModelInfo)
        : undefined;
    message.actModeOllamaModelId = object.actModeOllamaModelId ?? undefined;
    message.actModeLmStudioModelId = object.actModeLmStudioModelId ?? undefined;
    message.actModeLiteLlmModelId = object.actModeLiteLlmModelId ?? undefined;
    message.actModeLiteLlmModelInfo =
      (object.actModeLiteLlmModelInfo !== undefined && object.actModeLiteLlmModelInfo !== null)
        ? LiteLLMModelInfo.fromPartial(object.actModeLiteLlmModelInfo)
        : undefined;
    message.actModeRequestyModelId = object.actModeRequestyModelId ?? undefined;
    message.actModeRequestyModelInfo =
      (object.actModeRequestyModelInfo !== undefined && object.actModeRequestyModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeRequestyModelInfo)
        : undefined;
    message.actModeTogetherModelId = object.actModeTogetherModelId ?? undefined;
    message.actModeFireworksModelId = object.actModeFireworksModelId ?? undefined;
    message.actModeSapAiCoreModelId = object.actModeSapAiCoreModelId ?? undefined;
    message.actModeGroqModelId = object.actModeGroqModelId ?? undefined;
    message.actModeGroqModelInfo = (object.actModeGroqModelInfo !== undefined && object.actModeGroqModelInfo !== null)
      ? OpenRouterModelInfo.fromPartial(object.actModeGroqModelInfo)
      : undefined;
    message.actModeHuggingFaceModelId = object.actModeHuggingFaceModelId ?? undefined;
    message.actModeHuggingFaceModelInfo =
      (object.actModeHuggingFaceModelInfo !== undefined && object.actModeHuggingFaceModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeHuggingFaceModelInfo)
        : undefined;
    message.actModeHuaweiCloudMaasModelId = object.actModeHuaweiCloudMaasModelId ?? undefined;
    message.actModeHuaweiCloudMaasModelInfo =
      (object.actModeHuaweiCloudMaasModelInfo !== undefined && object.actModeHuaweiCloudMaasModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeHuaweiCloudMaasModelInfo)
        : undefined;
    message.actModeBasetenModelId = object.actModeBasetenModelId ?? undefined;
    message.actModeBasetenModelInfo =
      (object.actModeBasetenModelInfo !== undefined && object.actModeBasetenModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeBasetenModelInfo)
        : undefined;
    message.favoritedModelIds = object.favoritedModelIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseModelsApiConfiguration_OpenAiHeadersEntry(): ModelsApiConfiguration_OpenAiHeadersEntry {
  return { key: "", value: "" };
}

export const ModelsApiConfiguration_OpenAiHeadersEntry: MessageFns<ModelsApiConfiguration_OpenAiHeadersEntry> = {
  encode(message: ModelsApiConfiguration_OpenAiHeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModelsApiConfiguration_OpenAiHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModelsApiConfiguration_OpenAiHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModelsApiConfiguration_OpenAiHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ModelsApiConfiguration_OpenAiHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModelsApiConfiguration_OpenAiHeadersEntry>, I>>(
    base?: I,
  ): ModelsApiConfiguration_OpenAiHeadersEntry {
    return ModelsApiConfiguration_OpenAiHeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModelsApiConfiguration_OpenAiHeadersEntry>, I>>(
    object: I,
  ): ModelsApiConfiguration_OpenAiHeadersEntry {
    const message = createBaseModelsApiConfiguration_OpenAiHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

/** Service for model-related operations */
export type ModelsServiceDefinition = typeof ModelsServiceDefinition;
export const ModelsServiceDefinition = {
  name: "ModelsService",
  fullName: "cline.ModelsService",
  methods: {
    /** Fetches available models from Ollama */
    getOllamaModels: {
      name: "getOllamaModels",
      requestType: StringRequest,
      requestStream: false,
      responseType: StringArray,
      responseStream: false,
      options: {},
    },
    /** Fetches available models from LM Studio */
    getLmStudioModels: {
      name: "getLmStudioModels",
      requestType: StringRequest,
      requestStream: false,
      responseType: StringArray,
      responseStream: false,
      options: {},
    },
    /** Fetches available models from VS Code LM API */
    getVsCodeLmModels: {
      name: "getVsCodeLmModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: VsCodeLmModelsArray,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns OpenRouter models */
    refreshOpenRouterModels: {
      name: "refreshOpenRouterModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns Hugging Face models */
    refreshHuggingFaceModels: {
      name: "refreshHuggingFaceModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns OpenAI models */
    refreshOpenAiModels: {
      name: "refreshOpenAiModels",
      requestType: OpenAiModelsRequest,
      requestStream: false,
      responseType: StringArray,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns Requesty models */
    refreshRequestyModels: {
      name: "refreshRequestyModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: false,
      options: {},
    },
    /** Subscribe to OpenRouter models updates */
    subscribeToOpenRouterModels: {
      name: "subscribeToOpenRouterModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: true,
      options: {},
    },
    /** Updates API configuration */
    updateApiConfigurationProto: {
      name: "updateApiConfigurationProto",
      requestType: UpdateApiConfigurationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns Groq models */
    refreshGroqModels: {
      name: "refreshGroqModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: false,
      options: {},
    },
    /** Refreshes and returns Baseten models */
    refreshBasetenModels: {
      name: "refreshBasetenModels",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OpenRouterCompatibleModelInfo,
      responseStream: false,
      options: {},
    },
  },
} as const;

/** Service for model-related operations */
export type ModelsServiceService = typeof ModelsServiceService;
export const ModelsServiceService = {
  /** Fetches available models from Ollama */
  getOllamaModels: {
    path: "/cline.ModelsService/getOllamaModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest): Buffer => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StringRequest => StringRequest.decode(value),
    responseSerialize: (value: StringArray): Buffer => Buffer.from(StringArray.encode(value).finish()),
    responseDeserialize: (value: Buffer): StringArray => StringArray.decode(value),
  },
  /** Fetches available models from LM Studio */
  getLmStudioModels: {
    path: "/cline.ModelsService/getLmStudioModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest): Buffer => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StringRequest => StringRequest.decode(value),
    responseSerialize: (value: StringArray): Buffer => Buffer.from(StringArray.encode(value).finish()),
    responseDeserialize: (value: Buffer): StringArray => StringArray.decode(value),
  },
  /** Fetches available models from VS Code LM API */
  getVsCodeLmModels: {
    path: "/cline.ModelsService/getVsCodeLmModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: VsCodeLmModelsArray): Buffer => Buffer.from(VsCodeLmModelsArray.encode(value).finish()),
    responseDeserialize: (value: Buffer): VsCodeLmModelsArray => VsCodeLmModelsArray.decode(value),
  },
  /** Refreshes and returns OpenRouter models */
  refreshOpenRouterModels: {
    path: "/cline.ModelsService/refreshOpenRouterModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
  /** Refreshes and returns Hugging Face models */
  refreshHuggingFaceModels: {
    path: "/cline.ModelsService/refreshHuggingFaceModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
  /** Refreshes and returns OpenAI models */
  refreshOpenAiModels: {
    path: "/cline.ModelsService/refreshOpenAiModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OpenAiModelsRequest): Buffer => Buffer.from(OpenAiModelsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): OpenAiModelsRequest => OpenAiModelsRequest.decode(value),
    responseSerialize: (value: StringArray): Buffer => Buffer.from(StringArray.encode(value).finish()),
    responseDeserialize: (value: Buffer): StringArray => StringArray.decode(value),
  },
  /** Refreshes and returns Requesty models */
  refreshRequestyModels: {
    path: "/cline.ModelsService/refreshRequestyModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
  /** Subscribe to OpenRouter models updates */
  subscribeToOpenRouterModels: {
    path: "/cline.ModelsService/subscribeToOpenRouterModels",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
  /** Updates API configuration */
  updateApiConfigurationProto: {
    path: "/cline.ModelsService/updateApiConfigurationProto",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateApiConfigurationRequest): Buffer =>
      Buffer.from(UpdateApiConfigurationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateApiConfigurationRequest => UpdateApiConfigurationRequest.decode(value),
    responseSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer): Empty => Empty.decode(value),
  },
  /** Refreshes and returns Groq models */
  refreshGroqModels: {
    path: "/cline.ModelsService/refreshGroqModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
  /** Refreshes and returns Baseten models */
  refreshBasetenModels: {
    path: "/cline.ModelsService/refreshBasetenModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: OpenRouterCompatibleModelInfo): Buffer =>
      Buffer.from(OpenRouterCompatibleModelInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer): OpenRouterCompatibleModelInfo => OpenRouterCompatibleModelInfo.decode(value),
  },
} as const;

export interface ModelsServiceServer extends UntypedServiceImplementation {
  /** Fetches available models from Ollama */
  getOllamaModels: handleUnaryCall<StringRequest, StringArray>;
  /** Fetches available models from LM Studio */
  getLmStudioModels: handleUnaryCall<StringRequest, StringArray>;
  /** Fetches available models from VS Code LM API */
  getVsCodeLmModels: handleUnaryCall<EmptyRequest, VsCodeLmModelsArray>;
  /** Refreshes and returns OpenRouter models */
  refreshOpenRouterModels: handleUnaryCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
  /** Refreshes and returns Hugging Face models */
  refreshHuggingFaceModels: handleUnaryCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
  /** Refreshes and returns OpenAI models */
  refreshOpenAiModels: handleUnaryCall<OpenAiModelsRequest, StringArray>;
  /** Refreshes and returns Requesty models */
  refreshRequestyModels: handleUnaryCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
  /** Subscribe to OpenRouter models updates */
  subscribeToOpenRouterModels: handleServerStreamingCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
  /** Updates API configuration */
  updateApiConfigurationProto: handleUnaryCall<UpdateApiConfigurationRequest, Empty>;
  /** Refreshes and returns Groq models */
  refreshGroqModels: handleUnaryCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
  /** Refreshes and returns Baseten models */
  refreshBasetenModels: handleUnaryCall<EmptyRequest, OpenRouterCompatibleModelInfo>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
