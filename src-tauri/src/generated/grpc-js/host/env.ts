// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: host/env.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { Empty, EmptyRequest, String, StringRequest } from "../cline/common";

export interface GetHostVersionResponse {
  /** The name of the host platform, e.g VSCode */
  platform?:
    | string
    | undefined;
  /** The version of the host platform, e.g. 1.103.0 */
  version?: string | undefined;
}

function createBaseGetHostVersionResponse(): GetHostVersionResponse {
  return { platform: undefined, version: undefined };
}

export const GetHostVersionResponse: MessageFns<GetHostVersionResponse> = {
  encode(message: GetHostVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platform !== undefined) {
      writer.uint32(10).string(message.platform);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHostVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHostVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHostVersionResponse {
    return {
      platform: isSet(object.platform) ? globalThis.String(object.platform) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
    };
  },

  toJSON(message: GetHostVersionResponse): unknown {
    const obj: any = {};
    if (message.platform !== undefined) {
      obj.platform = message.platform;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHostVersionResponse>, I>>(base?: I): GetHostVersionResponse {
    return GetHostVersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHostVersionResponse>, I>>(object: I): GetHostVersionResponse {
    const message = createBaseGetHostVersionResponse();
    message.platform = object.platform ?? undefined;
    message.version = object.version ?? undefined;
    return message;
  },
};

/** Provides methods for working with the user's environment. */
export type EnvServiceDefinition = typeof EnvServiceDefinition;
export const EnvServiceDefinition = {
  name: "EnvService",
  fullName: "host.EnvService",
  methods: {
    /** Writes text to the system clipboard. */
    clipboardWriteText: {
      name: "clipboardWriteText",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Reads text from the system clipboard. */
    clipboardReadText: {
      name: "clipboardReadText",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    /** Returns a stable machine identifier for telemetry distinctId purposes. */
    getMachineId: {
      name: "getMachineId",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    getHostVersion: {
      name: "getHostVersion",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: GetHostVersionResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

/** Provides methods for working with the user's environment. */
export type EnvServiceService = typeof EnvServiceService;
export const EnvServiceService = {
  /** Writes text to the system clipboard. */
  clipboardWriteText: {
    path: "/host.EnvService/clipboardWriteText",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest): Buffer => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StringRequest => StringRequest.decode(value),
    responseSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer): Empty => Empty.decode(value),
  },
  /** Reads text from the system clipboard. */
  clipboardReadText: {
    path: "/host.EnvService/clipboardReadText",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: String): Buffer => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer): String => String.decode(value),
  },
  /** Returns a stable machine identifier for telemetry distinctId purposes. */
  getMachineId: {
    path: "/host.EnvService/getMachineId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: String): Buffer => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer): String => String.decode(value),
  },
  getHostVersion: {
    path: "/host.EnvService/getHostVersion",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest): Buffer => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmptyRequest => EmptyRequest.decode(value),
    responseSerialize: (value: GetHostVersionResponse): Buffer =>
      Buffer.from(GetHostVersionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetHostVersionResponse => GetHostVersionResponse.decode(value),
  },
} as const;

export interface EnvServiceServer extends UntypedServiceImplementation {
  /** Writes text to the system clipboard. */
  clipboardWriteText: handleUnaryCall<StringRequest, Empty>;
  /** Reads text from the system clipboard. */
  clipboardReadText: handleUnaryCall<EmptyRequest, String>;
  /** Returns a stable machine identifier for telemetry distinctId purposes. */
  getMachineId: handleUnaryCall<EmptyRequest, String>;
  getHostVersion: handleUnaryCall<EmptyRequest, GetHostVersionResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
