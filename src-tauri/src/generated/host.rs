// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenDiffRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    /// The absolute path of the document being edited.
    #[prost(string, optional, tag = "2")]
    pub path: ::core::option::Option<::prost::alloc::string::String>,
    /// The new content for the file.
    #[prost(string, optional, tag = "3")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenDiffResponse {
    /// A unique identifier for the diff view that was opened.
    #[prost(string, optional, tag = "1")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDocumentTextRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, optional, tag = "2")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDocumentTextResponse {
    #[prost(string, optional, tag = "1")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceTextRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, optional, tag = "2")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub start_line: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub end_line: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceTextResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScrollDiffRequest {
    #[prost(string, optional, tag = "1")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub line: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScrollDiffResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TruncateDocumentRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, optional, tag = "2")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub end_line: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TruncateDocumentResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseAllDiffsRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseAllDiffsResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveDocumentRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, optional, tag = "2")]
    pub diff_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveDocumentResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenMultiFileDiffRequest {
    #[prost(string, optional, tag = "1")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub diffs: ::prost::alloc::vec::Vec<ContentDiff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentDiff {
    /// The absolute file path.
    #[prost(string, optional, tag = "1")]
    pub file_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub left_content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub right_content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenMultiFileDiffResponse {}
/// Generated server implementations.
pub mod diff_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DiffServiceServer.
    #[async_trait]
    pub trait DiffService: std::marker::Send + std::marker::Sync + 'static {
        /// Open the diff view/editor.
        async fn open_diff(
            &self,
            request: tonic::Request<super::OpenDiffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenDiffResponse>,
            tonic::Status,
        >;
        /// Get the contents of the diff view.
        async fn get_document_text(
            &self,
            request: tonic::Request<super::GetDocumentTextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDocumentTextResponse>,
            tonic::Status,
        >;
        /// Replace a text selection in the diff.
        async fn replace_text(
            &self,
            request: tonic::Request<super::ReplaceTextRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplaceTextResponse>,
            tonic::Status,
        >;
        async fn scroll_diff(
            &self,
            request: tonic::Request<super::ScrollDiffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ScrollDiffResponse>,
            tonic::Status,
        >;
        /// Truncate the diff document.
        async fn truncate_document(
            &self,
            request: tonic::Request<super::TruncateDocumentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TruncateDocumentResponse>,
            tonic::Status,
        >;
        /// Save the diff document.
        async fn save_document(
            &self,
            request: tonic::Request<super::SaveDocumentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveDocumentResponse>,
            tonic::Status,
        >;
        /// Close all the diff editor windows/tabs.
        /// Any diff editors with unsaved content should not be closed.
        async fn close_all_diffs(
            &self,
            request: tonic::Request<super::CloseAllDiffsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CloseAllDiffsResponse>,
            tonic::Status,
        >;
        /// Display a diff view comparing before/after states for multiple files.
        /// Content is passed as in-memory data, not read from the file system.
        async fn open_multi_file_diff(
            &self,
            request: tonic::Request<super::OpenMultiFileDiffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenMultiFileDiffResponse>,
            tonic::Status,
        >;
    }
    /// Provides methods for diff views.
    #[derive(Debug)]
    pub struct DiffServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DiffServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DiffServiceServer<T>
    where
        T: DiffService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.DiffService/openDiff" => {
                    #[allow(non_camel_case_types)]
                    struct openDiffSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::OpenDiffRequest>
                    for openDiffSvc<T> {
                        type Response = super::OpenDiffResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenDiffRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::open_diff(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = openDiffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/getDocumentText" => {
                    #[allow(non_camel_case_types)]
                    struct getDocumentTextSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::GetDocumentTextRequest>
                    for getDocumentTextSvc<T> {
                        type Response = super::GetDocumentTextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDocumentTextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::get_document_text(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getDocumentTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/replaceText" => {
                    #[allow(non_camel_case_types)]
                    struct replaceTextSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::ReplaceTextRequest>
                    for replaceTextSvc<T> {
                        type Response = super::ReplaceTextResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReplaceTextRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::replace_text(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = replaceTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/scrollDiff" => {
                    #[allow(non_camel_case_types)]
                    struct scrollDiffSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::ScrollDiffRequest>
                    for scrollDiffSvc<T> {
                        type Response = super::ScrollDiffResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScrollDiffRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::scroll_diff(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = scrollDiffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/truncateDocument" => {
                    #[allow(non_camel_case_types)]
                    struct truncateDocumentSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::TruncateDocumentRequest>
                    for truncateDocumentSvc<T> {
                        type Response = super::TruncateDocumentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TruncateDocumentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::truncate_document(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = truncateDocumentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/saveDocument" => {
                    #[allow(non_camel_case_types)]
                    struct saveDocumentSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::SaveDocumentRequest>
                    for saveDocumentSvc<T> {
                        type Response = super::SaveDocumentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SaveDocumentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::save_document(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = saveDocumentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/closeAllDiffs" => {
                    #[allow(non_camel_case_types)]
                    struct closeAllDiffsSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::CloseAllDiffsRequest>
                    for closeAllDiffsSvc<T> {
                        type Response = super::CloseAllDiffsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CloseAllDiffsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::close_all_diffs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = closeAllDiffsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.DiffService/openMultiFileDiff" => {
                    #[allow(non_camel_case_types)]
                    struct openMultiFileDiffSvc<T: DiffService>(pub Arc<T>);
                    impl<
                        T: DiffService,
                    > tonic::server::UnaryService<super::OpenMultiFileDiffRequest>
                    for openMultiFileDiffSvc<T> {
                        type Response = super::OpenMultiFileDiffResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenMultiFileDiffRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiffService>::open_multi_file_diff(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = openMultiFileDiffSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DiffServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.DiffService";
    impl<T> tonic::server::NamedService for DiffServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHostVersionResponse {
    /// The name of the host platform, e.g VSCode
    #[prost(string, optional, tag = "1")]
    pub platform: ::core::option::Option<::prost::alloc::string::String>,
    /// The version of the host platform, e.g. 1.103.0
    #[prost(string, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
}
/// Generated server implementations.
pub mod env_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with EnvServiceServer.
    #[async_trait]
    pub trait EnvService: std::marker::Send + std::marker::Sync + 'static {
        /// Writes text to the system clipboard.
        async fn clipboard_write_text(
            &self,
            request: tonic::Request<super::super::cline::StringRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::cline::Empty>,
            tonic::Status,
        >;
        /// Reads text from the system clipboard.
        async fn clipboard_read_text(
            &self,
            request: tonic::Request<super::super::cline::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::cline::String>,
            tonic::Status,
        >;
        /// Returns a stable machine identifier for telemetry distinctId purposes.
        async fn get_machine_id(
            &self,
            request: tonic::Request<super::super::cline::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::cline::String>,
            tonic::Status,
        >;
        async fn get_host_version(
            &self,
            request: tonic::Request<super::super::cline::EmptyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetHostVersionResponse>,
            tonic::Status,
        >;
    }
    /// Provides methods for working with the user's environment.
    #[derive(Debug)]
    pub struct EnvServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> EnvServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for EnvServiceServer<T>
    where
        T: EnvService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.EnvService/clipboardWriteText" => {
                    #[allow(non_camel_case_types)]
                    struct clipboardWriteTextSvc<T: EnvService>(pub Arc<T>);
                    impl<
                        T: EnvService,
                    > tonic::server::UnaryService<super::super::cline::StringRequest>
                    for clipboardWriteTextSvc<T> {
                        type Response = super::super::cline::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::cline::StringRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EnvService>::clipboard_write_text(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = clipboardWriteTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.EnvService/clipboardReadText" => {
                    #[allow(non_camel_case_types)]
                    struct clipboardReadTextSvc<T: EnvService>(pub Arc<T>);
                    impl<
                        T: EnvService,
                    > tonic::server::UnaryService<super::super::cline::EmptyRequest>
                    for clipboardReadTextSvc<T> {
                        type Response = super::super::cline::String;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::cline::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EnvService>::clipboard_read_text(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = clipboardReadTextSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.EnvService/getMachineId" => {
                    #[allow(non_camel_case_types)]
                    struct getMachineIdSvc<T: EnvService>(pub Arc<T>);
                    impl<
                        T: EnvService,
                    > tonic::server::UnaryService<super::super::cline::EmptyRequest>
                    for getMachineIdSvc<T> {
                        type Response = super::super::cline::String;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::cline::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EnvService>::get_machine_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getMachineIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.EnvService/getHostVersion" => {
                    #[allow(non_camel_case_types)]
                    struct getHostVersionSvc<T: EnvService>(pub Arc<T>);
                    impl<
                        T: EnvService,
                    > tonic::server::UnaryService<super::super::cline::EmptyRequest>
                    for getHostVersionSvc<T> {
                        type Response = super::GetHostVersionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::super::cline::EmptyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EnvService>::get_host_version(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getHostVersionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for EnvServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.EnvService";
    impl<T> tonic::server::NamedService for EnvServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWebviewHtmlRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWebviewHtmlResponse {
    #[prost(string, optional, tag = "1")]
    pub html: ::core::option::Option<::prost::alloc::string::String>,
}
/// Generated server implementations.
pub mod testing_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TestingServiceServer.
    #[async_trait]
    pub trait TestingService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_webview_html(
            &self,
            request: tonic::Request<super::GetWebviewHtmlRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetWebviewHtmlResponse>,
            tonic::Status,
        >;
    }
    /// This is for use in integration tests to get the contents of the webview.
    #[derive(Debug)]
    pub struct TestingServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TestingServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TestingServiceServer<T>
    where
        T: TestingService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.TestingService/getWebviewHtml" => {
                    #[allow(non_camel_case_types)]
                    struct getWebviewHtmlSvc<T: TestingService>(pub Arc<T>);
                    impl<
                        T: TestingService,
                    > tonic::server::UnaryService<super::GetWebviewHtmlRequest>
                    for getWebviewHtmlSvc<T> {
                        type Response = super::GetWebviewHtmlResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWebviewHtmlRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TestingService>::get_webview_html(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getWebviewHtmlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TestingServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.TestingService";
    impl<T> tonic::server::NamedService for TestingServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Request to subscribe to file changes
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeToFileRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
}
/// Event representing a file change
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileChangeEvent {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(enumeration = "file_change_event::ChangeType", tag = "2")]
    pub r#type: i32,
    /// Optional content of the file after change
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
/// Nested message and enum types in `FileChangeEvent`.
pub mod file_change_event {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ChangeType {
        Created = 0,
        Changed = 1,
        Deleted = 2,
    }
    impl ChangeType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Created => "CREATED",
                Self::Changed => "CHANGED",
                Self::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CREATED" => Some(Self::Created),
                "CHANGED" => Some(Self::Changed),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
}
/// Generated server implementations.
pub mod watch_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with WatchServiceServer.
    #[async_trait]
    pub trait WatchService: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the subscribeToFile method.
        type subscribeToFileStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::FileChangeEvent, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Subscribe to file changes
        async fn subscribe_to_file(
            &self,
            request: tonic::Request<super::SubscribeToFileRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::subscribeToFileStream>,
            tonic::Status,
        >;
    }
    /// WatchService provides methods for watching files in the IDE
    #[derive(Debug)]
    pub struct WatchServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> WatchServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for WatchServiceServer<T>
    where
        T: WatchService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.WatchService/subscribeToFile" => {
                    #[allow(non_camel_case_types)]
                    struct subscribeToFileSvc<T: WatchService>(pub Arc<T>);
                    impl<
                        T: WatchService,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeToFileRequest,
                    > for subscribeToFileSvc<T> {
                        type Response = super::FileChangeEvent;
                        type ResponseStream = T::subscribeToFileStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeToFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WatchService>::subscribe_to_file(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = subscribeToFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for WatchServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.WatchService";
    impl<T> tonic::server::NamedService for WatchServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowTextDocumentRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<ShowTextDocumentOptions>,
}
/// See <https://code.visualstudio.com/api/references/vscode-api#TextDocumentShowOptions>
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShowTextDocumentOptions {
    #[prost(bool, optional, tag = "1")]
    pub preview: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub preserve_focus: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub view_column: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextEditorInfo {
    #[prost(string, tag = "1")]
    pub document_path: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "2")]
    pub view_column: ::core::option::Option<i32>,
    #[prost(bool, tag = "3")]
    pub is_active: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowOpenDialogueRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
    #[prost(bool, optional, tag = "2")]
    pub can_select_many: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub open_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub filters: ::core::option::Option<ShowOpenDialogueFilterOption>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowOpenDialogueFilterOption {
    #[prost(string, repeated, tag = "1")]
    pub files: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectedResources {
    #[prost(string, repeated, tag = "1")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowMessageRequest {
    #[prost(enumeration = "ShowMessageType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<ShowMessageRequestOptions>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowMessageRequestOptions {
    #[prost(string, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub modal: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub detail: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectedResponse {
    #[prost(string, optional, tag = "1")]
    pub selected_option: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowSaveDialogRequest {
    #[prost(message, optional, tag = "1")]
    pub options: ::core::option::Option<ShowSaveDialogOptions>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowSaveDialogOptions {
    #[prost(string, optional, tag = "1")]
    pub default_path: ::core::option::Option<::prost::alloc::string::String>,
    /// A map of file types to extensions, e.g
    /// "Text Files": { "extensions": \["txt", "md"\] }
    #[prost(map = "string, message", tag = "2")]
    pub filters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        FileExtensionList,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileExtensionList {
    /// A list of file extension (without the dot).
    #[prost(string, repeated, tag = "1")]
    pub extensions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowSaveDialogResponse {
    /// If the user cancelled the dialog, this will be empty.
    #[prost(string, optional, tag = "1")]
    pub selected_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowInputBoxRequest {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub prompt: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowInputBoxResponse {
    #[prost(string, optional, tag = "1")]
    pub response: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenFileRequest {
    #[prost(string, tag = "1")]
    pub file_path: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenFileResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetOpenTabsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOpenTabsResponse {
    #[prost(string, repeated, tag = "1")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVisibleTabsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVisibleTabsResponse {
    #[prost(string, repeated, tag = "1")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActiveEditorRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActiveEditorResponse {
    #[prost(string, optional, tag = "1")]
    pub file_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShowMessageType {
    Error = 0,
    Information = 1,
    Warning = 2,
}
impl ShowMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Error => "ERROR",
            Self::Information => "INFORMATION",
            Self::Warning => "WARNING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR" => Some(Self::Error),
            "INFORMATION" => Some(Self::Information),
            "WARNING" => Some(Self::Warning),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod window_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with WindowServiceServer.
    #[async_trait]
    pub trait WindowService: std::marker::Send + std::marker::Sync + 'static {
        /// Opens a text document in the IDE editor and returns editor information.
        async fn show_text_document(
            &self,
            request: tonic::Request<super::ShowTextDocumentRequest>,
        ) -> std::result::Result<tonic::Response<super::TextEditorInfo>, tonic::Status>;
        /// Shows the open file dialogue / file picker.
        async fn show_open_dialogue(
            &self,
            request: tonic::Request<super::ShowOpenDialogueRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SelectedResources>,
            tonic::Status,
        >;
        /// Shows a notification.
        async fn show_message(
            &self,
            request: tonic::Request<super::ShowMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SelectedResponse>,
            tonic::Status,
        >;
        /// Prompts the user for input and returns the response.
        async fn show_input_box(
            &self,
            request: tonic::Request<super::ShowInputBoxRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShowInputBoxResponse>,
            tonic::Status,
        >;
        /// Shows the file save dialogue / file picker.
        async fn show_save_dialog(
            &self,
            request: tonic::Request<super::ShowSaveDialogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShowSaveDialogResponse>,
            tonic::Status,
        >;
        /// Opens a file in the IDE.
        async fn open_file(
            &self,
            request: tonic::Request<super::OpenFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenFileResponse>,
            tonic::Status,
        >;
        /// Returns the open tabs.
        async fn get_open_tabs(
            &self,
            request: tonic::Request<super::GetOpenTabsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetOpenTabsResponse>,
            tonic::Status,
        >;
        /// Returns the visible tabs.
        async fn get_visible_tabs(
            &self,
            request: tonic::Request<super::GetVisibleTabsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVisibleTabsResponse>,
            tonic::Status,
        >;
        /// Returns information about the current editor
        async fn get_active_editor(
            &self,
            request: tonic::Request<super::GetActiveEditorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetActiveEditorResponse>,
            tonic::Status,
        >;
    }
    /// Provides methods for working with IDE windows and editors.
    #[derive(Debug)]
    pub struct WindowServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> WindowServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for WindowServiceServer<T>
    where
        T: WindowService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.WindowService/showTextDocument" => {
                    #[allow(non_camel_case_types)]
                    struct showTextDocumentSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::ShowTextDocumentRequest>
                    for showTextDocumentSvc<T> {
                        type Response = super::TextEditorInfo;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShowTextDocumentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::show_text_document(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = showTextDocumentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/showOpenDialogue" => {
                    #[allow(non_camel_case_types)]
                    struct showOpenDialogueSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::ShowOpenDialogueRequest>
                    for showOpenDialogueSvc<T> {
                        type Response = super::SelectedResources;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShowOpenDialogueRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::show_open_dialogue(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = showOpenDialogueSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/showMessage" => {
                    #[allow(non_camel_case_types)]
                    struct showMessageSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::ShowMessageRequest>
                    for showMessageSvc<T> {
                        type Response = super::SelectedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShowMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::show_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = showMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/showInputBox" => {
                    #[allow(non_camel_case_types)]
                    struct showInputBoxSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::ShowInputBoxRequest>
                    for showInputBoxSvc<T> {
                        type Response = super::ShowInputBoxResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShowInputBoxRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::show_input_box(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = showInputBoxSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/showSaveDialog" => {
                    #[allow(non_camel_case_types)]
                    struct showSaveDialogSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::ShowSaveDialogRequest>
                    for showSaveDialogSvc<T> {
                        type Response = super::ShowSaveDialogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShowSaveDialogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::show_save_dialog(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = showSaveDialogSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/openFile" => {
                    #[allow(non_camel_case_types)]
                    struct openFileSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::OpenFileRequest>
                    for openFileSvc<T> {
                        type Response = super::OpenFileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::open_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = openFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/getOpenTabs" => {
                    #[allow(non_camel_case_types)]
                    struct getOpenTabsSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::GetOpenTabsRequest>
                    for getOpenTabsSvc<T> {
                        type Response = super::GetOpenTabsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetOpenTabsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::get_open_tabs(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getOpenTabsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/getVisibleTabs" => {
                    #[allow(non_camel_case_types)]
                    struct getVisibleTabsSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::GetVisibleTabsRequest>
                    for getVisibleTabsSvc<T> {
                        type Response = super::GetVisibleTabsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetVisibleTabsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::get_visible_tabs(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getVisibleTabsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WindowService/getActiveEditor" => {
                    #[allow(non_camel_case_types)]
                    struct getActiveEditorSvc<T: WindowService>(pub Arc<T>);
                    impl<
                        T: WindowService,
                    > tonic::server::UnaryService<super::GetActiveEditorRequest>
                    for getActiveEditorSvc<T> {
                        type Response = super::GetActiveEditorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetActiveEditorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WindowService>::get_active_editor(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getActiveEditorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for WindowServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.WindowService";
    impl<T> tonic::server::NamedService for WindowServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkspacePathsRequest {
    /// The unique ID for the workspace/project.
    /// This is currently optional in vscode. It is required in other environments where cline is running at
    /// the application level, and the user can open multiple projects.
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkspacePathsResponse {
    /// The unique ID for the workspace/project.
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveOpenDocumentIfDirtyRequest {
    #[prost(string, optional, tag = "2")]
    pub file_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveOpenDocumentIfDirtyResponse {
    /// Returns true if the document was saved.
    #[prost(bool, optional, tag = "1")]
    pub was_saved: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDiagnosticsRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::cline::Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDiagnosticsResponse {
    #[prost(message, repeated, tag = "1")]
    pub file_diagnostics: ::prost::alloc::vec::Vec<super::cline::FileDiagnostics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenProblemsPanelRequest {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OpenProblemsPanelResponse {}
/// Generated server implementations.
pub mod workspace_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with WorkspaceServiceServer.
    #[async_trait]
    pub trait WorkspaceService: std::marker::Send + std::marker::Sync + 'static {
        /// Returns a list of the top level directories of the workspace.
        async fn get_workspace_paths(
            &self,
            request: tonic::Request<super::GetWorkspacePathsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetWorkspacePathsResponse>,
            tonic::Status,
        >;
        /// Saves an open document if it's open in the editor and has unsaved changes.
        /// Returns true if the document was saved, returns false if the document was not found, or did not
        /// need to be saved.
        async fn save_open_document_if_dirty(
            &self,
            request: tonic::Request<super::SaveOpenDocumentIfDirtyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveOpenDocumentIfDirtyResponse>,
            tonic::Status,
        >;
        /// Get diagnostics from the workspace.
        async fn get_diagnostics(
            &self,
            request: tonic::Request<super::GetDiagnosticsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetDiagnosticsResponse>,
            tonic::Status,
        >;
        /// Makes the problems panel/pane visible in the IDE and focuses it.
        async fn open_problems_panel(
            &self,
            request: tonic::Request<super::OpenProblemsPanelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OpenProblemsPanelResponse>,
            tonic::Status,
        >;
    }
    /// Provides methods for working with workspaces/projects.
    #[derive(Debug)]
    pub struct WorkspaceServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> WorkspaceServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for WorkspaceServiceServer<T>
    where
        T: WorkspaceService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/host.WorkspaceService/getWorkspacePaths" => {
                    #[allow(non_camel_case_types)]
                    struct getWorkspacePathsSvc<T: WorkspaceService>(pub Arc<T>);
                    impl<
                        T: WorkspaceService,
                    > tonic::server::UnaryService<super::GetWorkspacePathsRequest>
                    for getWorkspacePathsSvc<T> {
                        type Response = super::GetWorkspacePathsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWorkspacePathsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkspaceService>::get_workspace_paths(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getWorkspacePathsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WorkspaceService/saveOpenDocumentIfDirty" => {
                    #[allow(non_camel_case_types)]
                    struct saveOpenDocumentIfDirtySvc<T: WorkspaceService>(pub Arc<T>);
                    impl<
                        T: WorkspaceService,
                    > tonic::server::UnaryService<super::SaveOpenDocumentIfDirtyRequest>
                    for saveOpenDocumentIfDirtySvc<T> {
                        type Response = super::SaveOpenDocumentIfDirtyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::SaveOpenDocumentIfDirtyRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkspaceService>::save_open_document_if_dirty(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = saveOpenDocumentIfDirtySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WorkspaceService/getDiagnostics" => {
                    #[allow(non_camel_case_types)]
                    struct getDiagnosticsSvc<T: WorkspaceService>(pub Arc<T>);
                    impl<
                        T: WorkspaceService,
                    > tonic::server::UnaryService<super::GetDiagnosticsRequest>
                    for getDiagnosticsSvc<T> {
                        type Response = super::GetDiagnosticsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDiagnosticsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkspaceService>::get_diagnostics(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getDiagnosticsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/host.WorkspaceService/openProblemsPanel" => {
                    #[allow(non_camel_case_types)]
                    struct openProblemsPanelSvc<T: WorkspaceService>(pub Arc<T>);
                    impl<
                        T: WorkspaceService,
                    > tonic::server::UnaryService<super::OpenProblemsPanelRequest>
                    for openProblemsPanelSvc<T> {
                        type Response = super::OpenProblemsPanelResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OpenProblemsPanelRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as WorkspaceService>::open_problems_panel(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = openProblemsPanelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for WorkspaceServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "host.WorkspaceService";
    impl<T> tonic::server::NamedService for WorkspaceServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
