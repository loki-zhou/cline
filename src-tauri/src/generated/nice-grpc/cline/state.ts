// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: cline/state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Boolean, BooleanRequest, Empty, EmptyRequest, Metadata, StringRequest } from "./common";

export enum PlanActMode {
  PLAN = 0,
  ACT = 1,
  UNRECOGNIZED = -1,
}

export function planActModeFromJSON(object: any): PlanActMode {
  switch (object) {
    case 0:
    case "PLAN":
      return PlanActMode.PLAN;
    case 1:
    case "ACT":
      return PlanActMode.ACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanActMode.UNRECOGNIZED;
  }
}

export function planActModeToJSON(object: PlanActMode): string {
  switch (object) {
    case PlanActMode.PLAN:
      return "PLAN";
    case PlanActMode.ACT:
      return "ACT";
    case PlanActMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OpenaiReasoningEffort {
  LOW = 0,
  MEDIUM = 1,
  HIGH = 2,
  UNRECOGNIZED = -1,
}

export function openaiReasoningEffortFromJSON(object: any): OpenaiReasoningEffort {
  switch (object) {
    case 0:
    case "LOW":
      return OpenaiReasoningEffort.LOW;
    case 1:
    case "MEDIUM":
      return OpenaiReasoningEffort.MEDIUM;
    case 2:
    case "HIGH":
      return OpenaiReasoningEffort.HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OpenaiReasoningEffort.UNRECOGNIZED;
  }
}

export function openaiReasoningEffortToJSON(object: OpenaiReasoningEffort): string {
  switch (object) {
    case OpenaiReasoningEffort.LOW:
      return "LOW";
    case OpenaiReasoningEffort.MEDIUM:
      return "MEDIUM";
    case OpenaiReasoningEffort.HIGH:
      return "HIGH";
    case OpenaiReasoningEffort.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum McpDisplayMode {
  RICH = 0,
  PLAIN = 1,
  MARKDOWN = 2,
  UNRECOGNIZED = -1,
}

export function mcpDisplayModeFromJSON(object: any): McpDisplayMode {
  switch (object) {
    case 0:
    case "RICH":
      return McpDisplayMode.RICH;
    case 1:
    case "PLAIN":
      return McpDisplayMode.PLAIN;
    case 2:
    case "MARKDOWN":
      return McpDisplayMode.MARKDOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return McpDisplayMode.UNRECOGNIZED;
  }
}

export function mcpDisplayModeToJSON(object: McpDisplayMode): string {
  switch (object) {
    case McpDisplayMode.RICH:
      return "RICH";
    case McpDisplayMode.PLAIN:
      return "PLAIN";
    case McpDisplayMode.MARKDOWN:
      return "MARKDOWN";
    case McpDisplayMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TelemetrySettingEnum {
  UNSET = 0,
  ENABLED = 1,
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function telemetrySettingEnumFromJSON(object: any): TelemetrySettingEnum {
  switch (object) {
    case 0:
    case "UNSET":
      return TelemetrySettingEnum.UNSET;
    case 1:
    case "ENABLED":
      return TelemetrySettingEnum.ENABLED;
    case 2:
    case "DISABLED":
      return TelemetrySettingEnum.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TelemetrySettingEnum.UNRECOGNIZED;
  }
}

export function telemetrySettingEnumToJSON(object: TelemetrySettingEnum): string {
  switch (object) {
    case TelemetrySettingEnum.UNSET:
      return "UNSET";
    case TelemetrySettingEnum.ENABLED:
      return "ENABLED";
    case TelemetrySettingEnum.DISABLED:
      return "DISABLED";
    case TelemetrySettingEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface State {
  stateJson: string;
}

export interface TerminalProfiles {
  profiles: TerminalProfile[];
}

export interface TerminalProfile {
  id: string;
  name: string;
  path?: string | undefined;
  description?: string | undefined;
}

export interface TerminalProfileUpdateResponse {
  closedCount: number;
  busyTerminalsCount: number;
  hasBusyTerminals: boolean;
}

export interface TogglePlanActModeRequest {
  metadata?: Metadata | undefined;
  mode: PlanActMode;
  chatContent?: ChatContent | undefined;
}

export interface ChatContent {
  message?: string | undefined;
  images: string[];
  files: string[];
}

export interface ResetStateRequest {
  metadata?: Metadata | undefined;
  global?: boolean | undefined;
}

export interface AutoApprovalSettingsRequest {
  metadata?: Metadata | undefined;
  version: number;
  enabled: boolean;
  actions?: AutoApprovalSettingsRequest_Actions | undefined;
  maxRequests: number;
  enableNotifications: boolean;
  favorites: string[];
}

export interface AutoApprovalSettingsRequest_Actions {
  readFiles: boolean;
  readFilesExternally: boolean;
  editFiles: boolean;
  editFilesExternally: boolean;
  executeSafeCommands: boolean;
  executeAllCommands: boolean;
  useBrowser: boolean;
  useMcp: boolean;
}

export interface TelemetrySettingRequest {
  metadata?: Metadata | undefined;
  setting: TelemetrySettingEnum;
}

/** Message for updating settings */
export interface UpdateSettingsRequest {
  metadata?: Metadata | undefined;
  apiConfiguration?: ApiConfiguration | undefined;
  telemetrySetting?: string | undefined;
  planActSeparateModelsSetting?: boolean | undefined;
  enableCheckpointsSetting?: boolean | undefined;
  mcpMarketplaceEnabled?: boolean | undefined;
  shellIntegrationTimeout?: number | undefined;
  terminalReuseEnabled?: boolean | undefined;
  mcpResponsesCollapsed?: boolean | undefined;
  mcpDisplayMode?: McpDisplayMode | undefined;
  terminalOutputLineLimit?: number | undefined;
  mode?: PlanActMode | undefined;
  preferredLanguage?: string | undefined;
  openaiReasoningEffort?: OpenaiReasoningEffort | undefined;
  strictPlanModeEnabled?: boolean | undefined;
  focusChainSettings?: FocusChainSettings | undefined;
}

/** Complete API Configuration message */
export interface ApiConfiguration {
  /** Global configuration fields (not mode-specific) */
  apiKey?: string | undefined;
  clineApiKey?: string | undefined;
  ulid?: string | undefined;
  liteLlmBaseUrl?: string | undefined;
  liteLlmApiKey?: string | undefined;
  liteLlmUsePromptCache?:
    | boolean
    | undefined;
  /** JSON string */
  openaiHeaders?: string | undefined;
  anthropicBaseUrl?: string | undefined;
  openrouterApiKey?: string | undefined;
  openrouterProviderSorting?: string | undefined;
  awsAccessKey?: string | undefined;
  awsSecretKey?: string | undefined;
  awsSessionToken?: string | undefined;
  awsRegion?: string | undefined;
  awsUseCrossRegionInference?: boolean | undefined;
  awsBedrockUsePromptCache?: boolean | undefined;
  awsUseProfile?: boolean | undefined;
  awsProfile?: string | undefined;
  awsBedrockEndpoint?: string | undefined;
  claudeCodePath?: string | undefined;
  vertexProjectId?: string | undefined;
  vertexRegion?: string | undefined;
  openaiBaseUrl?: string | undefined;
  openaiApiKey?: string | undefined;
  ollamaBaseUrl?: string | undefined;
  ollamaApiOptionsCtxNum?: string | undefined;
  lmStudioBaseUrl?: string | undefined;
  geminiApiKey?: string | undefined;
  geminiBaseUrl?: string | undefined;
  openaiNativeApiKey?: string | undefined;
  deepSeekApiKey?: string | undefined;
  requestyApiKey?: string | undefined;
  requestyBaseUrl?: string | undefined;
  togetherApiKey?: string | undefined;
  fireworksApiKey?: string | undefined;
  fireworksModelMaxCompletionTokens?: number | undefined;
  fireworksModelMaxTokens?: number | undefined;
  qwenApiKey?: string | undefined;
  doubaoApiKey?: string | undefined;
  mistralApiKey?: string | undefined;
  azureApiVersion?: string | undefined;
  qwenApiLine?: string | undefined;
  nebiusApiKey?: string | undefined;
  asksageApiUrl?: string | undefined;
  asksageApiKey?: string | undefined;
  xaiApiKey?: string | undefined;
  sambanovaApiKey?: string | undefined;
  cerebrasApiKey?: string | undefined;
  requestTimeoutMs?: number | undefined;
  sapAiCoreClientId?: string | undefined;
  sapAiCoreClientSecret?: string | undefined;
  sapAiResourceGroup?: string | undefined;
  sapAiCoreTokenUrl?: string | undefined;
  sapAiCoreBaseUrl?: string | undefined;
  moonshotApiKey?: string | undefined;
  moonshotApiLine?: string | undefined;
  huaweiCloudMaasApiKey?: string | undefined;
  ollamaApiKey?: string | undefined;
  zaiApiKey?: string | undefined;
  zaiApiLine?: string | undefined;
  lmStudioMaxTokens?:
    | string
    | undefined;
  /** Plan mode configurations */
  planModeApiProvider?: string | undefined;
  planModeApiModelId?: string | undefined;
  planModeThinkingBudgetTokens?: number | undefined;
  planModeReasoningEffort?:
    | string
    | undefined;
  /** JSON string */
  planModeVscodeLmModelSelector?: string | undefined;
  planModeAwsBedrockCustomSelected?: boolean | undefined;
  planModeAwsBedrockCustomModelBaseId?: string | undefined;
  planModeOpenrouterModelId?:
    | string
    | undefined;
  /** JSON string */
  planModeOpenrouterModelInfo?: string | undefined;
  planModeOpenaiModelId?:
    | string
    | undefined;
  /** JSON string */
  planModeOpenaiModelInfo?: string | undefined;
  planModeOllamaModelId?: string | undefined;
  planModeLmStudioModelId?: string | undefined;
  planModeLiteLlmModelId?:
    | string
    | undefined;
  /** JSON string */
  planModeLiteLlmModelInfo?: string | undefined;
  planModeRequestyModelId?:
    | string
    | undefined;
  /** JSON string */
  planModeRequestyModelInfo?: string | undefined;
  planModeTogetherModelId?: string | undefined;
  planModeFireworksModelId?: string | undefined;
  planModeSapAiCoreModelId?: string | undefined;
  planModeHuaweiCloudMaasModelId?: string | undefined;
  planModeHuaweiCloudMaasModelInfo?:
    | string
    | undefined;
  /** Act mode configurations */
  actModeApiProvider?: string | undefined;
  actModeApiModelId?: string | undefined;
  actModeThinkingBudgetTokens?: number | undefined;
  actModeReasoningEffort?:
    | string
    | undefined;
  /** JSON string */
  actModeVscodeLmModelSelector?: string | undefined;
  actModeAwsBedrockCustomSelected?: boolean | undefined;
  actModeAwsBedrockCustomModelBaseId?: string | undefined;
  actModeOpenrouterModelId?:
    | string
    | undefined;
  /** JSON string */
  actModeOpenrouterModelInfo?: string | undefined;
  actModeOpenaiModelId?:
    | string
    | undefined;
  /** JSON string */
  actModeOpenaiModelInfo?: string | undefined;
  actModeOllamaModelId?: string | undefined;
  actModeLmStudioModelId?: string | undefined;
  actModeLiteLlmModelId?:
    | string
    | undefined;
  /** JSON string */
  actModeLiteLlmModelInfo?: string | undefined;
  actModeRequestyModelId?:
    | string
    | undefined;
  /** JSON string */
  actModeRequestyModelInfo?: string | undefined;
  actModeTogetherModelId?: string | undefined;
  actModeFireworksModelId?: string | undefined;
  actModeSapAiCoreModelId?: string | undefined;
  actModeHuaweiCloudMaasModelId?: string | undefined;
  actModeHuaweiCloudMaasModelInfo?:
    | string
    | undefined;
  /** Favorited model IDs */
  favoritedModelIds: string[];
  /** Extension fields for Bedrock Api Keys */
  awsAuthentication?: string | undefined;
  awsBedrockApiKey?: string | undefined;
  clineAccountId?: string | undefined;
}

export interface UpdateTerminalConnectionTimeoutRequest {
  timeoutMs?: number | undefined;
}

export interface FocusChainSettings {
  enabled: boolean;
  remindClineInterval: number;
}

export interface UpdateTerminalConnectionTimeoutResponse {
  timeoutMs?: number | undefined;
}

function createBaseState(): State {
  return { stateJson: "" };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stateJson !== "") {
      writer.uint32(10).string(message.stateJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stateJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State {
    return { stateJson: isSet(object.stateJson) ? globalThis.String(object.stateJson) : "" };
  },

  toJSON(message: State): unknown {
    const obj: any = {};
    if (message.stateJson !== "") {
      obj.stateJson = message.stateJson;
    }
    return obj;
  },

  create(base?: DeepPartial<State>): State {
    return State.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<State>): State {
    const message = createBaseState();
    message.stateJson = object.stateJson ?? "";
    return message;
  },
};

function createBaseTerminalProfiles(): TerminalProfiles {
  return { profiles: [] };
}

export const TerminalProfiles: MessageFns<TerminalProfiles> = {
  encode(message: TerminalProfiles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      TerminalProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfiles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfiles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(TerminalProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfiles {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => TerminalProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TerminalProfiles): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => TerminalProfile.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TerminalProfiles>): TerminalProfiles {
    return TerminalProfiles.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerminalProfiles>): TerminalProfiles {
    const message = createBaseTerminalProfiles();
    message.profiles = object.profiles?.map((e) => TerminalProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTerminalProfile(): TerminalProfile {
  return { id: "", name: "", path: undefined, description: undefined };
}

export const TerminalProfile: MessageFns<TerminalProfile> = {
  encode(message: TerminalProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.path !== undefined) {
      writer.uint32(26).string(message.path);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfile {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: TerminalProfile): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<TerminalProfile>): TerminalProfile {
    return TerminalProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerminalProfile>): TerminalProfile {
    const message = createBaseTerminalProfile();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.path = object.path ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseTerminalProfileUpdateResponse(): TerminalProfileUpdateResponse {
  return { closedCount: 0, busyTerminalsCount: 0, hasBusyTerminals: false };
}

export const TerminalProfileUpdateResponse: MessageFns<TerminalProfileUpdateResponse> = {
  encode(message: TerminalProfileUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closedCount !== 0) {
      writer.uint32(8).int32(message.closedCount);
    }
    if (message.busyTerminalsCount !== 0) {
      writer.uint32(16).int32(message.busyTerminalsCount);
    }
    if (message.hasBusyTerminals !== false) {
      writer.uint32(24).bool(message.hasBusyTerminals);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfileUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfileUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closedCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.busyTerminalsCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasBusyTerminals = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfileUpdateResponse {
    return {
      closedCount: isSet(object.closedCount) ? globalThis.Number(object.closedCount) : 0,
      busyTerminalsCount: isSet(object.busyTerminalsCount) ? globalThis.Number(object.busyTerminalsCount) : 0,
      hasBusyTerminals: isSet(object.hasBusyTerminals) ? globalThis.Boolean(object.hasBusyTerminals) : false,
    };
  },

  toJSON(message: TerminalProfileUpdateResponse): unknown {
    const obj: any = {};
    if (message.closedCount !== 0) {
      obj.closedCount = Math.round(message.closedCount);
    }
    if (message.busyTerminalsCount !== 0) {
      obj.busyTerminalsCount = Math.round(message.busyTerminalsCount);
    }
    if (message.hasBusyTerminals !== false) {
      obj.hasBusyTerminals = message.hasBusyTerminals;
    }
    return obj;
  },

  create(base?: DeepPartial<TerminalProfileUpdateResponse>): TerminalProfileUpdateResponse {
    return TerminalProfileUpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TerminalProfileUpdateResponse>): TerminalProfileUpdateResponse {
    const message = createBaseTerminalProfileUpdateResponse();
    message.closedCount = object.closedCount ?? 0;
    message.busyTerminalsCount = object.busyTerminalsCount ?? 0;
    message.hasBusyTerminals = object.hasBusyTerminals ?? false;
    return message;
  },
};

function createBaseTogglePlanActModeRequest(): TogglePlanActModeRequest {
  return { metadata: undefined, mode: 0, chatContent: undefined };
}

export const TogglePlanActModeRequest: MessageFns<TogglePlanActModeRequest> = {
  encode(message: TogglePlanActModeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.mode !== 0) {
      writer.uint32(16).int32(message.mode);
    }
    if (message.chatContent !== undefined) {
      ChatContent.encode(message.chatContent, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TogglePlanActModeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTogglePlanActModeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatContent = ChatContent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TogglePlanActModeRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      mode: isSet(object.mode) ? planActModeFromJSON(object.mode) : 0,
      chatContent: isSet(object.chatContent) ? ChatContent.fromJSON(object.chatContent) : undefined,
    };
  },

  toJSON(message: TogglePlanActModeRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.mode !== 0) {
      obj.mode = planActModeToJSON(message.mode);
    }
    if (message.chatContent !== undefined) {
      obj.chatContent = ChatContent.toJSON(message.chatContent);
    }
    return obj;
  },

  create(base?: DeepPartial<TogglePlanActModeRequest>): TogglePlanActModeRequest {
    return TogglePlanActModeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TogglePlanActModeRequest>): TogglePlanActModeRequest {
    const message = createBaseTogglePlanActModeRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.mode = object.mode ?? 0;
    message.chatContent = (object.chatContent !== undefined && object.chatContent !== null)
      ? ChatContent.fromPartial(object.chatContent)
      : undefined;
    return message;
  },
};

function createBaseChatContent(): ChatContent {
  return { message: undefined, images: [], files: [] };
}

export const ChatContent: MessageFns<ChatContent> = {
  encode(message: ChatContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      writer.uint32(10).string(message.message);
    }
    for (const v of message.images) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.files) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.images.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.files.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatContent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.String(e)) : [],
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ChatContent): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.images?.length) {
      obj.images = message.images;
    }
    if (message.files?.length) {
      obj.files = message.files;
    }
    return obj;
  },

  create(base?: DeepPartial<ChatContent>): ChatContent {
    return ChatContent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatContent>): ChatContent {
    const message = createBaseChatContent();
    message.message = object.message ?? undefined;
    message.images = object.images?.map((e) => e) || [];
    message.files = object.files?.map((e) => e) || [];
    return message;
  },
};

function createBaseResetStateRequest(): ResetStateRequest {
  return { metadata: undefined, global: undefined };
}

export const ResetStateRequest: MessageFns<ResetStateRequest> = {
  encode(message: ResetStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.global !== undefined) {
      writer.uint32(16).bool(message.global);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.global = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetStateRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      global: isSet(object.global) ? globalThis.Boolean(object.global) : undefined,
    };
  },

  toJSON(message: ResetStateRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.global !== undefined) {
      obj.global = message.global;
    }
    return obj;
  },

  create(base?: DeepPartial<ResetStateRequest>): ResetStateRequest {
    return ResetStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetStateRequest>): ResetStateRequest {
    const message = createBaseResetStateRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.global = object.global ?? undefined;
    return message;
  },
};

function createBaseAutoApprovalSettingsRequest(): AutoApprovalSettingsRequest {
  return {
    metadata: undefined,
    version: 0,
    enabled: false,
    actions: undefined,
    maxRequests: 0,
    enableNotifications: false,
    favorites: [],
  };
}

export const AutoApprovalSettingsRequest: MessageFns<AutoApprovalSettingsRequest> = {
  encode(message: AutoApprovalSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.enabled !== false) {
      writer.uint32(24).bool(message.enabled);
    }
    if (message.actions !== undefined) {
      AutoApprovalSettingsRequest_Actions.encode(message.actions, writer.uint32(34).fork()).join();
    }
    if (message.maxRequests !== 0) {
      writer.uint32(40).int32(message.maxRequests);
    }
    if (message.enableNotifications !== false) {
      writer.uint32(48).bool(message.enableNotifications);
    }
    for (const v of message.favorites) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoApprovalSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoApprovalSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.actions = AutoApprovalSettingsRequest_Actions.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxRequests = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enableNotifications = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.favorites.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoApprovalSettingsRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      actions: isSet(object.actions) ? AutoApprovalSettingsRequest_Actions.fromJSON(object.actions) : undefined,
      maxRequests: isSet(object.maxRequests) ? globalThis.Number(object.maxRequests) : 0,
      enableNotifications: isSet(object.enableNotifications) ? globalThis.Boolean(object.enableNotifications) : false,
      favorites: globalThis.Array.isArray(object?.favorites)
        ? object.favorites.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AutoApprovalSettingsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.actions !== undefined) {
      obj.actions = AutoApprovalSettingsRequest_Actions.toJSON(message.actions);
    }
    if (message.maxRequests !== 0) {
      obj.maxRequests = Math.round(message.maxRequests);
    }
    if (message.enableNotifications !== false) {
      obj.enableNotifications = message.enableNotifications;
    }
    if (message.favorites?.length) {
      obj.favorites = message.favorites;
    }
    return obj;
  },

  create(base?: DeepPartial<AutoApprovalSettingsRequest>): AutoApprovalSettingsRequest {
    return AutoApprovalSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoApprovalSettingsRequest>): AutoApprovalSettingsRequest {
    const message = createBaseAutoApprovalSettingsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.version = object.version ?? 0;
    message.enabled = object.enabled ?? false;
    message.actions = (object.actions !== undefined && object.actions !== null)
      ? AutoApprovalSettingsRequest_Actions.fromPartial(object.actions)
      : undefined;
    message.maxRequests = object.maxRequests ?? 0;
    message.enableNotifications = object.enableNotifications ?? false;
    message.favorites = object.favorites?.map((e) => e) || [];
    return message;
  },
};

function createBaseAutoApprovalSettingsRequest_Actions(): AutoApprovalSettingsRequest_Actions {
  return {
    readFiles: false,
    readFilesExternally: false,
    editFiles: false,
    editFilesExternally: false,
    executeSafeCommands: false,
    executeAllCommands: false,
    useBrowser: false,
    useMcp: false,
  };
}

export const AutoApprovalSettingsRequest_Actions: MessageFns<AutoApprovalSettingsRequest_Actions> = {
  encode(message: AutoApprovalSettingsRequest_Actions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.readFiles !== false) {
      writer.uint32(8).bool(message.readFiles);
    }
    if (message.readFilesExternally !== false) {
      writer.uint32(16).bool(message.readFilesExternally);
    }
    if (message.editFiles !== false) {
      writer.uint32(24).bool(message.editFiles);
    }
    if (message.editFilesExternally !== false) {
      writer.uint32(32).bool(message.editFilesExternally);
    }
    if (message.executeSafeCommands !== false) {
      writer.uint32(40).bool(message.executeSafeCommands);
    }
    if (message.executeAllCommands !== false) {
      writer.uint32(48).bool(message.executeAllCommands);
    }
    if (message.useBrowser !== false) {
      writer.uint32(56).bool(message.useBrowser);
    }
    if (message.useMcp !== false) {
      writer.uint32(64).bool(message.useMcp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoApprovalSettingsRequest_Actions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoApprovalSettingsRequest_Actions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.readFiles = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.readFilesExternally = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.editFiles = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.editFilesExternally = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.executeSafeCommands = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.executeAllCommands = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.useBrowser = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.useMcp = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoApprovalSettingsRequest_Actions {
    return {
      readFiles: isSet(object.readFiles) ? globalThis.Boolean(object.readFiles) : false,
      readFilesExternally: isSet(object.readFilesExternally) ? globalThis.Boolean(object.readFilesExternally) : false,
      editFiles: isSet(object.editFiles) ? globalThis.Boolean(object.editFiles) : false,
      editFilesExternally: isSet(object.editFilesExternally) ? globalThis.Boolean(object.editFilesExternally) : false,
      executeSafeCommands: isSet(object.executeSafeCommands) ? globalThis.Boolean(object.executeSafeCommands) : false,
      executeAllCommands: isSet(object.executeAllCommands) ? globalThis.Boolean(object.executeAllCommands) : false,
      useBrowser: isSet(object.useBrowser) ? globalThis.Boolean(object.useBrowser) : false,
      useMcp: isSet(object.useMcp) ? globalThis.Boolean(object.useMcp) : false,
    };
  },

  toJSON(message: AutoApprovalSettingsRequest_Actions): unknown {
    const obj: any = {};
    if (message.readFiles !== false) {
      obj.readFiles = message.readFiles;
    }
    if (message.readFilesExternally !== false) {
      obj.readFilesExternally = message.readFilesExternally;
    }
    if (message.editFiles !== false) {
      obj.editFiles = message.editFiles;
    }
    if (message.editFilesExternally !== false) {
      obj.editFilesExternally = message.editFilesExternally;
    }
    if (message.executeSafeCommands !== false) {
      obj.executeSafeCommands = message.executeSafeCommands;
    }
    if (message.executeAllCommands !== false) {
      obj.executeAllCommands = message.executeAllCommands;
    }
    if (message.useBrowser !== false) {
      obj.useBrowser = message.useBrowser;
    }
    if (message.useMcp !== false) {
      obj.useMcp = message.useMcp;
    }
    return obj;
  },

  create(base?: DeepPartial<AutoApprovalSettingsRequest_Actions>): AutoApprovalSettingsRequest_Actions {
    return AutoApprovalSettingsRequest_Actions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoApprovalSettingsRequest_Actions>): AutoApprovalSettingsRequest_Actions {
    const message = createBaseAutoApprovalSettingsRequest_Actions();
    message.readFiles = object.readFiles ?? false;
    message.readFilesExternally = object.readFilesExternally ?? false;
    message.editFiles = object.editFiles ?? false;
    message.editFilesExternally = object.editFilesExternally ?? false;
    message.executeSafeCommands = object.executeSafeCommands ?? false;
    message.executeAllCommands = object.executeAllCommands ?? false;
    message.useBrowser = object.useBrowser ?? false;
    message.useMcp = object.useMcp ?? false;
    return message;
  },
};

function createBaseTelemetrySettingRequest(): TelemetrySettingRequest {
  return { metadata: undefined, setting: 0 };
}

export const TelemetrySettingRequest: MessageFns<TelemetrySettingRequest> = {
  encode(message: TelemetrySettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.setting !== 0) {
      writer.uint32(16).int32(message.setting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelemetrySettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelemetrySettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.setting = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelemetrySettingRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      setting: isSet(object.setting) ? telemetrySettingEnumFromJSON(object.setting) : 0,
    };
  },

  toJSON(message: TelemetrySettingRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.setting !== 0) {
      obj.setting = telemetrySettingEnumToJSON(message.setting);
    }
    return obj;
  },

  create(base?: DeepPartial<TelemetrySettingRequest>): TelemetrySettingRequest {
    return TelemetrySettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TelemetrySettingRequest>): TelemetrySettingRequest {
    const message = createBaseTelemetrySettingRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.setting = object.setting ?? 0;
    return message;
  },
};

function createBaseUpdateSettingsRequest(): UpdateSettingsRequest {
  return {
    metadata: undefined,
    apiConfiguration: undefined,
    telemetrySetting: undefined,
    planActSeparateModelsSetting: undefined,
    enableCheckpointsSetting: undefined,
    mcpMarketplaceEnabled: undefined,
    shellIntegrationTimeout: undefined,
    terminalReuseEnabled: undefined,
    mcpResponsesCollapsed: undefined,
    mcpDisplayMode: undefined,
    terminalOutputLineLimit: undefined,
    mode: undefined,
    preferredLanguage: undefined,
    openaiReasoningEffort: undefined,
    strictPlanModeEnabled: undefined,
    focusChainSettings: undefined,
  };
}

export const UpdateSettingsRequest: MessageFns<UpdateSettingsRequest> = {
  encode(message: UpdateSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.apiConfiguration !== undefined) {
      ApiConfiguration.encode(message.apiConfiguration, writer.uint32(18).fork()).join();
    }
    if (message.telemetrySetting !== undefined) {
      writer.uint32(26).string(message.telemetrySetting);
    }
    if (message.planActSeparateModelsSetting !== undefined) {
      writer.uint32(32).bool(message.planActSeparateModelsSetting);
    }
    if (message.enableCheckpointsSetting !== undefined) {
      writer.uint32(40).bool(message.enableCheckpointsSetting);
    }
    if (message.mcpMarketplaceEnabled !== undefined) {
      writer.uint32(48).bool(message.mcpMarketplaceEnabled);
    }
    if (message.shellIntegrationTimeout !== undefined) {
      writer.uint32(64).int32(message.shellIntegrationTimeout);
    }
    if (message.terminalReuseEnabled !== undefined) {
      writer.uint32(72).bool(message.terminalReuseEnabled);
    }
    if (message.mcpResponsesCollapsed !== undefined) {
      writer.uint32(80).bool(message.mcpResponsesCollapsed);
    }
    if (message.mcpDisplayMode !== undefined) {
      writer.uint32(88).int32(message.mcpDisplayMode);
    }
    if (message.terminalOutputLineLimit !== undefined) {
      writer.uint32(96).int32(message.terminalOutputLineLimit);
    }
    if (message.mode !== undefined) {
      writer.uint32(104).int32(message.mode);
    }
    if (message.preferredLanguage !== undefined) {
      writer.uint32(114).string(message.preferredLanguage);
    }
    if (message.openaiReasoningEffort !== undefined) {
      writer.uint32(120).int32(message.openaiReasoningEffort);
    }
    if (message.strictPlanModeEnabled !== undefined) {
      writer.uint32(128).bool(message.strictPlanModeEnabled);
    }
    if (message.focusChainSettings !== undefined) {
      FocusChainSettings.encode(message.focusChainSettings, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiConfiguration = ApiConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.telemetrySetting = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.planActSeparateModelsSetting = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableCheckpointsSetting = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.mcpMarketplaceEnabled = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.shellIntegrationTimeout = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.terminalReuseEnabled = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mcpResponsesCollapsed = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mcpDisplayMode = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.terminalOutputLineLimit = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.openaiReasoningEffort = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.strictPlanModeEnabled = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.focusChainSettings = FocusChainSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      apiConfiguration: isSet(object.apiConfiguration) ? ApiConfiguration.fromJSON(object.apiConfiguration) : undefined,
      telemetrySetting: isSet(object.telemetrySetting) ? globalThis.String(object.telemetrySetting) : undefined,
      planActSeparateModelsSetting: isSet(object.planActSeparateModelsSetting)
        ? globalThis.Boolean(object.planActSeparateModelsSetting)
        : undefined,
      enableCheckpointsSetting: isSet(object.enableCheckpointsSetting)
        ? globalThis.Boolean(object.enableCheckpointsSetting)
        : undefined,
      mcpMarketplaceEnabled: isSet(object.mcpMarketplaceEnabled)
        ? globalThis.Boolean(object.mcpMarketplaceEnabled)
        : undefined,
      shellIntegrationTimeout: isSet(object.shellIntegrationTimeout)
        ? globalThis.Number(object.shellIntegrationTimeout)
        : undefined,
      terminalReuseEnabled: isSet(object.terminalReuseEnabled)
        ? globalThis.Boolean(object.terminalReuseEnabled)
        : undefined,
      mcpResponsesCollapsed: isSet(object.mcpResponsesCollapsed)
        ? globalThis.Boolean(object.mcpResponsesCollapsed)
        : undefined,
      mcpDisplayMode: isSet(object.mcpDisplayMode) ? mcpDisplayModeFromJSON(object.mcpDisplayMode) : undefined,
      terminalOutputLineLimit: isSet(object.terminalOutputLineLimit)
        ? globalThis.Number(object.terminalOutputLineLimit)
        : undefined,
      mode: isSet(object.mode) ? planActModeFromJSON(object.mode) : undefined,
      preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : undefined,
      openaiReasoningEffort: isSet(object.openaiReasoningEffort)
        ? openaiReasoningEffortFromJSON(object.openaiReasoningEffort)
        : undefined,
      strictPlanModeEnabled: isSet(object.strictPlanModeEnabled)
        ? globalThis.Boolean(object.strictPlanModeEnabled)
        : undefined,
      focusChainSettings: isSet(object.focusChainSettings)
        ? FocusChainSettings.fromJSON(object.focusChainSettings)
        : undefined,
    };
  },

  toJSON(message: UpdateSettingsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.apiConfiguration !== undefined) {
      obj.apiConfiguration = ApiConfiguration.toJSON(message.apiConfiguration);
    }
    if (message.telemetrySetting !== undefined) {
      obj.telemetrySetting = message.telemetrySetting;
    }
    if (message.planActSeparateModelsSetting !== undefined) {
      obj.planActSeparateModelsSetting = message.planActSeparateModelsSetting;
    }
    if (message.enableCheckpointsSetting !== undefined) {
      obj.enableCheckpointsSetting = message.enableCheckpointsSetting;
    }
    if (message.mcpMarketplaceEnabled !== undefined) {
      obj.mcpMarketplaceEnabled = message.mcpMarketplaceEnabled;
    }
    if (message.shellIntegrationTimeout !== undefined) {
      obj.shellIntegrationTimeout = Math.round(message.shellIntegrationTimeout);
    }
    if (message.terminalReuseEnabled !== undefined) {
      obj.terminalReuseEnabled = message.terminalReuseEnabled;
    }
    if (message.mcpResponsesCollapsed !== undefined) {
      obj.mcpResponsesCollapsed = message.mcpResponsesCollapsed;
    }
    if (message.mcpDisplayMode !== undefined) {
      obj.mcpDisplayMode = mcpDisplayModeToJSON(message.mcpDisplayMode);
    }
    if (message.terminalOutputLineLimit !== undefined) {
      obj.terminalOutputLineLimit = Math.round(message.terminalOutputLineLimit);
    }
    if (message.mode !== undefined) {
      obj.mode = planActModeToJSON(message.mode);
    }
    if (message.preferredLanguage !== undefined) {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.openaiReasoningEffort !== undefined) {
      obj.openaiReasoningEffort = openaiReasoningEffortToJSON(message.openaiReasoningEffort);
    }
    if (message.strictPlanModeEnabled !== undefined) {
      obj.strictPlanModeEnabled = message.strictPlanModeEnabled;
    }
    if (message.focusChainSettings !== undefined) {
      obj.focusChainSettings = FocusChainSettings.toJSON(message.focusChainSettings);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    return UpdateSettingsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSettingsRequest>): UpdateSettingsRequest {
    const message = createBaseUpdateSettingsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.apiConfiguration = (object.apiConfiguration !== undefined && object.apiConfiguration !== null)
      ? ApiConfiguration.fromPartial(object.apiConfiguration)
      : undefined;
    message.telemetrySetting = object.telemetrySetting ?? undefined;
    message.planActSeparateModelsSetting = object.planActSeparateModelsSetting ?? undefined;
    message.enableCheckpointsSetting = object.enableCheckpointsSetting ?? undefined;
    message.mcpMarketplaceEnabled = object.mcpMarketplaceEnabled ?? undefined;
    message.shellIntegrationTimeout = object.shellIntegrationTimeout ?? undefined;
    message.terminalReuseEnabled = object.terminalReuseEnabled ?? undefined;
    message.mcpResponsesCollapsed = object.mcpResponsesCollapsed ?? undefined;
    message.mcpDisplayMode = object.mcpDisplayMode ?? undefined;
    message.terminalOutputLineLimit = object.terminalOutputLineLimit ?? undefined;
    message.mode = object.mode ?? undefined;
    message.preferredLanguage = object.preferredLanguage ?? undefined;
    message.openaiReasoningEffort = object.openaiReasoningEffort ?? undefined;
    message.strictPlanModeEnabled = object.strictPlanModeEnabled ?? undefined;
    message.focusChainSettings = (object.focusChainSettings !== undefined && object.focusChainSettings !== null)
      ? FocusChainSettings.fromPartial(object.focusChainSettings)
      : undefined;
    return message;
  },
};

function createBaseApiConfiguration(): ApiConfiguration {
  return {
    apiKey: undefined,
    clineApiKey: undefined,
    ulid: undefined,
    liteLlmBaseUrl: undefined,
    liteLlmApiKey: undefined,
    liteLlmUsePromptCache: undefined,
    openaiHeaders: undefined,
    anthropicBaseUrl: undefined,
    openrouterApiKey: undefined,
    openrouterProviderSorting: undefined,
    awsAccessKey: undefined,
    awsSecretKey: undefined,
    awsSessionToken: undefined,
    awsRegion: undefined,
    awsUseCrossRegionInference: undefined,
    awsBedrockUsePromptCache: undefined,
    awsUseProfile: undefined,
    awsProfile: undefined,
    awsBedrockEndpoint: undefined,
    claudeCodePath: undefined,
    vertexProjectId: undefined,
    vertexRegion: undefined,
    openaiBaseUrl: undefined,
    openaiApiKey: undefined,
    ollamaBaseUrl: undefined,
    ollamaApiOptionsCtxNum: undefined,
    lmStudioBaseUrl: undefined,
    geminiApiKey: undefined,
    geminiBaseUrl: undefined,
    openaiNativeApiKey: undefined,
    deepSeekApiKey: undefined,
    requestyApiKey: undefined,
    requestyBaseUrl: undefined,
    togetherApiKey: undefined,
    fireworksApiKey: undefined,
    fireworksModelMaxCompletionTokens: undefined,
    fireworksModelMaxTokens: undefined,
    qwenApiKey: undefined,
    doubaoApiKey: undefined,
    mistralApiKey: undefined,
    azureApiVersion: undefined,
    qwenApiLine: undefined,
    nebiusApiKey: undefined,
    asksageApiUrl: undefined,
    asksageApiKey: undefined,
    xaiApiKey: undefined,
    sambanovaApiKey: undefined,
    cerebrasApiKey: undefined,
    requestTimeoutMs: undefined,
    sapAiCoreClientId: undefined,
    sapAiCoreClientSecret: undefined,
    sapAiResourceGroup: undefined,
    sapAiCoreTokenUrl: undefined,
    sapAiCoreBaseUrl: undefined,
    moonshotApiKey: undefined,
    moonshotApiLine: undefined,
    huaweiCloudMaasApiKey: undefined,
    ollamaApiKey: undefined,
    zaiApiKey: undefined,
    zaiApiLine: undefined,
    lmStudioMaxTokens: undefined,
    planModeApiProvider: undefined,
    planModeApiModelId: undefined,
    planModeThinkingBudgetTokens: undefined,
    planModeReasoningEffort: undefined,
    planModeVscodeLmModelSelector: undefined,
    planModeAwsBedrockCustomSelected: undefined,
    planModeAwsBedrockCustomModelBaseId: undefined,
    planModeOpenrouterModelId: undefined,
    planModeOpenrouterModelInfo: undefined,
    planModeOpenaiModelId: undefined,
    planModeOpenaiModelInfo: undefined,
    planModeOllamaModelId: undefined,
    planModeLmStudioModelId: undefined,
    planModeLiteLlmModelId: undefined,
    planModeLiteLlmModelInfo: undefined,
    planModeRequestyModelId: undefined,
    planModeRequestyModelInfo: undefined,
    planModeTogetherModelId: undefined,
    planModeFireworksModelId: undefined,
    planModeSapAiCoreModelId: undefined,
    planModeHuaweiCloudMaasModelId: undefined,
    planModeHuaweiCloudMaasModelInfo: undefined,
    actModeApiProvider: undefined,
    actModeApiModelId: undefined,
    actModeThinkingBudgetTokens: undefined,
    actModeReasoningEffort: undefined,
    actModeVscodeLmModelSelector: undefined,
    actModeAwsBedrockCustomSelected: undefined,
    actModeAwsBedrockCustomModelBaseId: undefined,
    actModeOpenrouterModelId: undefined,
    actModeOpenrouterModelInfo: undefined,
    actModeOpenaiModelId: undefined,
    actModeOpenaiModelInfo: undefined,
    actModeOllamaModelId: undefined,
    actModeLmStudioModelId: undefined,
    actModeLiteLlmModelId: undefined,
    actModeLiteLlmModelInfo: undefined,
    actModeRequestyModelId: undefined,
    actModeRequestyModelInfo: undefined,
    actModeTogetherModelId: undefined,
    actModeFireworksModelId: undefined,
    actModeSapAiCoreModelId: undefined,
    actModeHuaweiCloudMaasModelId: undefined,
    actModeHuaweiCloudMaasModelInfo: undefined,
    favoritedModelIds: [],
    awsAuthentication: undefined,
    awsBedrockApiKey: undefined,
    clineAccountId: undefined,
  };
}

export const ApiConfiguration: MessageFns<ApiConfiguration> = {
  encode(message: ApiConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKey !== undefined) {
      writer.uint32(10).string(message.apiKey);
    }
    if (message.clineApiKey !== undefined) {
      writer.uint32(18).string(message.clineApiKey);
    }
    if (message.ulid !== undefined) {
      writer.uint32(26).string(message.ulid);
    }
    if (message.liteLlmBaseUrl !== undefined) {
      writer.uint32(34).string(message.liteLlmBaseUrl);
    }
    if (message.liteLlmApiKey !== undefined) {
      writer.uint32(42).string(message.liteLlmApiKey);
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      writer.uint32(48).bool(message.liteLlmUsePromptCache);
    }
    if (message.openaiHeaders !== undefined) {
      writer.uint32(58).string(message.openaiHeaders);
    }
    if (message.anthropicBaseUrl !== undefined) {
      writer.uint32(66).string(message.anthropicBaseUrl);
    }
    if (message.openrouterApiKey !== undefined) {
      writer.uint32(74).string(message.openrouterApiKey);
    }
    if (message.openrouterProviderSorting !== undefined) {
      writer.uint32(82).string(message.openrouterProviderSorting);
    }
    if (message.awsAccessKey !== undefined) {
      writer.uint32(90).string(message.awsAccessKey);
    }
    if (message.awsSecretKey !== undefined) {
      writer.uint32(98).string(message.awsSecretKey);
    }
    if (message.awsSessionToken !== undefined) {
      writer.uint32(106).string(message.awsSessionToken);
    }
    if (message.awsRegion !== undefined) {
      writer.uint32(114).string(message.awsRegion);
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      writer.uint32(120).bool(message.awsUseCrossRegionInference);
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      writer.uint32(128).bool(message.awsBedrockUsePromptCache);
    }
    if (message.awsUseProfile !== undefined) {
      writer.uint32(136).bool(message.awsUseProfile);
    }
    if (message.awsProfile !== undefined) {
      writer.uint32(146).string(message.awsProfile);
    }
    if (message.awsBedrockEndpoint !== undefined) {
      writer.uint32(154).string(message.awsBedrockEndpoint);
    }
    if (message.claudeCodePath !== undefined) {
      writer.uint32(162).string(message.claudeCodePath);
    }
    if (message.vertexProjectId !== undefined) {
      writer.uint32(170).string(message.vertexProjectId);
    }
    if (message.vertexRegion !== undefined) {
      writer.uint32(178).string(message.vertexRegion);
    }
    if (message.openaiBaseUrl !== undefined) {
      writer.uint32(186).string(message.openaiBaseUrl);
    }
    if (message.openaiApiKey !== undefined) {
      writer.uint32(194).string(message.openaiApiKey);
    }
    if (message.ollamaBaseUrl !== undefined) {
      writer.uint32(202).string(message.ollamaBaseUrl);
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      writer.uint32(210).string(message.ollamaApiOptionsCtxNum);
    }
    if (message.lmStudioBaseUrl !== undefined) {
      writer.uint32(218).string(message.lmStudioBaseUrl);
    }
    if (message.geminiApiKey !== undefined) {
      writer.uint32(226).string(message.geminiApiKey);
    }
    if (message.geminiBaseUrl !== undefined) {
      writer.uint32(234).string(message.geminiBaseUrl);
    }
    if (message.openaiNativeApiKey !== undefined) {
      writer.uint32(242).string(message.openaiNativeApiKey);
    }
    if (message.deepSeekApiKey !== undefined) {
      writer.uint32(250).string(message.deepSeekApiKey);
    }
    if (message.requestyApiKey !== undefined) {
      writer.uint32(258).string(message.requestyApiKey);
    }
    if (message.requestyBaseUrl !== undefined) {
      writer.uint32(266).string(message.requestyBaseUrl);
    }
    if (message.togetherApiKey !== undefined) {
      writer.uint32(274).string(message.togetherApiKey);
    }
    if (message.fireworksApiKey !== undefined) {
      writer.uint32(282).string(message.fireworksApiKey);
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      writer.uint32(288).int32(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      writer.uint32(296).int32(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      writer.uint32(306).string(message.qwenApiKey);
    }
    if (message.doubaoApiKey !== undefined) {
      writer.uint32(314).string(message.doubaoApiKey);
    }
    if (message.mistralApiKey !== undefined) {
      writer.uint32(322).string(message.mistralApiKey);
    }
    if (message.azureApiVersion !== undefined) {
      writer.uint32(330).string(message.azureApiVersion);
    }
    if (message.qwenApiLine !== undefined) {
      writer.uint32(338).string(message.qwenApiLine);
    }
    if (message.nebiusApiKey !== undefined) {
      writer.uint32(346).string(message.nebiusApiKey);
    }
    if (message.asksageApiUrl !== undefined) {
      writer.uint32(354).string(message.asksageApiUrl);
    }
    if (message.asksageApiKey !== undefined) {
      writer.uint32(362).string(message.asksageApiKey);
    }
    if (message.xaiApiKey !== undefined) {
      writer.uint32(370).string(message.xaiApiKey);
    }
    if (message.sambanovaApiKey !== undefined) {
      writer.uint32(378).string(message.sambanovaApiKey);
    }
    if (message.cerebrasApiKey !== undefined) {
      writer.uint32(386).string(message.cerebrasApiKey);
    }
    if (message.requestTimeoutMs !== undefined) {
      writer.uint32(392).int32(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      writer.uint32(402).string(message.sapAiCoreClientId);
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      writer.uint32(410).string(message.sapAiCoreClientSecret);
    }
    if (message.sapAiResourceGroup !== undefined) {
      writer.uint32(418).string(message.sapAiResourceGroup);
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      writer.uint32(426).string(message.sapAiCoreTokenUrl);
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      writer.uint32(434).string(message.sapAiCoreBaseUrl);
    }
    if (message.moonshotApiKey !== undefined) {
      writer.uint32(442).string(message.moonshotApiKey);
    }
    if (message.moonshotApiLine !== undefined) {
      writer.uint32(450).string(message.moonshotApiLine);
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      writer.uint32(458).string(message.huaweiCloudMaasApiKey);
    }
    if (message.ollamaApiKey !== undefined) {
      writer.uint32(466).string(message.ollamaApiKey);
    }
    if (message.zaiApiKey !== undefined) {
      writer.uint32(474).string(message.zaiApiKey);
    }
    if (message.zaiApiLine !== undefined) {
      writer.uint32(482).string(message.zaiApiLine);
    }
    if (message.lmStudioMaxTokens !== undefined) {
      writer.uint32(490).string(message.lmStudioMaxTokens);
    }
    if (message.planModeApiProvider !== undefined) {
      writer.uint32(802).string(message.planModeApiProvider);
    }
    if (message.planModeApiModelId !== undefined) {
      writer.uint32(810).string(message.planModeApiModelId);
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      writer.uint32(816).int32(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      writer.uint32(826).string(message.planModeReasoningEffort);
    }
    if (message.planModeVscodeLmModelSelector !== undefined) {
      writer.uint32(834).string(message.planModeVscodeLmModelSelector);
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(840).bool(message.planModeAwsBedrockCustomSelected);
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(850).string(message.planModeAwsBedrockCustomModelBaseId);
    }
    if (message.planModeOpenrouterModelId !== undefined) {
      writer.uint32(858).string(message.planModeOpenrouterModelId);
    }
    if (message.planModeOpenrouterModelInfo !== undefined) {
      writer.uint32(866).string(message.planModeOpenrouterModelInfo);
    }
    if (message.planModeOpenaiModelId !== undefined) {
      writer.uint32(874).string(message.planModeOpenaiModelId);
    }
    if (message.planModeOpenaiModelInfo !== undefined) {
      writer.uint32(882).string(message.planModeOpenaiModelInfo);
    }
    if (message.planModeOllamaModelId !== undefined) {
      writer.uint32(890).string(message.planModeOllamaModelId);
    }
    if (message.planModeLmStudioModelId !== undefined) {
      writer.uint32(898).string(message.planModeLmStudioModelId);
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      writer.uint32(906).string(message.planModeLiteLlmModelId);
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      writer.uint32(914).string(message.planModeLiteLlmModelInfo);
    }
    if (message.planModeRequestyModelId !== undefined) {
      writer.uint32(922).string(message.planModeRequestyModelId);
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      writer.uint32(930).string(message.planModeRequestyModelInfo);
    }
    if (message.planModeTogetherModelId !== undefined) {
      writer.uint32(938).string(message.planModeTogetherModelId);
    }
    if (message.planModeFireworksModelId !== undefined) {
      writer.uint32(946).string(message.planModeFireworksModelId);
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      writer.uint32(954).string(message.planModeSapAiCoreModelId);
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(962).string(message.planModeHuaweiCloudMaasModelId);
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      writer.uint32(970).string(message.planModeHuaweiCloudMaasModelInfo);
    }
    if (message.actModeApiProvider !== undefined) {
      writer.uint32(1602).string(message.actModeApiProvider);
    }
    if (message.actModeApiModelId !== undefined) {
      writer.uint32(1610).string(message.actModeApiModelId);
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      writer.uint32(1616).int32(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      writer.uint32(1626).string(message.actModeReasoningEffort);
    }
    if (message.actModeVscodeLmModelSelector !== undefined) {
      writer.uint32(1634).string(message.actModeVscodeLmModelSelector);
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(1640).bool(message.actModeAwsBedrockCustomSelected);
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(1650).string(message.actModeAwsBedrockCustomModelBaseId);
    }
    if (message.actModeOpenrouterModelId !== undefined) {
      writer.uint32(1658).string(message.actModeOpenrouterModelId);
    }
    if (message.actModeOpenrouterModelInfo !== undefined) {
      writer.uint32(1666).string(message.actModeOpenrouterModelInfo);
    }
    if (message.actModeOpenaiModelId !== undefined) {
      writer.uint32(1674).string(message.actModeOpenaiModelId);
    }
    if (message.actModeOpenaiModelInfo !== undefined) {
      writer.uint32(1682).string(message.actModeOpenaiModelInfo);
    }
    if (message.actModeOllamaModelId !== undefined) {
      writer.uint32(1690).string(message.actModeOllamaModelId);
    }
    if (message.actModeLmStudioModelId !== undefined) {
      writer.uint32(1698).string(message.actModeLmStudioModelId);
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      writer.uint32(1706).string(message.actModeLiteLlmModelId);
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      writer.uint32(1714).string(message.actModeLiteLlmModelInfo);
    }
    if (message.actModeRequestyModelId !== undefined) {
      writer.uint32(1722).string(message.actModeRequestyModelId);
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      writer.uint32(1730).string(message.actModeRequestyModelInfo);
    }
    if (message.actModeTogetherModelId !== undefined) {
      writer.uint32(1738).string(message.actModeTogetherModelId);
    }
    if (message.actModeFireworksModelId !== undefined) {
      writer.uint32(1746).string(message.actModeFireworksModelId);
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      writer.uint32(1754).string(message.actModeSapAiCoreModelId);
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(1762).string(message.actModeHuaweiCloudMaasModelId);
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      writer.uint32(1770).string(message.actModeHuaweiCloudMaasModelInfo);
    }
    for (const v of message.favoritedModelIds) {
      writer.uint32(2402).string(v!);
    }
    if (message.awsAuthentication !== undefined) {
      writer.uint32(2410).string(message.awsAuthentication);
    }
    if (message.awsBedrockApiKey !== undefined) {
      writer.uint32(2418).string(message.awsBedrockApiKey);
    }
    if (message.clineAccountId !== undefined) {
      writer.uint32(2426).string(message.clineAccountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clineApiKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ulid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.liteLlmBaseUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.liteLlmApiKey = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.liteLlmUsePromptCache = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.openaiHeaders = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.anthropicBaseUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.openrouterApiKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.openrouterProviderSorting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.awsAccessKey = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.awsSecretKey = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.awsSessionToken = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.awsRegion = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.awsUseCrossRegionInference = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.awsBedrockUsePromptCache = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.awsUseProfile = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.awsProfile = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.awsBedrockEndpoint = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.claudeCodePath = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.vertexProjectId = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.vertexRegion = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.openaiBaseUrl = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.openaiApiKey = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.ollamaBaseUrl = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.ollamaApiOptionsCtxNum = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.lmStudioBaseUrl = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.geminiApiKey = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.geminiBaseUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.openaiNativeApiKey = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.deepSeekApiKey = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.requestyApiKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.requestyBaseUrl = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.togetherApiKey = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.fireworksApiKey = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.fireworksModelMaxCompletionTokens = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.fireworksModelMaxTokens = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.qwenApiKey = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.doubaoApiKey = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.mistralApiKey = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.azureApiVersion = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.qwenApiLine = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.nebiusApiKey = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.asksageApiUrl = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.asksageApiKey = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.xaiApiKey = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.sambanovaApiKey = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.cerebrasApiKey = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.requestTimeoutMs = reader.int32();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.sapAiCoreClientId = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.sapAiCoreClientSecret = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.sapAiResourceGroup = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.sapAiCoreTokenUrl = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.sapAiCoreBaseUrl = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.moonshotApiKey = reader.string();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.moonshotApiLine = reader.string();
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.huaweiCloudMaasApiKey = reader.string();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.ollamaApiKey = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.zaiApiKey = reader.string();
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.zaiApiLine = reader.string();
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.lmStudioMaxTokens = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.planModeApiProvider = reader.string();
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.planModeApiModelId = reader.string();
          continue;
        }
        case 102: {
          if (tag !== 816) {
            break;
          }

          message.planModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.planModeReasoningEffort = reader.string();
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.planModeVscodeLmModelSelector = reader.string();
          continue;
        }
        case 105: {
          if (tag !== 840) {
            break;
          }

          message.planModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 106: {
          if (tag !== 850) {
            break;
          }

          message.planModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.planModeOpenrouterModelId = reader.string();
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.planModeOpenrouterModelInfo = reader.string();
          continue;
        }
        case 109: {
          if (tag !== 874) {
            break;
          }

          message.planModeOpenaiModelId = reader.string();
          continue;
        }
        case 110: {
          if (tag !== 882) {
            break;
          }

          message.planModeOpenaiModelInfo = reader.string();
          continue;
        }
        case 111: {
          if (tag !== 890) {
            break;
          }

          message.planModeOllamaModelId = reader.string();
          continue;
        }
        case 112: {
          if (tag !== 898) {
            break;
          }

          message.planModeLmStudioModelId = reader.string();
          continue;
        }
        case 113: {
          if (tag !== 906) {
            break;
          }

          message.planModeLiteLlmModelId = reader.string();
          continue;
        }
        case 114: {
          if (tag !== 914) {
            break;
          }

          message.planModeLiteLlmModelInfo = reader.string();
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.planModeRequestyModelId = reader.string();
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.planModeRequestyModelInfo = reader.string();
          continue;
        }
        case 117: {
          if (tag !== 938) {
            break;
          }

          message.planModeTogetherModelId = reader.string();
          continue;
        }
        case 118: {
          if (tag !== 946) {
            break;
          }

          message.planModeFireworksModelId = reader.string();
          continue;
        }
        case 119: {
          if (tag !== 954) {
            break;
          }

          message.planModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 120: {
          if (tag !== 962) {
            break;
          }

          message.planModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 121: {
          if (tag !== 970) {
            break;
          }

          message.planModeHuaweiCloudMaasModelInfo = reader.string();
          continue;
        }
        case 200: {
          if (tag !== 1602) {
            break;
          }

          message.actModeApiProvider = reader.string();
          continue;
        }
        case 201: {
          if (tag !== 1610) {
            break;
          }

          message.actModeApiModelId = reader.string();
          continue;
        }
        case 202: {
          if (tag !== 1616) {
            break;
          }

          message.actModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 203: {
          if (tag !== 1626) {
            break;
          }

          message.actModeReasoningEffort = reader.string();
          continue;
        }
        case 204: {
          if (tag !== 1634) {
            break;
          }

          message.actModeVscodeLmModelSelector = reader.string();
          continue;
        }
        case 205: {
          if (tag !== 1640) {
            break;
          }

          message.actModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 206: {
          if (tag !== 1650) {
            break;
          }

          message.actModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 207: {
          if (tag !== 1658) {
            break;
          }

          message.actModeOpenrouterModelId = reader.string();
          continue;
        }
        case 208: {
          if (tag !== 1666) {
            break;
          }

          message.actModeOpenrouterModelInfo = reader.string();
          continue;
        }
        case 209: {
          if (tag !== 1674) {
            break;
          }

          message.actModeOpenaiModelId = reader.string();
          continue;
        }
        case 210: {
          if (tag !== 1682) {
            break;
          }

          message.actModeOpenaiModelInfo = reader.string();
          continue;
        }
        case 211: {
          if (tag !== 1690) {
            break;
          }

          message.actModeOllamaModelId = reader.string();
          continue;
        }
        case 212: {
          if (tag !== 1698) {
            break;
          }

          message.actModeLmStudioModelId = reader.string();
          continue;
        }
        case 213: {
          if (tag !== 1706) {
            break;
          }

          message.actModeLiteLlmModelId = reader.string();
          continue;
        }
        case 214: {
          if (tag !== 1714) {
            break;
          }

          message.actModeLiteLlmModelInfo = reader.string();
          continue;
        }
        case 215: {
          if (tag !== 1722) {
            break;
          }

          message.actModeRequestyModelId = reader.string();
          continue;
        }
        case 216: {
          if (tag !== 1730) {
            break;
          }

          message.actModeRequestyModelInfo = reader.string();
          continue;
        }
        case 217: {
          if (tag !== 1738) {
            break;
          }

          message.actModeTogetherModelId = reader.string();
          continue;
        }
        case 218: {
          if (tag !== 1746) {
            break;
          }

          message.actModeFireworksModelId = reader.string();
          continue;
        }
        case 219: {
          if (tag !== 1754) {
            break;
          }

          message.actModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 220: {
          if (tag !== 1762) {
            break;
          }

          message.actModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 221: {
          if (tag !== 1770) {
            break;
          }

          message.actModeHuaweiCloudMaasModelInfo = reader.string();
          continue;
        }
        case 300: {
          if (tag !== 2402) {
            break;
          }

          message.favoritedModelIds.push(reader.string());
          continue;
        }
        case 301: {
          if (tag !== 2410) {
            break;
          }

          message.awsAuthentication = reader.string();
          continue;
        }
        case 302: {
          if (tag !== 2418) {
            break;
          }

          message.awsBedrockApiKey = reader.string();
          continue;
        }
        case 303: {
          if (tag !== 2426) {
            break;
          }

          message.clineAccountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfiguration {
    return {
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : undefined,
      clineApiKey: isSet(object.clineApiKey) ? globalThis.String(object.clineApiKey) : undefined,
      ulid: isSet(object.ulid) ? globalThis.String(object.ulid) : undefined,
      liteLlmBaseUrl: isSet(object.liteLlmBaseUrl) ? globalThis.String(object.liteLlmBaseUrl) : undefined,
      liteLlmApiKey: isSet(object.liteLlmApiKey) ? globalThis.String(object.liteLlmApiKey) : undefined,
      liteLlmUsePromptCache: isSet(object.liteLlmUsePromptCache)
        ? globalThis.Boolean(object.liteLlmUsePromptCache)
        : undefined,
      openaiHeaders: isSet(object.openaiHeaders) ? globalThis.String(object.openaiHeaders) : undefined,
      anthropicBaseUrl: isSet(object.anthropicBaseUrl) ? globalThis.String(object.anthropicBaseUrl) : undefined,
      openrouterApiKey: isSet(object.openrouterApiKey) ? globalThis.String(object.openrouterApiKey) : undefined,
      openrouterProviderSorting: isSet(object.openrouterProviderSorting)
        ? globalThis.String(object.openrouterProviderSorting)
        : undefined,
      awsAccessKey: isSet(object.awsAccessKey) ? globalThis.String(object.awsAccessKey) : undefined,
      awsSecretKey: isSet(object.awsSecretKey) ? globalThis.String(object.awsSecretKey) : undefined,
      awsSessionToken: isSet(object.awsSessionToken) ? globalThis.String(object.awsSessionToken) : undefined,
      awsRegion: isSet(object.awsRegion) ? globalThis.String(object.awsRegion) : undefined,
      awsUseCrossRegionInference: isSet(object.awsUseCrossRegionInference)
        ? globalThis.Boolean(object.awsUseCrossRegionInference)
        : undefined,
      awsBedrockUsePromptCache: isSet(object.awsBedrockUsePromptCache)
        ? globalThis.Boolean(object.awsBedrockUsePromptCache)
        : undefined,
      awsUseProfile: isSet(object.awsUseProfile) ? globalThis.Boolean(object.awsUseProfile) : undefined,
      awsProfile: isSet(object.awsProfile) ? globalThis.String(object.awsProfile) : undefined,
      awsBedrockEndpoint: isSet(object.awsBedrockEndpoint) ? globalThis.String(object.awsBedrockEndpoint) : undefined,
      claudeCodePath: isSet(object.claudeCodePath) ? globalThis.String(object.claudeCodePath) : undefined,
      vertexProjectId: isSet(object.vertexProjectId) ? globalThis.String(object.vertexProjectId) : undefined,
      vertexRegion: isSet(object.vertexRegion) ? globalThis.String(object.vertexRegion) : undefined,
      openaiBaseUrl: isSet(object.openaiBaseUrl) ? globalThis.String(object.openaiBaseUrl) : undefined,
      openaiApiKey: isSet(object.openaiApiKey) ? globalThis.String(object.openaiApiKey) : undefined,
      ollamaBaseUrl: isSet(object.ollamaBaseUrl) ? globalThis.String(object.ollamaBaseUrl) : undefined,
      ollamaApiOptionsCtxNum: isSet(object.ollamaApiOptionsCtxNum)
        ? globalThis.String(object.ollamaApiOptionsCtxNum)
        : undefined,
      lmStudioBaseUrl: isSet(object.lmStudioBaseUrl) ? globalThis.String(object.lmStudioBaseUrl) : undefined,
      geminiApiKey: isSet(object.geminiApiKey) ? globalThis.String(object.geminiApiKey) : undefined,
      geminiBaseUrl: isSet(object.geminiBaseUrl) ? globalThis.String(object.geminiBaseUrl) : undefined,
      openaiNativeApiKey: isSet(object.openaiNativeApiKey) ? globalThis.String(object.openaiNativeApiKey) : undefined,
      deepSeekApiKey: isSet(object.deepSeekApiKey) ? globalThis.String(object.deepSeekApiKey) : undefined,
      requestyApiKey: isSet(object.requestyApiKey) ? globalThis.String(object.requestyApiKey) : undefined,
      requestyBaseUrl: isSet(object.requestyBaseUrl) ? globalThis.String(object.requestyBaseUrl) : undefined,
      togetherApiKey: isSet(object.togetherApiKey) ? globalThis.String(object.togetherApiKey) : undefined,
      fireworksApiKey: isSet(object.fireworksApiKey) ? globalThis.String(object.fireworksApiKey) : undefined,
      fireworksModelMaxCompletionTokens: isSet(object.fireworksModelMaxCompletionTokens)
        ? globalThis.Number(object.fireworksModelMaxCompletionTokens)
        : undefined,
      fireworksModelMaxTokens: isSet(object.fireworksModelMaxTokens)
        ? globalThis.Number(object.fireworksModelMaxTokens)
        : undefined,
      qwenApiKey: isSet(object.qwenApiKey) ? globalThis.String(object.qwenApiKey) : undefined,
      doubaoApiKey: isSet(object.doubaoApiKey) ? globalThis.String(object.doubaoApiKey) : undefined,
      mistralApiKey: isSet(object.mistralApiKey) ? globalThis.String(object.mistralApiKey) : undefined,
      azureApiVersion: isSet(object.azureApiVersion) ? globalThis.String(object.azureApiVersion) : undefined,
      qwenApiLine: isSet(object.qwenApiLine) ? globalThis.String(object.qwenApiLine) : undefined,
      nebiusApiKey: isSet(object.nebiusApiKey) ? globalThis.String(object.nebiusApiKey) : undefined,
      asksageApiUrl: isSet(object.asksageApiUrl) ? globalThis.String(object.asksageApiUrl) : undefined,
      asksageApiKey: isSet(object.asksageApiKey) ? globalThis.String(object.asksageApiKey) : undefined,
      xaiApiKey: isSet(object.xaiApiKey) ? globalThis.String(object.xaiApiKey) : undefined,
      sambanovaApiKey: isSet(object.sambanovaApiKey) ? globalThis.String(object.sambanovaApiKey) : undefined,
      cerebrasApiKey: isSet(object.cerebrasApiKey) ? globalThis.String(object.cerebrasApiKey) : undefined,
      requestTimeoutMs: isSet(object.requestTimeoutMs) ? globalThis.Number(object.requestTimeoutMs) : undefined,
      sapAiCoreClientId: isSet(object.sapAiCoreClientId) ? globalThis.String(object.sapAiCoreClientId) : undefined,
      sapAiCoreClientSecret: isSet(object.sapAiCoreClientSecret)
        ? globalThis.String(object.sapAiCoreClientSecret)
        : undefined,
      sapAiResourceGroup: isSet(object.sapAiResourceGroup) ? globalThis.String(object.sapAiResourceGroup) : undefined,
      sapAiCoreTokenUrl: isSet(object.sapAiCoreTokenUrl) ? globalThis.String(object.sapAiCoreTokenUrl) : undefined,
      sapAiCoreBaseUrl: isSet(object.sapAiCoreBaseUrl) ? globalThis.String(object.sapAiCoreBaseUrl) : undefined,
      moonshotApiKey: isSet(object.moonshotApiKey) ? globalThis.String(object.moonshotApiKey) : undefined,
      moonshotApiLine: isSet(object.moonshotApiLine) ? globalThis.String(object.moonshotApiLine) : undefined,
      huaweiCloudMaasApiKey: isSet(object.huaweiCloudMaasApiKey)
        ? globalThis.String(object.huaweiCloudMaasApiKey)
        : undefined,
      ollamaApiKey: isSet(object.ollamaApiKey) ? globalThis.String(object.ollamaApiKey) : undefined,
      zaiApiKey: isSet(object.zaiApiKey) ? globalThis.String(object.zaiApiKey) : undefined,
      zaiApiLine: isSet(object.zaiApiLine) ? globalThis.String(object.zaiApiLine) : undefined,
      lmStudioMaxTokens: isSet(object.lmStudioMaxTokens) ? globalThis.String(object.lmStudioMaxTokens) : undefined,
      planModeApiProvider: isSet(object.planModeApiProvider)
        ? globalThis.String(object.planModeApiProvider)
        : undefined,
      planModeApiModelId: isSet(object.planModeApiModelId) ? globalThis.String(object.planModeApiModelId) : undefined,
      planModeThinkingBudgetTokens: isSet(object.planModeThinkingBudgetTokens)
        ? globalThis.Number(object.planModeThinkingBudgetTokens)
        : undefined,
      planModeReasoningEffort: isSet(object.planModeReasoningEffort)
        ? globalThis.String(object.planModeReasoningEffort)
        : undefined,
      planModeVscodeLmModelSelector: isSet(object.planModeVscodeLmModelSelector)
        ? globalThis.String(object.planModeVscodeLmModelSelector)
        : undefined,
      planModeAwsBedrockCustomSelected: isSet(object.planModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.planModeAwsBedrockCustomSelected)
        : undefined,
      planModeAwsBedrockCustomModelBaseId: isSet(object.planModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.planModeAwsBedrockCustomModelBaseId)
        : undefined,
      planModeOpenrouterModelId: isSet(object.planModeOpenrouterModelId)
        ? globalThis.String(object.planModeOpenrouterModelId)
        : undefined,
      planModeOpenrouterModelInfo: isSet(object.planModeOpenrouterModelInfo)
        ? globalThis.String(object.planModeOpenrouterModelInfo)
        : undefined,
      planModeOpenaiModelId: isSet(object.planModeOpenaiModelId)
        ? globalThis.String(object.planModeOpenaiModelId)
        : undefined,
      planModeOpenaiModelInfo: isSet(object.planModeOpenaiModelInfo)
        ? globalThis.String(object.planModeOpenaiModelInfo)
        : undefined,
      planModeOllamaModelId: isSet(object.planModeOllamaModelId)
        ? globalThis.String(object.planModeOllamaModelId)
        : undefined,
      planModeLmStudioModelId: isSet(object.planModeLmStudioModelId)
        ? globalThis.String(object.planModeLmStudioModelId)
        : undefined,
      planModeLiteLlmModelId: isSet(object.planModeLiteLlmModelId)
        ? globalThis.String(object.planModeLiteLlmModelId)
        : undefined,
      planModeLiteLlmModelInfo: isSet(object.planModeLiteLlmModelInfo)
        ? globalThis.String(object.planModeLiteLlmModelInfo)
        : undefined,
      planModeRequestyModelId: isSet(object.planModeRequestyModelId)
        ? globalThis.String(object.planModeRequestyModelId)
        : undefined,
      planModeRequestyModelInfo: isSet(object.planModeRequestyModelInfo)
        ? globalThis.String(object.planModeRequestyModelInfo)
        : undefined,
      planModeTogetherModelId: isSet(object.planModeTogetherModelId)
        ? globalThis.String(object.planModeTogetherModelId)
        : undefined,
      planModeFireworksModelId: isSet(object.planModeFireworksModelId)
        ? globalThis.String(object.planModeFireworksModelId)
        : undefined,
      planModeSapAiCoreModelId: isSet(object.planModeSapAiCoreModelId)
        ? globalThis.String(object.planModeSapAiCoreModelId)
        : undefined,
      planModeHuaweiCloudMaasModelId: isSet(object.planModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.planModeHuaweiCloudMaasModelId)
        : undefined,
      planModeHuaweiCloudMaasModelInfo: isSet(object.planModeHuaweiCloudMaasModelInfo)
        ? globalThis.String(object.planModeHuaweiCloudMaasModelInfo)
        : undefined,
      actModeApiProvider: isSet(object.actModeApiProvider) ? globalThis.String(object.actModeApiProvider) : undefined,
      actModeApiModelId: isSet(object.actModeApiModelId) ? globalThis.String(object.actModeApiModelId) : undefined,
      actModeThinkingBudgetTokens: isSet(object.actModeThinkingBudgetTokens)
        ? globalThis.Number(object.actModeThinkingBudgetTokens)
        : undefined,
      actModeReasoningEffort: isSet(object.actModeReasoningEffort)
        ? globalThis.String(object.actModeReasoningEffort)
        : undefined,
      actModeVscodeLmModelSelector: isSet(object.actModeVscodeLmModelSelector)
        ? globalThis.String(object.actModeVscodeLmModelSelector)
        : undefined,
      actModeAwsBedrockCustomSelected: isSet(object.actModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.actModeAwsBedrockCustomSelected)
        : undefined,
      actModeAwsBedrockCustomModelBaseId: isSet(object.actModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.actModeAwsBedrockCustomModelBaseId)
        : undefined,
      actModeOpenrouterModelId: isSet(object.actModeOpenrouterModelId)
        ? globalThis.String(object.actModeOpenrouterModelId)
        : undefined,
      actModeOpenrouterModelInfo: isSet(object.actModeOpenrouterModelInfo)
        ? globalThis.String(object.actModeOpenrouterModelInfo)
        : undefined,
      actModeOpenaiModelId: isSet(object.actModeOpenaiModelId)
        ? globalThis.String(object.actModeOpenaiModelId)
        : undefined,
      actModeOpenaiModelInfo: isSet(object.actModeOpenaiModelInfo)
        ? globalThis.String(object.actModeOpenaiModelInfo)
        : undefined,
      actModeOllamaModelId: isSet(object.actModeOllamaModelId)
        ? globalThis.String(object.actModeOllamaModelId)
        : undefined,
      actModeLmStudioModelId: isSet(object.actModeLmStudioModelId)
        ? globalThis.String(object.actModeLmStudioModelId)
        : undefined,
      actModeLiteLlmModelId: isSet(object.actModeLiteLlmModelId)
        ? globalThis.String(object.actModeLiteLlmModelId)
        : undefined,
      actModeLiteLlmModelInfo: isSet(object.actModeLiteLlmModelInfo)
        ? globalThis.String(object.actModeLiteLlmModelInfo)
        : undefined,
      actModeRequestyModelId: isSet(object.actModeRequestyModelId)
        ? globalThis.String(object.actModeRequestyModelId)
        : undefined,
      actModeRequestyModelInfo: isSet(object.actModeRequestyModelInfo)
        ? globalThis.String(object.actModeRequestyModelInfo)
        : undefined,
      actModeTogetherModelId: isSet(object.actModeTogetherModelId)
        ? globalThis.String(object.actModeTogetherModelId)
        : undefined,
      actModeFireworksModelId: isSet(object.actModeFireworksModelId)
        ? globalThis.String(object.actModeFireworksModelId)
        : undefined,
      actModeSapAiCoreModelId: isSet(object.actModeSapAiCoreModelId)
        ? globalThis.String(object.actModeSapAiCoreModelId)
        : undefined,
      actModeHuaweiCloudMaasModelId: isSet(object.actModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.actModeHuaweiCloudMaasModelId)
        : undefined,
      actModeHuaweiCloudMaasModelInfo: isSet(object.actModeHuaweiCloudMaasModelInfo)
        ? globalThis.String(object.actModeHuaweiCloudMaasModelInfo)
        : undefined,
      favoritedModelIds: globalThis.Array.isArray(object?.favoritedModelIds)
        ? object.favoritedModelIds.map((e: any) => globalThis.String(e))
        : [],
      awsAuthentication: isSet(object.awsAuthentication) ? globalThis.String(object.awsAuthentication) : undefined,
      awsBedrockApiKey: isSet(object.awsBedrockApiKey) ? globalThis.String(object.awsBedrockApiKey) : undefined,
      clineAccountId: isSet(object.clineAccountId) ? globalThis.String(object.clineAccountId) : undefined,
    };
  },

  toJSON(message: ApiConfiguration): unknown {
    const obj: any = {};
    if (message.apiKey !== undefined) {
      obj.apiKey = message.apiKey;
    }
    if (message.clineApiKey !== undefined) {
      obj.clineApiKey = message.clineApiKey;
    }
    if (message.ulid !== undefined) {
      obj.ulid = message.ulid;
    }
    if (message.liteLlmBaseUrl !== undefined) {
      obj.liteLlmBaseUrl = message.liteLlmBaseUrl;
    }
    if (message.liteLlmApiKey !== undefined) {
      obj.liteLlmApiKey = message.liteLlmApiKey;
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      obj.liteLlmUsePromptCache = message.liteLlmUsePromptCache;
    }
    if (message.openaiHeaders !== undefined) {
      obj.openaiHeaders = message.openaiHeaders;
    }
    if (message.anthropicBaseUrl !== undefined) {
      obj.anthropicBaseUrl = message.anthropicBaseUrl;
    }
    if (message.openrouterApiKey !== undefined) {
      obj.openrouterApiKey = message.openrouterApiKey;
    }
    if (message.openrouterProviderSorting !== undefined) {
      obj.openrouterProviderSorting = message.openrouterProviderSorting;
    }
    if (message.awsAccessKey !== undefined) {
      obj.awsAccessKey = message.awsAccessKey;
    }
    if (message.awsSecretKey !== undefined) {
      obj.awsSecretKey = message.awsSecretKey;
    }
    if (message.awsSessionToken !== undefined) {
      obj.awsSessionToken = message.awsSessionToken;
    }
    if (message.awsRegion !== undefined) {
      obj.awsRegion = message.awsRegion;
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      obj.awsUseCrossRegionInference = message.awsUseCrossRegionInference;
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      obj.awsBedrockUsePromptCache = message.awsBedrockUsePromptCache;
    }
    if (message.awsUseProfile !== undefined) {
      obj.awsUseProfile = message.awsUseProfile;
    }
    if (message.awsProfile !== undefined) {
      obj.awsProfile = message.awsProfile;
    }
    if (message.awsBedrockEndpoint !== undefined) {
      obj.awsBedrockEndpoint = message.awsBedrockEndpoint;
    }
    if (message.claudeCodePath !== undefined) {
      obj.claudeCodePath = message.claudeCodePath;
    }
    if (message.vertexProjectId !== undefined) {
      obj.vertexProjectId = message.vertexProjectId;
    }
    if (message.vertexRegion !== undefined) {
      obj.vertexRegion = message.vertexRegion;
    }
    if (message.openaiBaseUrl !== undefined) {
      obj.openaiBaseUrl = message.openaiBaseUrl;
    }
    if (message.openaiApiKey !== undefined) {
      obj.openaiApiKey = message.openaiApiKey;
    }
    if (message.ollamaBaseUrl !== undefined) {
      obj.ollamaBaseUrl = message.ollamaBaseUrl;
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      obj.ollamaApiOptionsCtxNum = message.ollamaApiOptionsCtxNum;
    }
    if (message.lmStudioBaseUrl !== undefined) {
      obj.lmStudioBaseUrl = message.lmStudioBaseUrl;
    }
    if (message.geminiApiKey !== undefined) {
      obj.geminiApiKey = message.geminiApiKey;
    }
    if (message.geminiBaseUrl !== undefined) {
      obj.geminiBaseUrl = message.geminiBaseUrl;
    }
    if (message.openaiNativeApiKey !== undefined) {
      obj.openaiNativeApiKey = message.openaiNativeApiKey;
    }
    if (message.deepSeekApiKey !== undefined) {
      obj.deepSeekApiKey = message.deepSeekApiKey;
    }
    if (message.requestyApiKey !== undefined) {
      obj.requestyApiKey = message.requestyApiKey;
    }
    if (message.requestyBaseUrl !== undefined) {
      obj.requestyBaseUrl = message.requestyBaseUrl;
    }
    if (message.togetherApiKey !== undefined) {
      obj.togetherApiKey = message.togetherApiKey;
    }
    if (message.fireworksApiKey !== undefined) {
      obj.fireworksApiKey = message.fireworksApiKey;
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      obj.fireworksModelMaxCompletionTokens = Math.round(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      obj.fireworksModelMaxTokens = Math.round(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      obj.qwenApiKey = message.qwenApiKey;
    }
    if (message.doubaoApiKey !== undefined) {
      obj.doubaoApiKey = message.doubaoApiKey;
    }
    if (message.mistralApiKey !== undefined) {
      obj.mistralApiKey = message.mistralApiKey;
    }
    if (message.azureApiVersion !== undefined) {
      obj.azureApiVersion = message.azureApiVersion;
    }
    if (message.qwenApiLine !== undefined) {
      obj.qwenApiLine = message.qwenApiLine;
    }
    if (message.nebiusApiKey !== undefined) {
      obj.nebiusApiKey = message.nebiusApiKey;
    }
    if (message.asksageApiUrl !== undefined) {
      obj.asksageApiUrl = message.asksageApiUrl;
    }
    if (message.asksageApiKey !== undefined) {
      obj.asksageApiKey = message.asksageApiKey;
    }
    if (message.xaiApiKey !== undefined) {
      obj.xaiApiKey = message.xaiApiKey;
    }
    if (message.sambanovaApiKey !== undefined) {
      obj.sambanovaApiKey = message.sambanovaApiKey;
    }
    if (message.cerebrasApiKey !== undefined) {
      obj.cerebrasApiKey = message.cerebrasApiKey;
    }
    if (message.requestTimeoutMs !== undefined) {
      obj.requestTimeoutMs = Math.round(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      obj.sapAiCoreClientId = message.sapAiCoreClientId;
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      obj.sapAiCoreClientSecret = message.sapAiCoreClientSecret;
    }
    if (message.sapAiResourceGroup !== undefined) {
      obj.sapAiResourceGroup = message.sapAiResourceGroup;
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      obj.sapAiCoreTokenUrl = message.sapAiCoreTokenUrl;
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      obj.sapAiCoreBaseUrl = message.sapAiCoreBaseUrl;
    }
    if (message.moonshotApiKey !== undefined) {
      obj.moonshotApiKey = message.moonshotApiKey;
    }
    if (message.moonshotApiLine !== undefined) {
      obj.moonshotApiLine = message.moonshotApiLine;
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      obj.huaweiCloudMaasApiKey = message.huaweiCloudMaasApiKey;
    }
    if (message.ollamaApiKey !== undefined) {
      obj.ollamaApiKey = message.ollamaApiKey;
    }
    if (message.zaiApiKey !== undefined) {
      obj.zaiApiKey = message.zaiApiKey;
    }
    if (message.zaiApiLine !== undefined) {
      obj.zaiApiLine = message.zaiApiLine;
    }
    if (message.lmStudioMaxTokens !== undefined) {
      obj.lmStudioMaxTokens = message.lmStudioMaxTokens;
    }
    if (message.planModeApiProvider !== undefined) {
      obj.planModeApiProvider = message.planModeApiProvider;
    }
    if (message.planModeApiModelId !== undefined) {
      obj.planModeApiModelId = message.planModeApiModelId;
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      obj.planModeThinkingBudgetTokens = Math.round(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      obj.planModeReasoningEffort = message.planModeReasoningEffort;
    }
    if (message.planModeVscodeLmModelSelector !== undefined) {
      obj.planModeVscodeLmModelSelector = message.planModeVscodeLmModelSelector;
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      obj.planModeAwsBedrockCustomSelected = message.planModeAwsBedrockCustomSelected;
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.planModeAwsBedrockCustomModelBaseId = message.planModeAwsBedrockCustomModelBaseId;
    }
    if (message.planModeOpenrouterModelId !== undefined) {
      obj.planModeOpenrouterModelId = message.planModeOpenrouterModelId;
    }
    if (message.planModeOpenrouterModelInfo !== undefined) {
      obj.planModeOpenrouterModelInfo = message.planModeOpenrouterModelInfo;
    }
    if (message.planModeOpenaiModelId !== undefined) {
      obj.planModeOpenaiModelId = message.planModeOpenaiModelId;
    }
    if (message.planModeOpenaiModelInfo !== undefined) {
      obj.planModeOpenaiModelInfo = message.planModeOpenaiModelInfo;
    }
    if (message.planModeOllamaModelId !== undefined) {
      obj.planModeOllamaModelId = message.planModeOllamaModelId;
    }
    if (message.planModeLmStudioModelId !== undefined) {
      obj.planModeLmStudioModelId = message.planModeLmStudioModelId;
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      obj.planModeLiteLlmModelId = message.planModeLiteLlmModelId;
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      obj.planModeLiteLlmModelInfo = message.planModeLiteLlmModelInfo;
    }
    if (message.planModeRequestyModelId !== undefined) {
      obj.planModeRequestyModelId = message.planModeRequestyModelId;
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      obj.planModeRequestyModelInfo = message.planModeRequestyModelInfo;
    }
    if (message.planModeTogetherModelId !== undefined) {
      obj.planModeTogetherModelId = message.planModeTogetherModelId;
    }
    if (message.planModeFireworksModelId !== undefined) {
      obj.planModeFireworksModelId = message.planModeFireworksModelId;
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      obj.planModeSapAiCoreModelId = message.planModeSapAiCoreModelId;
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      obj.planModeHuaweiCloudMaasModelId = message.planModeHuaweiCloudMaasModelId;
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.planModeHuaweiCloudMaasModelInfo = message.planModeHuaweiCloudMaasModelInfo;
    }
    if (message.actModeApiProvider !== undefined) {
      obj.actModeApiProvider = message.actModeApiProvider;
    }
    if (message.actModeApiModelId !== undefined) {
      obj.actModeApiModelId = message.actModeApiModelId;
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      obj.actModeThinkingBudgetTokens = Math.round(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      obj.actModeReasoningEffort = message.actModeReasoningEffort;
    }
    if (message.actModeVscodeLmModelSelector !== undefined) {
      obj.actModeVscodeLmModelSelector = message.actModeVscodeLmModelSelector;
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      obj.actModeAwsBedrockCustomSelected = message.actModeAwsBedrockCustomSelected;
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.actModeAwsBedrockCustomModelBaseId = message.actModeAwsBedrockCustomModelBaseId;
    }
    if (message.actModeOpenrouterModelId !== undefined) {
      obj.actModeOpenrouterModelId = message.actModeOpenrouterModelId;
    }
    if (message.actModeOpenrouterModelInfo !== undefined) {
      obj.actModeOpenrouterModelInfo = message.actModeOpenrouterModelInfo;
    }
    if (message.actModeOpenaiModelId !== undefined) {
      obj.actModeOpenaiModelId = message.actModeOpenaiModelId;
    }
    if (message.actModeOpenaiModelInfo !== undefined) {
      obj.actModeOpenaiModelInfo = message.actModeOpenaiModelInfo;
    }
    if (message.actModeOllamaModelId !== undefined) {
      obj.actModeOllamaModelId = message.actModeOllamaModelId;
    }
    if (message.actModeLmStudioModelId !== undefined) {
      obj.actModeLmStudioModelId = message.actModeLmStudioModelId;
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      obj.actModeLiteLlmModelId = message.actModeLiteLlmModelId;
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      obj.actModeLiteLlmModelInfo = message.actModeLiteLlmModelInfo;
    }
    if (message.actModeRequestyModelId !== undefined) {
      obj.actModeRequestyModelId = message.actModeRequestyModelId;
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      obj.actModeRequestyModelInfo = message.actModeRequestyModelInfo;
    }
    if (message.actModeTogetherModelId !== undefined) {
      obj.actModeTogetherModelId = message.actModeTogetherModelId;
    }
    if (message.actModeFireworksModelId !== undefined) {
      obj.actModeFireworksModelId = message.actModeFireworksModelId;
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      obj.actModeSapAiCoreModelId = message.actModeSapAiCoreModelId;
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      obj.actModeHuaweiCloudMaasModelId = message.actModeHuaweiCloudMaasModelId;
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.actModeHuaweiCloudMaasModelInfo = message.actModeHuaweiCloudMaasModelInfo;
    }
    if (message.favoritedModelIds?.length) {
      obj.favoritedModelIds = message.favoritedModelIds;
    }
    if (message.awsAuthentication !== undefined) {
      obj.awsAuthentication = message.awsAuthentication;
    }
    if (message.awsBedrockApiKey !== undefined) {
      obj.awsBedrockApiKey = message.awsBedrockApiKey;
    }
    if (message.clineAccountId !== undefined) {
      obj.clineAccountId = message.clineAccountId;
    }
    return obj;
  },

  create(base?: DeepPartial<ApiConfiguration>): ApiConfiguration {
    return ApiConfiguration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ApiConfiguration>): ApiConfiguration {
    const message = createBaseApiConfiguration();
    message.apiKey = object.apiKey ?? undefined;
    message.clineApiKey = object.clineApiKey ?? undefined;
    message.ulid = object.ulid ?? undefined;
    message.liteLlmBaseUrl = object.liteLlmBaseUrl ?? undefined;
    message.liteLlmApiKey = object.liteLlmApiKey ?? undefined;
    message.liteLlmUsePromptCache = object.liteLlmUsePromptCache ?? undefined;
    message.openaiHeaders = object.openaiHeaders ?? undefined;
    message.anthropicBaseUrl = object.anthropicBaseUrl ?? undefined;
    message.openrouterApiKey = object.openrouterApiKey ?? undefined;
    message.openrouterProviderSorting = object.openrouterProviderSorting ?? undefined;
    message.awsAccessKey = object.awsAccessKey ?? undefined;
    message.awsSecretKey = object.awsSecretKey ?? undefined;
    message.awsSessionToken = object.awsSessionToken ?? undefined;
    message.awsRegion = object.awsRegion ?? undefined;
    message.awsUseCrossRegionInference = object.awsUseCrossRegionInference ?? undefined;
    message.awsBedrockUsePromptCache = object.awsBedrockUsePromptCache ?? undefined;
    message.awsUseProfile = object.awsUseProfile ?? undefined;
    message.awsProfile = object.awsProfile ?? undefined;
    message.awsBedrockEndpoint = object.awsBedrockEndpoint ?? undefined;
    message.claudeCodePath = object.claudeCodePath ?? undefined;
    message.vertexProjectId = object.vertexProjectId ?? undefined;
    message.vertexRegion = object.vertexRegion ?? undefined;
    message.openaiBaseUrl = object.openaiBaseUrl ?? undefined;
    message.openaiApiKey = object.openaiApiKey ?? undefined;
    message.ollamaBaseUrl = object.ollamaBaseUrl ?? undefined;
    message.ollamaApiOptionsCtxNum = object.ollamaApiOptionsCtxNum ?? undefined;
    message.lmStudioBaseUrl = object.lmStudioBaseUrl ?? undefined;
    message.geminiApiKey = object.geminiApiKey ?? undefined;
    message.geminiBaseUrl = object.geminiBaseUrl ?? undefined;
    message.openaiNativeApiKey = object.openaiNativeApiKey ?? undefined;
    message.deepSeekApiKey = object.deepSeekApiKey ?? undefined;
    message.requestyApiKey = object.requestyApiKey ?? undefined;
    message.requestyBaseUrl = object.requestyBaseUrl ?? undefined;
    message.togetherApiKey = object.togetherApiKey ?? undefined;
    message.fireworksApiKey = object.fireworksApiKey ?? undefined;
    message.fireworksModelMaxCompletionTokens = object.fireworksModelMaxCompletionTokens ?? undefined;
    message.fireworksModelMaxTokens = object.fireworksModelMaxTokens ?? undefined;
    message.qwenApiKey = object.qwenApiKey ?? undefined;
    message.doubaoApiKey = object.doubaoApiKey ?? undefined;
    message.mistralApiKey = object.mistralApiKey ?? undefined;
    message.azureApiVersion = object.azureApiVersion ?? undefined;
    message.qwenApiLine = object.qwenApiLine ?? undefined;
    message.nebiusApiKey = object.nebiusApiKey ?? undefined;
    message.asksageApiUrl = object.asksageApiUrl ?? undefined;
    message.asksageApiKey = object.asksageApiKey ?? undefined;
    message.xaiApiKey = object.xaiApiKey ?? undefined;
    message.sambanovaApiKey = object.sambanovaApiKey ?? undefined;
    message.cerebrasApiKey = object.cerebrasApiKey ?? undefined;
    message.requestTimeoutMs = object.requestTimeoutMs ?? undefined;
    message.sapAiCoreClientId = object.sapAiCoreClientId ?? undefined;
    message.sapAiCoreClientSecret = object.sapAiCoreClientSecret ?? undefined;
    message.sapAiResourceGroup = object.sapAiResourceGroup ?? undefined;
    message.sapAiCoreTokenUrl = object.sapAiCoreTokenUrl ?? undefined;
    message.sapAiCoreBaseUrl = object.sapAiCoreBaseUrl ?? undefined;
    message.moonshotApiKey = object.moonshotApiKey ?? undefined;
    message.moonshotApiLine = object.moonshotApiLine ?? undefined;
    message.huaweiCloudMaasApiKey = object.huaweiCloudMaasApiKey ?? undefined;
    message.ollamaApiKey = object.ollamaApiKey ?? undefined;
    message.zaiApiKey = object.zaiApiKey ?? undefined;
    message.zaiApiLine = object.zaiApiLine ?? undefined;
    message.lmStudioMaxTokens = object.lmStudioMaxTokens ?? undefined;
    message.planModeApiProvider = object.planModeApiProvider ?? undefined;
    message.planModeApiModelId = object.planModeApiModelId ?? undefined;
    message.planModeThinkingBudgetTokens = object.planModeThinkingBudgetTokens ?? undefined;
    message.planModeReasoningEffort = object.planModeReasoningEffort ?? undefined;
    message.planModeVscodeLmModelSelector = object.planModeVscodeLmModelSelector ?? undefined;
    message.planModeAwsBedrockCustomSelected = object.planModeAwsBedrockCustomSelected ?? undefined;
    message.planModeAwsBedrockCustomModelBaseId = object.planModeAwsBedrockCustomModelBaseId ?? undefined;
    message.planModeOpenrouterModelId = object.planModeOpenrouterModelId ?? undefined;
    message.planModeOpenrouterModelInfo = object.planModeOpenrouterModelInfo ?? undefined;
    message.planModeOpenaiModelId = object.planModeOpenaiModelId ?? undefined;
    message.planModeOpenaiModelInfo = object.planModeOpenaiModelInfo ?? undefined;
    message.planModeOllamaModelId = object.planModeOllamaModelId ?? undefined;
    message.planModeLmStudioModelId = object.planModeLmStudioModelId ?? undefined;
    message.planModeLiteLlmModelId = object.planModeLiteLlmModelId ?? undefined;
    message.planModeLiteLlmModelInfo = object.planModeLiteLlmModelInfo ?? undefined;
    message.planModeRequestyModelId = object.planModeRequestyModelId ?? undefined;
    message.planModeRequestyModelInfo = object.planModeRequestyModelInfo ?? undefined;
    message.planModeTogetherModelId = object.planModeTogetherModelId ?? undefined;
    message.planModeFireworksModelId = object.planModeFireworksModelId ?? undefined;
    message.planModeSapAiCoreModelId = object.planModeSapAiCoreModelId ?? undefined;
    message.planModeHuaweiCloudMaasModelId = object.planModeHuaweiCloudMaasModelId ?? undefined;
    message.planModeHuaweiCloudMaasModelInfo = object.planModeHuaweiCloudMaasModelInfo ?? undefined;
    message.actModeApiProvider = object.actModeApiProvider ?? undefined;
    message.actModeApiModelId = object.actModeApiModelId ?? undefined;
    message.actModeThinkingBudgetTokens = object.actModeThinkingBudgetTokens ?? undefined;
    message.actModeReasoningEffort = object.actModeReasoningEffort ?? undefined;
    message.actModeVscodeLmModelSelector = object.actModeVscodeLmModelSelector ?? undefined;
    message.actModeAwsBedrockCustomSelected = object.actModeAwsBedrockCustomSelected ?? undefined;
    message.actModeAwsBedrockCustomModelBaseId = object.actModeAwsBedrockCustomModelBaseId ?? undefined;
    message.actModeOpenrouterModelId = object.actModeOpenrouterModelId ?? undefined;
    message.actModeOpenrouterModelInfo = object.actModeOpenrouterModelInfo ?? undefined;
    message.actModeOpenaiModelId = object.actModeOpenaiModelId ?? undefined;
    message.actModeOpenaiModelInfo = object.actModeOpenaiModelInfo ?? undefined;
    message.actModeOllamaModelId = object.actModeOllamaModelId ?? undefined;
    message.actModeLmStudioModelId = object.actModeLmStudioModelId ?? undefined;
    message.actModeLiteLlmModelId = object.actModeLiteLlmModelId ?? undefined;
    message.actModeLiteLlmModelInfo = object.actModeLiteLlmModelInfo ?? undefined;
    message.actModeRequestyModelId = object.actModeRequestyModelId ?? undefined;
    message.actModeRequestyModelInfo = object.actModeRequestyModelInfo ?? undefined;
    message.actModeTogetherModelId = object.actModeTogetherModelId ?? undefined;
    message.actModeFireworksModelId = object.actModeFireworksModelId ?? undefined;
    message.actModeSapAiCoreModelId = object.actModeSapAiCoreModelId ?? undefined;
    message.actModeHuaweiCloudMaasModelId = object.actModeHuaweiCloudMaasModelId ?? undefined;
    message.actModeHuaweiCloudMaasModelInfo = object.actModeHuaweiCloudMaasModelInfo ?? undefined;
    message.favoritedModelIds = object.favoritedModelIds?.map((e) => e) || [];
    message.awsAuthentication = object.awsAuthentication ?? undefined;
    message.awsBedrockApiKey = object.awsBedrockApiKey ?? undefined;
    message.clineAccountId = object.clineAccountId ?? undefined;
    return message;
  },
};

function createBaseUpdateTerminalConnectionTimeoutRequest(): UpdateTerminalConnectionTimeoutRequest {
  return { timeoutMs: undefined };
}

export const UpdateTerminalConnectionTimeoutRequest: MessageFns<UpdateTerminalConnectionTimeoutRequest> = {
  encode(message: UpdateTerminalConnectionTimeoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeoutMs !== undefined) {
      writer.uint32(8).int32(message.timeoutMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTerminalConnectionTimeoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTerminalConnectionTimeoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timeoutMs = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTerminalConnectionTimeoutRequest {
    return { timeoutMs: isSet(object.timeoutMs) ? globalThis.Number(object.timeoutMs) : undefined };
  },

  toJSON(message: UpdateTerminalConnectionTimeoutRequest): unknown {
    const obj: any = {};
    if (message.timeoutMs !== undefined) {
      obj.timeoutMs = Math.round(message.timeoutMs);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTerminalConnectionTimeoutRequest>): UpdateTerminalConnectionTimeoutRequest {
    return UpdateTerminalConnectionTimeoutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTerminalConnectionTimeoutRequest>): UpdateTerminalConnectionTimeoutRequest {
    const message = createBaseUpdateTerminalConnectionTimeoutRequest();
    message.timeoutMs = object.timeoutMs ?? undefined;
    return message;
  },
};

function createBaseFocusChainSettings(): FocusChainSettings {
  return { enabled: false, remindClineInterval: 0 };
}

export const FocusChainSettings: MessageFns<FocusChainSettings> = {
  encode(message: FocusChainSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.remindClineInterval !== 0) {
      writer.uint32(16).int32(message.remindClineInterval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusChainSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusChainSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.remindClineInterval = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FocusChainSettings {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      remindClineInterval: isSet(object.remindClineInterval) ? globalThis.Number(object.remindClineInterval) : 0,
    };
  },

  toJSON(message: FocusChainSettings): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.remindClineInterval !== 0) {
      obj.remindClineInterval = Math.round(message.remindClineInterval);
    }
    return obj;
  },

  create(base?: DeepPartial<FocusChainSettings>): FocusChainSettings {
    return FocusChainSettings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FocusChainSettings>): FocusChainSettings {
    const message = createBaseFocusChainSettings();
    message.enabled = object.enabled ?? false;
    message.remindClineInterval = object.remindClineInterval ?? 0;
    return message;
  },
};

function createBaseUpdateTerminalConnectionTimeoutResponse(): UpdateTerminalConnectionTimeoutResponse {
  return { timeoutMs: undefined };
}

export const UpdateTerminalConnectionTimeoutResponse: MessageFns<UpdateTerminalConnectionTimeoutResponse> = {
  encode(message: UpdateTerminalConnectionTimeoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeoutMs !== undefined) {
      writer.uint32(8).int32(message.timeoutMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTerminalConnectionTimeoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTerminalConnectionTimeoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timeoutMs = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTerminalConnectionTimeoutResponse {
    return { timeoutMs: isSet(object.timeoutMs) ? globalThis.Number(object.timeoutMs) : undefined };
  },

  toJSON(message: UpdateTerminalConnectionTimeoutResponse): unknown {
    const obj: any = {};
    if (message.timeoutMs !== undefined) {
      obj.timeoutMs = Math.round(message.timeoutMs);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTerminalConnectionTimeoutResponse>): UpdateTerminalConnectionTimeoutResponse {
    return UpdateTerminalConnectionTimeoutResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTerminalConnectionTimeoutResponse>): UpdateTerminalConnectionTimeoutResponse {
    const message = createBaseUpdateTerminalConnectionTimeoutResponse();
    message.timeoutMs = object.timeoutMs ?? undefined;
    return message;
  },
};

export type StateServiceDefinition = typeof StateServiceDefinition;
export const StateServiceDefinition = {
  name: "StateService",
  fullName: "cline.StateService",
  methods: {
    getLatestState: {
      name: "getLatestState",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: State,
      responseStream: false,
      options: {},
    },
    updateTerminalConnectionTimeout: {
      name: "updateTerminalConnectionTimeout",
      requestType: UpdateTerminalConnectionTimeoutRequest,
      requestStream: false,
      responseType: UpdateTerminalConnectionTimeoutResponse,
      responseStream: false,
      options: {},
    },
    updateTerminalReuseEnabled: {
      name: "updateTerminalReuseEnabled",
      requestType: BooleanRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    updateDefaultTerminalProfile: {
      name: "updateDefaultTerminalProfile",
      requestType: StringRequest,
      requestStream: false,
      responseType: TerminalProfileUpdateResponse,
      responseStream: false,
      options: {},
    },
    getAvailableTerminalProfiles: {
      name: "getAvailableTerminalProfiles",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: TerminalProfiles,
      responseStream: false,
      options: {},
    },
    subscribeToState: {
      name: "subscribeToState",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: State,
      responseStream: true,
      options: {},
    },
    toggleFavoriteModel: {
      name: "toggleFavoriteModel",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    resetState: {
      name: "resetState",
      requestType: ResetStateRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    togglePlanActModeProto: {
      name: "togglePlanActModeProto",
      requestType: TogglePlanActModeRequest,
      requestStream: false,
      responseType: Boolean,
      responseStream: false,
      options: {},
    },
    updateAutoApprovalSettings: {
      name: "updateAutoApprovalSettings",
      requestType: AutoApprovalSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    updateSettings: {
      name: "updateSettings",
      requestType: UpdateSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    updateTelemetrySetting: {
      name: "updateTelemetrySetting",
      requestType: TelemetrySettingRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    setWelcomeViewCompleted: {
      name: "setWelcomeViewCompleted",
      requestType: BooleanRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface StateServiceImplementation<CallContextExt = {}> {
  getLatestState(request: EmptyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<State>>;
  updateTerminalConnectionTimeout(
    request: UpdateTerminalConnectionTimeoutRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateTerminalConnectionTimeoutResponse>>;
  updateTerminalReuseEnabled(
    request: BooleanRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  updateDefaultTerminalProfile(
    request: StringRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TerminalProfileUpdateResponse>>;
  getAvailableTerminalProfiles(
    request: EmptyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TerminalProfiles>>;
  subscribeToState(
    request: EmptyRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<State>>;
  toggleFavoriteModel(request: StringRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  resetState(request: ResetStateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  togglePlanActModeProto(
    request: TogglePlanActModeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Boolean>>;
  updateAutoApprovalSettings(
    request: AutoApprovalSettingsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  updateSettings(request: UpdateSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  updateTelemetrySetting(
    request: TelemetrySettingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  setWelcomeViewCompleted(request: BooleanRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
}

export interface StateServiceClient<CallOptionsExt = {}> {
  getLatestState(request: DeepPartial<EmptyRequest>, options?: CallOptions & CallOptionsExt): Promise<State>;
  updateTerminalConnectionTimeout(
    request: DeepPartial<UpdateTerminalConnectionTimeoutRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateTerminalConnectionTimeoutResponse>;
  updateTerminalReuseEnabled(
    request: DeepPartial<BooleanRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  updateDefaultTerminalProfile(
    request: DeepPartial<StringRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TerminalProfileUpdateResponse>;
  getAvailableTerminalProfiles(
    request: DeepPartial<EmptyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TerminalProfiles>;
  subscribeToState(request: DeepPartial<EmptyRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<State>;
  toggleFavoriteModel(request: DeepPartial<StringRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  resetState(request: DeepPartial<ResetStateRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  togglePlanActModeProto(
    request: DeepPartial<TogglePlanActModeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Boolean>;
  updateAutoApprovalSettings(
    request: DeepPartial<AutoApprovalSettingsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  updateSettings(request: DeepPartial<UpdateSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  updateTelemetrySetting(
    request: DeepPartial<TelemetrySettingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  setWelcomeViewCompleted(request: DeepPartial<BooleanRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
