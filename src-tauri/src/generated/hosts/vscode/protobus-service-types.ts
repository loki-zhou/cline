// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts\generate-protobus-setup.mjs
import * as proto from "@shared/proto/index"
import { Controller } from "@core/controller"
import { StreamingResponseHandler } from "@/core/controller/grpc-handler"

// Account Service Handler Types
export type AccountServiceHandlers = {
     accountLoginClicked:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.String>
     accountLogoutClicked:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
     subscribeToAuthStatusUpdate:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.AuthState>, requestId?: string) => Promise<void>
     authStateChanged:(controller: Controller, request: proto.cline.AuthStateChangedRequest) => Promise<proto.cline.AuthState>
     getUserCredits:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.UserCreditsData>
     getOrganizationCredits:(controller: Controller, request: proto.cline.GetOrganizationCreditsRequest) => Promise<proto.cline.OrganizationCreditsData>
     getUserOrganizations:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.UserOrganizationsResponse>
     setUserOrganization:(controller: Controller, request: proto.cline.UserOrganizationUpdateRequest) => Promise<proto.cline.Empty>
     openrouterAuthClicked:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
}

// Browser Service Handler Types
export type BrowserServiceHandlers = {
     getBrowserConnectionInfo:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.BrowserConnectionInfo>
     testBrowserConnection:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.BrowserConnection>
     discoverBrowser:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.BrowserConnection>
     getDetectedChromePath:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.ChromePath>
     updateBrowserSettings:(controller: Controller, request: proto.cline.UpdateBrowserSettingsRequest) => Promise<proto.cline.Boolean>
     relaunchChromeDebugMode:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.String>
}

// Checkpoints Service Handler Types
export type CheckpointsServiceHandlers = {
     checkpointDiff:(controller: Controller, request: proto.cline.Int64Request) => Promise<proto.cline.Empty>
     checkpointRestore:(controller: Controller, request: proto.cline.CheckpointRestoreRequest) => Promise<proto.cline.Empty>
}

// Commands Service Handler Types
export type CommandsServiceHandlers = {
     addToCline:(controller: Controller, request: proto.cline.CommandContext) => Promise<proto.cline.Empty>
     fixWithCline:(controller: Controller, request: proto.cline.CommandContext) => Promise<proto.cline.Empty>
     explainWithCline:(controller: Controller, request: proto.cline.CommandContext) => Promise<proto.cline.Empty>
     improveWithCline:(controller: Controller, request: proto.cline.CommandContext) => Promise<proto.cline.Empty>
}

// File Service Handler Types
export type FileServiceHandlers = {
     copyToClipboard:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     openFile:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     openImage:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     openMention:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     deleteRuleFile:(controller: Controller, request: proto.cline.RuleFileRequest) => Promise<proto.cline.RuleFile>
     createRuleFile:(controller: Controller, request: proto.cline.RuleFileRequest) => Promise<proto.cline.RuleFile>
     searchCommits:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.GitCommits>
     selectFiles:(controller: Controller, request: proto.cline.BooleanRequest) => Promise<proto.cline.StringArrays>
     getRelativePaths:(controller: Controller, request: proto.cline.RelativePathsRequest) => Promise<proto.cline.RelativePaths>
     searchFiles:(controller: Controller, request: proto.cline.FileSearchRequest) => Promise<proto.cline.FileSearchResults>
     toggleClineRule:(controller: Controller, request: proto.cline.ToggleClineRuleRequest) => Promise<proto.cline.ToggleClineRules>
     toggleCursorRule:(controller: Controller, request: proto.cline.ToggleCursorRuleRequest) => Promise<proto.cline.ClineRulesToggles>
     toggleWindsurfRule:(controller: Controller, request: proto.cline.ToggleWindsurfRuleRequest) => Promise<proto.cline.ClineRulesToggles>
     refreshRules:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.RefreshedRules>
     openTaskHistory:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     toggleWorkflow:(controller: Controller, request: proto.cline.ToggleWorkflowRequest) => Promise<proto.cline.ClineRulesToggles>
     ifFileExistsRelativePath:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.BooleanResponse>
     openFileRelativePath:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     openFocusChainFile:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
}

// Mcp Service Handler Types
export type McpServiceHandlers = {
     toggleMcpServer:(controller: Controller, request: proto.cline.ToggleMcpServerRequest) => Promise<proto.cline.McpServers>
     updateMcpTimeout:(controller: Controller, request: proto.cline.UpdateMcpTimeoutRequest) => Promise<proto.cline.McpServers>
     addRemoteMcpServer:(controller: Controller, request: proto.cline.AddRemoteMcpServerRequest) => Promise<proto.cline.McpServers>
     downloadMcp:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.McpDownloadResponse>
     restartMcpServer:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.McpServers>
     deleteMcpServer:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.McpServers>
     toggleToolAutoApprove:(controller: Controller, request: proto.cline.ToggleToolAutoApproveRequest) => Promise<proto.cline.McpServers>
     refreshMcpMarketplace:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.McpMarketplaceCatalog>
     openMcpSettings:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
     subscribeToMcpMarketplaceCatalog:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.McpMarketplaceCatalog>, requestId?: string) => Promise<void>
     getLatestMcpServers:(controller: Controller, request: proto.cline.Empty) => Promise<proto.cline.McpServers>
     subscribeToMcpServers:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.McpServers>, requestId?: string) => Promise<void>
}

// Models Service Handler Types
export type ModelsServiceHandlers = {
     getOllamaModels:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.StringArray>
     getLmStudioModels:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.StringArray>
     getVsCodeLmModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.VsCodeLmModelsArray>
     refreshOpenRouterModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.OpenRouterCompatibleModelInfo>
     refreshHuggingFaceModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.OpenRouterCompatibleModelInfo>
     refreshOpenAiModels:(controller: Controller, request: proto.cline.OpenAiModelsRequest) => Promise<proto.cline.StringArray>
     refreshRequestyModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.OpenRouterCompatibleModelInfo>
     subscribeToOpenRouterModels:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.OpenRouterCompatibleModelInfo>, requestId?: string) => Promise<void>
     updateApiConfigurationProto:(controller: Controller, request: proto.cline.UpdateApiConfigurationRequest) => Promise<proto.cline.Empty>
     refreshGroqModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.OpenRouterCompatibleModelInfo>
     refreshBasetenModels:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.OpenRouterCompatibleModelInfo>
}

// Slash Service Handler Types
export type SlashServiceHandlers = {
     reportBug:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     condense:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
}

// State Service Handler Types
export type StateServiceHandlers = {
     getLatestState:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.State>
     updateTerminalConnectionTimeout:(controller: Controller, request: proto.cline.UpdateTerminalConnectionTimeoutRequest) => Promise<proto.cline.UpdateTerminalConnectionTimeoutResponse>
     updateTerminalReuseEnabled:(controller: Controller, request: proto.cline.BooleanRequest) => Promise<proto.cline.Empty>
     updateDefaultTerminalProfile:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.TerminalProfileUpdateResponse>
     getAvailableTerminalProfiles:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.TerminalProfiles>
     subscribeToState:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.State>, requestId?: string) => Promise<void>
     toggleFavoriteModel:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     resetState:(controller: Controller, request: proto.cline.ResetStateRequest) => Promise<proto.cline.Empty>
     togglePlanActModeProto:(controller: Controller, request: proto.cline.TogglePlanActModeRequest) => Promise<proto.cline.Boolean>
     updateAutoApprovalSettings:(controller: Controller, request: proto.cline.AutoApprovalSettingsRequest) => Promise<proto.cline.Empty>
     updateSettings:(controller: Controller, request: proto.cline.UpdateSettingsRequest) => Promise<proto.cline.Empty>
     updateTelemetrySetting:(controller: Controller, request: proto.cline.TelemetrySettingRequest) => Promise<proto.cline.Empty>
     setWelcomeViewCompleted:(controller: Controller, request: proto.cline.BooleanRequest) => Promise<proto.cline.Empty>
}

// Task Service Handler Types
export type TaskServiceHandlers = {
     cancelTask:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
     clearTask:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
     getTotalTasksSize:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Int64>
     deleteTasksWithIds:(controller: Controller, request: proto.cline.StringArrayRequest) => Promise<proto.cline.Empty>
     newTask:(controller: Controller, request: proto.cline.NewTaskRequest) => Promise<proto.cline.Empty>
     showTaskWithId:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.TaskResponse>
     exportTaskWithId:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     toggleTaskFavorite:(controller: Controller, request: proto.cline.TaskFavoriteRequest) => Promise<proto.cline.Empty>
     getTaskHistory:(controller: Controller, request: proto.cline.GetTaskHistoryRequest) => Promise<proto.cline.TaskHistoryArray>
     askResponse:(controller: Controller, request: proto.cline.AskResponseRequest) => Promise<proto.cline.Empty>
     taskFeedback:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     taskCompletionViewChanges:(controller: Controller, request: proto.cline.Int64Request) => Promise<proto.cline.Empty>
     executeQuickWin:(controller: Controller, request: proto.cline.ExecuteQuickWinRequest) => Promise<proto.cline.Empty>
     deleteAllTaskHistory:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.DeleteAllTaskHistoryCount>
}

// Ui Service Handler Types
export type UiServiceHandlers = {
     scrollToSettings:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.KeyValuePair>
     onDidShowAnnouncement:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Boolean>
     subscribeToAddToInput:(controller: Controller, request: proto.cline.StringRequest, responseStream: StreamingResponseHandler<proto.cline.String>, requestId?: string) => Promise<void>
     subscribeToMcpButtonClicked:(controller: Controller, request: proto.cline.WebviewProviderTypeRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToHistoryButtonClicked:(controller: Controller, request: proto.cline.WebviewProviderTypeRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToChatButtonClicked:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToAccountButtonClicked:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToSettingsButtonClicked:(controller: Controller, request: proto.cline.WebviewProviderTypeRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToPartialMessage:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.ClineMessage>, requestId?: string) => Promise<void>
     subscribeToTheme:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.String>, requestId?: string) => Promise<void>
     initializeWebview:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
     subscribeToRelinquishControl:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToFocusChatInput:(controller: Controller, request: proto.cline.StringRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     subscribeToDidBecomeVisible:(controller: Controller, request: proto.cline.EmptyRequest, responseStream: StreamingResponseHandler<proto.cline.Empty>, requestId?: string) => Promise<void>
     getWebviewHtml:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.String>
     openUrl:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
     openWalkthrough:(controller: Controller, request: proto.cline.EmptyRequest) => Promise<proto.cline.Empty>
}

// Web Service Handler Types
export type WebServiceHandlers = {
     checkIsImageUrl:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.IsImageUrl>
     fetchOpenGraphData:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.OpenGraphData>
     openInBrowser:(controller: Controller, request: proto.cline.StringRequest) => Promise<proto.cline.Empty>
}

