// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts\generate-protobus-setup.mjs
import * as serviceTypes from "src/generated/hosts/vscode/protobus-service-types"

// Account Service
import { accountLoginClicked } from "@core/controller/account/accountLoginClicked"
import { accountLogoutClicked } from "@core/controller/account/accountLogoutClicked"
import { subscribeToAuthStatusUpdate } from "@core/controller/account/subscribeToAuthStatusUpdate"
import { authStateChanged } from "@core/controller/account/authStateChanged"
import { getUserCredits } from "@core/controller/account/getUserCredits"
import { getOrganizationCredits } from "@core/controller/account/getOrganizationCredits"
import { getUserOrganizations } from "@core/controller/account/getUserOrganizations"
import { setUserOrganization } from "@core/controller/account/setUserOrganization"
import { openrouterAuthClicked } from "@core/controller/account/openrouterAuthClicked"

// Browser Service
import { getBrowserConnectionInfo } from "@core/controller/browser/getBrowserConnectionInfo"
import { testBrowserConnection } from "@core/controller/browser/testBrowserConnection"
import { discoverBrowser } from "@core/controller/browser/discoverBrowser"
import { getDetectedChromePath } from "@core/controller/browser/getDetectedChromePath"
import { updateBrowserSettings } from "@core/controller/browser/updateBrowserSettings"
import { relaunchChromeDebugMode } from "@core/controller/browser/relaunchChromeDebugMode"

// Checkpoints Service
import { checkpointDiff } from "@core/controller/checkpoints/checkpointDiff"
import { checkpointRestore } from "@core/controller/checkpoints/checkpointRestore"

// Commands Service
import { addToCline } from "@core/controller/commands/addToCline"
import { fixWithCline } from "@core/controller/commands/fixWithCline"
import { explainWithCline } from "@core/controller/commands/explainWithCline"
import { improveWithCline } from "@core/controller/commands/improveWithCline"

// File Service
import { copyToClipboard } from "@core/controller/file/copyToClipboard"
import { openFile } from "@core/controller/file/openFile"
import { openImage } from "@core/controller/file/openImage"
import { openMention } from "@core/controller/file/openMention"
import { deleteRuleFile } from "@core/controller/file/deleteRuleFile"
import { createRuleFile } from "@core/controller/file/createRuleFile"
import { searchCommits } from "@core/controller/file/searchCommits"
import { selectFiles } from "@core/controller/file/selectFiles"
import { getRelativePaths } from "@core/controller/file/getRelativePaths"
import { searchFiles } from "@core/controller/file/searchFiles"
import { toggleClineRule } from "@core/controller/file/toggleClineRule"
import { toggleCursorRule } from "@core/controller/file/toggleCursorRule"
import { toggleWindsurfRule } from "@core/controller/file/toggleWindsurfRule"
import { refreshRules } from "@core/controller/file/refreshRules"
import { openTaskHistory } from "@core/controller/file/openTaskHistory"
import { toggleWorkflow } from "@core/controller/file/toggleWorkflow"
import { ifFileExistsRelativePath } from "@core/controller/file/ifFileExistsRelativePath"
import { openFileRelativePath } from "@core/controller/file/openFileRelativePath"
import { openFocusChainFile } from "@core/controller/file/openFocusChainFile"

// Mcp Service
import { toggleMcpServer } from "@core/controller/mcp/toggleMcpServer"
import { updateMcpTimeout } from "@core/controller/mcp/updateMcpTimeout"
import { addRemoteMcpServer } from "@core/controller/mcp/addRemoteMcpServer"
import { downloadMcp } from "@core/controller/mcp/downloadMcp"
import { restartMcpServer } from "@core/controller/mcp/restartMcpServer"
import { deleteMcpServer } from "@core/controller/mcp/deleteMcpServer"
import { toggleToolAutoApprove } from "@core/controller/mcp/toggleToolAutoApprove"
import { refreshMcpMarketplace } from "@core/controller/mcp/refreshMcpMarketplace"
import { openMcpSettings } from "@core/controller/mcp/openMcpSettings"
import { subscribeToMcpMarketplaceCatalog } from "@core/controller/mcp/subscribeToMcpMarketplaceCatalog"
import { getLatestMcpServers } from "@core/controller/mcp/getLatestMcpServers"
import { subscribeToMcpServers } from "@core/controller/mcp/subscribeToMcpServers"

// Models Service
import { getOllamaModels } from "@core/controller/models/getOllamaModels"
import { getLmStudioModels } from "@core/controller/models/getLmStudioModels"
import { getVsCodeLmModels } from "@core/controller/models/getVsCodeLmModels"
import { refreshOpenRouterModels } from "@core/controller/models/refreshOpenRouterModels"
import { refreshHuggingFaceModels } from "@core/controller/models/refreshHuggingFaceModels"
import { refreshOpenAiModels } from "@core/controller/models/refreshOpenAiModels"
import { refreshRequestyModels } from "@core/controller/models/refreshRequestyModels"
import { subscribeToOpenRouterModels } from "@core/controller/models/subscribeToOpenRouterModels"
import { updateApiConfigurationProto } from "@core/controller/models/updateApiConfigurationProto"
import { refreshGroqModels } from "@core/controller/models/refreshGroqModels"
import { refreshBasetenModels } from "@core/controller/models/refreshBasetenModels"

// Slash Service
import { reportBug } from "@core/controller/slash/reportBug"
import { condense } from "@core/controller/slash/condense"

// State Service
import { getLatestState } from "@core/controller/state/getLatestState"
import { updateTerminalConnectionTimeout } from "@core/controller/state/updateTerminalConnectionTimeout"
import { updateTerminalReuseEnabled } from "@core/controller/state/updateTerminalReuseEnabled"
import { updateDefaultTerminalProfile } from "@core/controller/state/updateDefaultTerminalProfile"
import { getAvailableTerminalProfiles } from "@core/controller/state/getAvailableTerminalProfiles"
import { subscribeToState } from "@core/controller/state/subscribeToState"
import { toggleFavoriteModel } from "@core/controller/state/toggleFavoriteModel"
import { resetState } from "@core/controller/state/resetState"
import { togglePlanActModeProto } from "@core/controller/state/togglePlanActModeProto"
import { updateAutoApprovalSettings } from "@core/controller/state/updateAutoApprovalSettings"
import { updateSettings } from "@core/controller/state/updateSettings"
import { updateTelemetrySetting } from "@core/controller/state/updateTelemetrySetting"
import { setWelcomeViewCompleted } from "@core/controller/state/setWelcomeViewCompleted"

// Task Service
import { cancelTask } from "@core/controller/task/cancelTask"
import { clearTask } from "@core/controller/task/clearTask"
import { getTotalTasksSize } from "@core/controller/task/getTotalTasksSize"
import { deleteTasksWithIds } from "@core/controller/task/deleteTasksWithIds"
import { newTask } from "@core/controller/task/newTask"
import { showTaskWithId } from "@core/controller/task/showTaskWithId"
import { exportTaskWithId } from "@core/controller/task/exportTaskWithId"
import { toggleTaskFavorite } from "@core/controller/task/toggleTaskFavorite"
import { getTaskHistory } from "@core/controller/task/getTaskHistory"
import { askResponse } from "@core/controller/task/askResponse"
import { taskFeedback } from "@core/controller/task/taskFeedback"
import { taskCompletionViewChanges } from "@core/controller/task/taskCompletionViewChanges"
import { executeQuickWin } from "@core/controller/task/executeQuickWin"
import { deleteAllTaskHistory } from "@core/controller/task/deleteAllTaskHistory"

// Ui Service
import { scrollToSettings } from "@core/controller/ui/scrollToSettings"
import { onDidShowAnnouncement } from "@core/controller/ui/onDidShowAnnouncement"
import { subscribeToAddToInput } from "@core/controller/ui/subscribeToAddToInput"
import { subscribeToMcpButtonClicked } from "@core/controller/ui/subscribeToMcpButtonClicked"
import { subscribeToHistoryButtonClicked } from "@core/controller/ui/subscribeToHistoryButtonClicked"
import { subscribeToChatButtonClicked } from "@core/controller/ui/subscribeToChatButtonClicked"
import { subscribeToAccountButtonClicked } from "@core/controller/ui/subscribeToAccountButtonClicked"
import { subscribeToSettingsButtonClicked } from "@core/controller/ui/subscribeToSettingsButtonClicked"
import { subscribeToPartialMessage } from "@core/controller/ui/subscribeToPartialMessage"
import { subscribeToTheme } from "@core/controller/ui/subscribeToTheme"
import { initializeWebview } from "@core/controller/ui/initializeWebview"
import { subscribeToRelinquishControl } from "@core/controller/ui/subscribeToRelinquishControl"
import { subscribeToFocusChatInput } from "@core/controller/ui/subscribeToFocusChatInput"
import { subscribeToDidBecomeVisible } from "@core/controller/ui/subscribeToDidBecomeVisible"
import { getWebviewHtml } from "@core/controller/ui/getWebviewHtml"
import { openUrl } from "@core/controller/ui/openUrl"
import { openWalkthrough } from "@core/controller/ui/openWalkthrough"

// Web Service
import { checkIsImageUrl } from "@core/controller/web/checkIsImageUrl"
import { fetchOpenGraphData } from "@core/controller/web/fetchOpenGraphData"
import { openInBrowser } from "@core/controller/web/openInBrowser"

const AccountServiceHandlers: serviceTypes.AccountServiceHandlers = {
    accountLoginClicked: accountLoginClicked,
    accountLogoutClicked: accountLogoutClicked,
    subscribeToAuthStatusUpdate: subscribeToAuthStatusUpdate,
    authStateChanged: authStateChanged,
    getUserCredits: getUserCredits,
    getOrganizationCredits: getOrganizationCredits,
    getUserOrganizations: getUserOrganizations,
    setUserOrganization: setUserOrganization,
    openrouterAuthClicked: openrouterAuthClicked,
} 

const BrowserServiceHandlers: serviceTypes.BrowserServiceHandlers = {
    getBrowserConnectionInfo: getBrowserConnectionInfo,
    testBrowserConnection: testBrowserConnection,
    discoverBrowser: discoverBrowser,
    getDetectedChromePath: getDetectedChromePath,
    updateBrowserSettings: updateBrowserSettings,
    relaunchChromeDebugMode: relaunchChromeDebugMode,
} 

const CheckpointsServiceHandlers: serviceTypes.CheckpointsServiceHandlers = {
    checkpointDiff: checkpointDiff,
    checkpointRestore: checkpointRestore,
} 

const CommandsServiceHandlers: serviceTypes.CommandsServiceHandlers = {
    addToCline: addToCline,
    fixWithCline: fixWithCline,
    explainWithCline: explainWithCline,
    improveWithCline: improveWithCline,
} 

const FileServiceHandlers: serviceTypes.FileServiceHandlers = {
    copyToClipboard: copyToClipboard,
    openFile: openFile,
    openImage: openImage,
    openMention: openMention,
    deleteRuleFile: deleteRuleFile,
    createRuleFile: createRuleFile,
    searchCommits: searchCommits,
    selectFiles: selectFiles,
    getRelativePaths: getRelativePaths,
    searchFiles: searchFiles,
    toggleClineRule: toggleClineRule,
    toggleCursorRule: toggleCursorRule,
    toggleWindsurfRule: toggleWindsurfRule,
    refreshRules: refreshRules,
    openTaskHistory: openTaskHistory,
    toggleWorkflow: toggleWorkflow,
    ifFileExistsRelativePath: ifFileExistsRelativePath,
    openFileRelativePath: openFileRelativePath,
    openFocusChainFile: openFocusChainFile,
} 

const McpServiceHandlers: serviceTypes.McpServiceHandlers = {
    toggleMcpServer: toggleMcpServer,
    updateMcpTimeout: updateMcpTimeout,
    addRemoteMcpServer: addRemoteMcpServer,
    downloadMcp: downloadMcp,
    restartMcpServer: restartMcpServer,
    deleteMcpServer: deleteMcpServer,
    toggleToolAutoApprove: toggleToolAutoApprove,
    refreshMcpMarketplace: refreshMcpMarketplace,
    openMcpSettings: openMcpSettings,
    subscribeToMcpMarketplaceCatalog: subscribeToMcpMarketplaceCatalog,
    getLatestMcpServers: getLatestMcpServers,
    subscribeToMcpServers: subscribeToMcpServers,
} 

const ModelsServiceHandlers: serviceTypes.ModelsServiceHandlers = {
    getOllamaModels: getOllamaModels,
    getLmStudioModels: getLmStudioModels,
    getVsCodeLmModels: getVsCodeLmModels,
    refreshOpenRouterModels: refreshOpenRouterModels,
    refreshHuggingFaceModels: refreshHuggingFaceModels,
    refreshOpenAiModels: refreshOpenAiModels,
    refreshRequestyModels: refreshRequestyModels,
    subscribeToOpenRouterModels: subscribeToOpenRouterModels,
    updateApiConfigurationProto: updateApiConfigurationProto,
    refreshGroqModels: refreshGroqModels,
    refreshBasetenModels: refreshBasetenModels,
} 

const SlashServiceHandlers: serviceTypes.SlashServiceHandlers = {
    reportBug: reportBug,
    condense: condense,
} 

const StateServiceHandlers: serviceTypes.StateServiceHandlers = {
    getLatestState: getLatestState,
    updateTerminalConnectionTimeout: updateTerminalConnectionTimeout,
    updateTerminalReuseEnabled: updateTerminalReuseEnabled,
    updateDefaultTerminalProfile: updateDefaultTerminalProfile,
    getAvailableTerminalProfiles: getAvailableTerminalProfiles,
    subscribeToState: subscribeToState,
    toggleFavoriteModel: toggleFavoriteModel,
    resetState: resetState,
    togglePlanActModeProto: togglePlanActModeProto,
    updateAutoApprovalSettings: updateAutoApprovalSettings,
    updateSettings: updateSettings,
    updateTelemetrySetting: updateTelemetrySetting,
    setWelcomeViewCompleted: setWelcomeViewCompleted,
} 

const TaskServiceHandlers: serviceTypes.TaskServiceHandlers = {
    cancelTask: cancelTask,
    clearTask: clearTask,
    getTotalTasksSize: getTotalTasksSize,
    deleteTasksWithIds: deleteTasksWithIds,
    newTask: newTask,
    showTaskWithId: showTaskWithId,
    exportTaskWithId: exportTaskWithId,
    toggleTaskFavorite: toggleTaskFavorite,
    getTaskHistory: getTaskHistory,
    askResponse: askResponse,
    taskFeedback: taskFeedback,
    taskCompletionViewChanges: taskCompletionViewChanges,
    executeQuickWin: executeQuickWin,
    deleteAllTaskHistory: deleteAllTaskHistory,
} 

const UiServiceHandlers: serviceTypes.UiServiceHandlers = {
    scrollToSettings: scrollToSettings,
    onDidShowAnnouncement: onDidShowAnnouncement,
    subscribeToAddToInput: subscribeToAddToInput,
    subscribeToMcpButtonClicked: subscribeToMcpButtonClicked,
    subscribeToHistoryButtonClicked: subscribeToHistoryButtonClicked,
    subscribeToChatButtonClicked: subscribeToChatButtonClicked,
    subscribeToAccountButtonClicked: subscribeToAccountButtonClicked,
    subscribeToSettingsButtonClicked: subscribeToSettingsButtonClicked,
    subscribeToPartialMessage: subscribeToPartialMessage,
    subscribeToTheme: subscribeToTheme,
    initializeWebview: initializeWebview,
    subscribeToRelinquishControl: subscribeToRelinquishControl,
    subscribeToFocusChatInput: subscribeToFocusChatInput,
    subscribeToDidBecomeVisible: subscribeToDidBecomeVisible,
    getWebviewHtml: getWebviewHtml,
    openUrl: openUrl,
    openWalkthrough: openWalkthrough,
} 

const WebServiceHandlers: serviceTypes.WebServiceHandlers = {
    checkIsImageUrl: checkIsImageUrl,
    fetchOpenGraphData: fetchOpenGraphData,
    openInBrowser: openInBrowser,
} 

export const serviceHandlers: Record<string, any> = {
    "cline.AccountService": AccountServiceHandlers,
    "cline.BrowserService": BrowserServiceHandlers,
    "cline.CheckpointsService": CheckpointsServiceHandlers,
    "cline.CommandsService": CommandsServiceHandlers,
    "cline.FileService": FileServiceHandlers,
    "cline.McpService": McpServiceHandlers,
    "cline.ModelsService": ModelsServiceHandlers,
    "cline.SlashService": SlashServiceHandlers,
    "cline.StateService": StateServiceHandlers,
    "cline.TaskService": TaskServiceHandlers,
    "cline.UiService": UiServiceHandlers,
    "cline.WebService": WebServiceHandlers,
}
