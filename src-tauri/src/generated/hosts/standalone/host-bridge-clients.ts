// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts/generate-host-bridge-client.mjs
import { asyncIteratorToCallbacks } from "@/standalone/utils"
import * as niceGrpc from "@generated/nice-grpc/index"
import { StreamingCallbacks } from "@hosts/host-provider-types"
import * as proto from "@shared/proto/index"
import { Channel, createClient } from "nice-grpc"
import { BaseGrpcClient } from "@/hosts/external/grpc-types"

import { DiffServiceClientInterface } from "@generated/hosts/host-bridge-client-types"
import { EnvServiceClientInterface } from "@generated/hosts/host-bridge-client-types"
import { TestingServiceClientInterface } from "@generated/hosts/host-bridge-client-types"
import { WatchServiceClientInterface } from "@generated/hosts/host-bridge-client-types"
import { WindowServiceClientInterface } from "@generated/hosts/host-bridge-client-types"
import { WorkspaceServiceClientInterface } from "@generated/hosts/host-bridge-client-types"

/**
 * Type-safe client implementation for DiffService.
 */
export class DiffServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.DiffServiceClient> 
	implements DiffServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.DiffServiceClient {
		return createClient(niceGrpc.host.DiffServiceDefinition, channel)
	}

    openDiff(request: proto.host.OpenDiffRequest): Promise<proto.host.OpenDiffResponse> {
      return this.makeRequest((client) => client.openDiff(request))
    }
    getDocumentText(request: proto.host.GetDocumentTextRequest): Promise<proto.host.GetDocumentTextResponse> {
      return this.makeRequest((client) => client.getDocumentText(request))
    }
    replaceText(request: proto.host.ReplaceTextRequest): Promise<proto.host.ReplaceTextResponse> {
      return this.makeRequest((client) => client.replaceText(request))
    }
    scrollDiff(request: proto.host.ScrollDiffRequest): Promise<proto.host.ScrollDiffResponse> {
      return this.makeRequest((client) => client.scrollDiff(request))
    }
    truncateDocument(request: proto.host.TruncateDocumentRequest): Promise<proto.host.TruncateDocumentResponse> {
      return this.makeRequest((client) => client.truncateDocument(request))
    }
    saveDocument(request: proto.host.SaveDocumentRequest): Promise<proto.host.SaveDocumentResponse> {
      return this.makeRequest((client) => client.saveDocument(request))
    }
    closeAllDiffs(request: proto.host.CloseAllDiffsRequest): Promise<proto.host.CloseAllDiffsResponse> {
      return this.makeRequest((client) => client.closeAllDiffs(request))
    }
    openMultiFileDiff(request: proto.host.OpenMultiFileDiffRequest): Promise<proto.host.OpenMultiFileDiffResponse> {
      return this.makeRequest((client) => client.openMultiFileDiff(request))
    }
}

/**
 * Type-safe client implementation for EnvService.
 */
export class EnvServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.EnvServiceClient> 
	implements EnvServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.EnvServiceClient {
		return createClient(niceGrpc.host.EnvServiceDefinition, channel)
	}

    clipboardWriteText(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
      return this.makeRequest((client) => client.clipboardWriteText(request))
    }
    clipboardReadText(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
      return this.makeRequest((client) => client.clipboardReadText(request))
    }
    getMachineId(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
      return this.makeRequest((client) => client.getMachineId(request))
    }
    getHostVersion(request: proto.cline.EmptyRequest): Promise<proto.host.GetHostVersionResponse> {
      return this.makeRequest((client) => client.getHostVersion(request))
    }
}

/**
 * Type-safe client implementation for TestingService.
 */
export class TestingServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.TestingServiceClient> 
	implements TestingServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.TestingServiceClient {
		return createClient(niceGrpc.host.TestingServiceDefinition, channel)
	}

    getWebviewHtml(request: proto.host.GetWebviewHtmlRequest): Promise<proto.host.GetWebviewHtmlResponse> {
      return this.makeRequest((client) => client.getWebviewHtml(request))
    }
}

/**
 * Type-safe client implementation for WatchService.
 */
export class WatchServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.WatchServiceClient> 
	implements WatchServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.WatchServiceClient {
		return createClient(niceGrpc.host.WatchServiceDefinition, channel)
	}

  subscribeToFile(
		request: proto.host.SubscribeToFileRequest,
		callbacks: StreamingCallbacks<proto.host.FileChangeEvent>,
	): () => void {
		const client = this.getClient()
		const abortController = new AbortController()
		const stream: AsyncIterable<proto.host.FileChangeEvent> = client.subscribeToFile(request, {
			signal: abortController.signal,
		})
		const wrappedCallbacks: StreamingCallbacks<proto.host.FileChangeEvent> = {
			...callbacks,
			onError: (error: any) => {
				if (error?.code === "UNAVAILABLE") {
					this.destroyClient()
				}
				callbacks.onError?.(error)
			},
		}
		asyncIteratorToCallbacks(stream, wrappedCallbacks)
		return () => {
			abortController.abort()
		}
	}

}

/**
 * Type-safe client implementation for WindowService.
 */
export class WindowServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.WindowServiceClient> 
	implements WindowServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.WindowServiceClient {
		return createClient(niceGrpc.host.WindowServiceDefinition, channel)
	}

    showTextDocument(request: proto.host.ShowTextDocumentRequest): Promise<proto.host.TextEditorInfo> {
      return this.makeRequest((client) => client.showTextDocument(request))
    }
    showOpenDialogue(request: proto.host.ShowOpenDialogueRequest): Promise<proto.host.SelectedResources> {
      return this.makeRequest((client) => client.showOpenDialogue(request))
    }
    showMessage(request: proto.host.ShowMessageRequest): Promise<proto.host.SelectedResponse> {
      return this.makeRequest((client) => client.showMessage(request))
    }
    showInputBox(request: proto.host.ShowInputBoxRequest): Promise<proto.host.ShowInputBoxResponse> {
      return this.makeRequest((client) => client.showInputBox(request))
    }
    showSaveDialog(request: proto.host.ShowSaveDialogRequest): Promise<proto.host.ShowSaveDialogResponse> {
      return this.makeRequest((client) => client.showSaveDialog(request))
    }
    openFile(request: proto.host.OpenFileRequest): Promise<proto.host.OpenFileResponse> {
      return this.makeRequest((client) => client.openFile(request))
    }
    getOpenTabs(request: proto.host.GetOpenTabsRequest): Promise<proto.host.GetOpenTabsResponse> {
      return this.makeRequest((client) => client.getOpenTabs(request))
    }
    getVisibleTabs(request: proto.host.GetVisibleTabsRequest): Promise<proto.host.GetVisibleTabsResponse> {
      return this.makeRequest((client) => client.getVisibleTabs(request))
    }
    getActiveEditor(request: proto.host.GetActiveEditorRequest): Promise<proto.host.GetActiveEditorResponse> {
      return this.makeRequest((client) => client.getActiveEditor(request))
    }
}

/**
 * Type-safe client implementation for WorkspaceService.
 */
export class WorkspaceServiceClientImpl 
	extends BaseGrpcClient<niceGrpc.host.WorkspaceServiceClient> 
	implements WorkspaceServiceClientInterface {

	protected createClient(channel: Channel): niceGrpc.host.WorkspaceServiceClient {
		return createClient(niceGrpc.host.WorkspaceServiceDefinition, channel)
	}

    getWorkspacePaths(request: proto.host.GetWorkspacePathsRequest): Promise<proto.host.GetWorkspacePathsResponse> {
      return this.makeRequest((client) => client.getWorkspacePaths(request))
    }
    saveOpenDocumentIfDirty(request: proto.host.SaveOpenDocumentIfDirtyRequest): Promise<proto.host.SaveOpenDocumentIfDirtyResponse> {
      return this.makeRequest((client) => client.saveOpenDocumentIfDirty(request))
    }
    getDiagnostics(request: proto.host.GetDiagnosticsRequest): Promise<proto.host.GetDiagnosticsResponse> {
      return this.makeRequest((client) => client.getDiagnostics(request))
    }
    openProblemsPanel(request: proto.host.OpenProblemsPanelRequest): Promise<proto.host.OpenProblemsPanelResponse> {
      return this.makeRequest((client) => client.openProblemsPanel(request))
    }
}
