// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts\generate-protobus-setup.mjs
import * as proto from "@shared/proto/index"
import { Callbacks, ProtoBusClient } from "./grpc-client-base"

export class AccountServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.AccountService"
	static async accountLoginClicked(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return AccountServiceClient.makeUnaryRequest(
			"accountLoginClicked",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.String.fromJSON,
		)
	}
	static async accountLogoutClicked(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return AccountServiceClient.makeUnaryRequest(
			"accountLogoutClicked",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static subscribeToAuthStatusUpdate(
		request: proto.cline.EmptyRequest,
		callbacks: Callbacks<proto.cline.AuthState>,
	): () => void {
		return AccountServiceClient.makeStreamingRequest(
			"subscribeToAuthStatusUpdate",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.AuthState.fromJSON,
			callbacks,
		)
	}
	static async authStateChanged(request: proto.cline.AuthStateChangedRequest): Promise<proto.cline.AuthState> {
		return AccountServiceClient.makeUnaryRequest(
			"authStateChanged",
			request,
			proto.cline.AuthStateChangedRequest.toJSON,
			proto.cline.AuthState.fromJSON,
		)
	}
	static async getUserCredits(request: proto.cline.EmptyRequest): Promise<proto.cline.UserCreditsData> {
		return AccountServiceClient.makeUnaryRequest(
			"getUserCredits",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.UserCreditsData.fromJSON,
		)
	}
	static async getOrganizationCredits(
		request: proto.cline.GetOrganizationCreditsRequest,
	): Promise<proto.cline.OrganizationCreditsData> {
		return AccountServiceClient.makeUnaryRequest(
			"getOrganizationCredits",
			request,
			proto.cline.GetOrganizationCreditsRequest.toJSON,
			proto.cline.OrganizationCreditsData.fromJSON,
		)
	}
	static async getUserOrganizations(request: proto.cline.EmptyRequest): Promise<proto.cline.UserOrganizationsResponse> {
		return AccountServiceClient.makeUnaryRequest(
			"getUserOrganizations",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.UserOrganizationsResponse.fromJSON,
		)
	}
	static async setUserOrganization(request: proto.cline.UserOrganizationUpdateRequest): Promise<proto.cline.Empty> {
		return AccountServiceClient.makeUnaryRequest(
			"setUserOrganization",
			request,
			proto.cline.UserOrganizationUpdateRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async openrouterAuthClicked(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return AccountServiceClient.makeUnaryRequest(
			"openrouterAuthClicked",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class BrowserServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.BrowserService"
	static async getBrowserConnectionInfo(request: proto.cline.EmptyRequest): Promise<proto.cline.BrowserConnectionInfo> {
		return BrowserServiceClient.makeUnaryRequest(
			"getBrowserConnectionInfo",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.BrowserConnectionInfo.fromJSON,
		)
	}
	static async testBrowserConnection(request: proto.cline.StringRequest): Promise<proto.cline.BrowserConnection> {
		return BrowserServiceClient.makeUnaryRequest(
			"testBrowserConnection",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.BrowserConnection.fromJSON,
		)
	}
	static async discoverBrowser(request: proto.cline.EmptyRequest): Promise<proto.cline.BrowserConnection> {
		return BrowserServiceClient.makeUnaryRequest(
			"discoverBrowser",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.BrowserConnection.fromJSON,
		)
	}
	static async getDetectedChromePath(request: proto.cline.EmptyRequest): Promise<proto.cline.ChromePath> {
		return BrowserServiceClient.makeUnaryRequest(
			"getDetectedChromePath",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.ChromePath.fromJSON,
		)
	}
	static async updateBrowserSettings(request: proto.cline.UpdateBrowserSettingsRequest): Promise<proto.cline.Boolean> {
		return BrowserServiceClient.makeUnaryRequest(
			"updateBrowserSettings",
			request,
			proto.cline.UpdateBrowserSettingsRequest.toJSON,
			proto.cline.Boolean.fromJSON,
		)
	}
	static async relaunchChromeDebugMode(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return BrowserServiceClient.makeUnaryRequest(
			"relaunchChromeDebugMode",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.String.fromJSON,
		)
	}
}
export class CheckpointsServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.CheckpointsService"
	static async checkpointDiff(request: proto.cline.Int64Request): Promise<proto.cline.Empty> {
		return CheckpointsServiceClient.makeUnaryRequest(
			"checkpointDiff",
			request,
			proto.cline.Int64Request.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async checkpointRestore(request: proto.cline.CheckpointRestoreRequest): Promise<proto.cline.Empty> {
		return CheckpointsServiceClient.makeUnaryRequest(
			"checkpointRestore",
			request,
			proto.cline.CheckpointRestoreRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class CommandsServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.CommandsService"
	static async addToCline(request: proto.cline.CommandContext): Promise<proto.cline.Empty> {
		return CommandsServiceClient.makeUnaryRequest(
			"addToCline",
			request,
			proto.cline.CommandContext.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async fixWithCline(request: proto.cline.CommandContext): Promise<proto.cline.Empty> {
		return CommandsServiceClient.makeUnaryRequest(
			"fixWithCline",
			request,
			proto.cline.CommandContext.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async explainWithCline(request: proto.cline.CommandContext): Promise<proto.cline.Empty> {
		return CommandsServiceClient.makeUnaryRequest(
			"explainWithCline",
			request,
			proto.cline.CommandContext.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async improveWithCline(request: proto.cline.CommandContext): Promise<proto.cline.Empty> {
		return CommandsServiceClient.makeUnaryRequest(
			"improveWithCline",
			request,
			proto.cline.CommandContext.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class FileServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.FileService"
	static async copyToClipboard(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"copyToClipboard",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async openFile(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openFile",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async openImage(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openImage",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async openMention(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openMention",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async deleteRuleFile(request: proto.cline.RuleFileRequest): Promise<proto.cline.RuleFile> {
		return FileServiceClient.makeUnaryRequest(
			"deleteRuleFile",
			request,
			proto.cline.RuleFileRequest.toJSON,
			proto.cline.RuleFile.fromJSON,
		)
	}
	static async createRuleFile(request: proto.cline.RuleFileRequest): Promise<proto.cline.RuleFile> {
		return FileServiceClient.makeUnaryRequest(
			"createRuleFile",
			request,
			proto.cline.RuleFileRequest.toJSON,
			proto.cline.RuleFile.fromJSON,
		)
	}
	static async searchCommits(request: proto.cline.StringRequest): Promise<proto.cline.GitCommits> {
		return FileServiceClient.makeUnaryRequest(
			"searchCommits",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.GitCommits.fromJSON,
		)
	}
	static async selectFiles(request: proto.cline.BooleanRequest): Promise<proto.cline.StringArrays> {
		return FileServiceClient.makeUnaryRequest(
			"selectFiles",
			request,
			proto.cline.BooleanRequest.toJSON,
			proto.cline.StringArrays.fromJSON,
		)
	}
	static async getRelativePaths(request: proto.cline.RelativePathsRequest): Promise<proto.cline.RelativePaths> {
		return FileServiceClient.makeUnaryRequest(
			"getRelativePaths",
			request,
			proto.cline.RelativePathsRequest.toJSON,
			proto.cline.RelativePaths.fromJSON,
		)
	}
	static async searchFiles(request: proto.cline.FileSearchRequest): Promise<proto.cline.FileSearchResults> {
		return FileServiceClient.makeUnaryRequest(
			"searchFiles",
			request,
			proto.cline.FileSearchRequest.toJSON,
			proto.cline.FileSearchResults.fromJSON,
		)
	}
	static async toggleClineRule(request: proto.cline.ToggleClineRuleRequest): Promise<proto.cline.ToggleClineRules> {
		return FileServiceClient.makeUnaryRequest(
			"toggleClineRule",
			request,
			proto.cline.ToggleClineRuleRequest.toJSON,
			proto.cline.ToggleClineRules.fromJSON,
		)
	}
	static async toggleCursorRule(request: proto.cline.ToggleCursorRuleRequest): Promise<proto.cline.ClineRulesToggles> {
		return FileServiceClient.makeUnaryRequest(
			"toggleCursorRule",
			request,
			proto.cline.ToggleCursorRuleRequest.toJSON,
			proto.cline.ClineRulesToggles.fromJSON,
		)
	}
	static async toggleWindsurfRule(request: proto.cline.ToggleWindsurfRuleRequest): Promise<proto.cline.ClineRulesToggles> {
		return FileServiceClient.makeUnaryRequest(
			"toggleWindsurfRule",
			request,
			proto.cline.ToggleWindsurfRuleRequest.toJSON,
			proto.cline.ClineRulesToggles.fromJSON,
		)
	}
	static async refreshRules(request: proto.cline.EmptyRequest): Promise<proto.cline.RefreshedRules> {
		return FileServiceClient.makeUnaryRequest(
			"refreshRules",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.RefreshedRules.fromJSON,
		)
	}
	static async openTaskHistory(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openTaskHistory",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async toggleWorkflow(request: proto.cline.ToggleWorkflowRequest): Promise<proto.cline.ClineRulesToggles> {
		return FileServiceClient.makeUnaryRequest(
			"toggleWorkflow",
			request,
			proto.cline.ToggleWorkflowRequest.toJSON,
			proto.cline.ClineRulesToggles.fromJSON,
		)
	}
	static async ifFileExistsRelativePath(request: proto.cline.StringRequest): Promise<proto.cline.BooleanResponse> {
		return FileServiceClient.makeUnaryRequest(
			"ifFileExistsRelativePath",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.BooleanResponse.fromJSON,
		)
	}
	static async openFileRelativePath(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openFileRelativePath",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async openFocusChainFile(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return FileServiceClient.makeUnaryRequest(
			"openFocusChainFile",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class McpServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.McpService"
	static async toggleMcpServer(request: proto.cline.ToggleMcpServerRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"toggleMcpServer",
			request,
			proto.cline.ToggleMcpServerRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async updateMcpTimeout(request: proto.cline.UpdateMcpTimeoutRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"updateMcpTimeout",
			request,
			proto.cline.UpdateMcpTimeoutRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async addRemoteMcpServer(request: proto.cline.AddRemoteMcpServerRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"addRemoteMcpServer",
			request,
			proto.cline.AddRemoteMcpServerRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async downloadMcp(request: proto.cline.StringRequest): Promise<proto.cline.McpDownloadResponse> {
		return McpServiceClient.makeUnaryRequest(
			"downloadMcp",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.McpDownloadResponse.fromJSON,
		)
	}
	static async restartMcpServer(request: proto.cline.StringRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"restartMcpServer",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async deleteMcpServer(request: proto.cline.StringRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"deleteMcpServer",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async toggleToolAutoApprove(request: proto.cline.ToggleToolAutoApproveRequest): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"toggleToolAutoApprove",
			request,
			proto.cline.ToggleToolAutoApproveRequest.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static async refreshMcpMarketplace(request: proto.cline.EmptyRequest): Promise<proto.cline.McpMarketplaceCatalog> {
		return McpServiceClient.makeUnaryRequest(
			"refreshMcpMarketplace",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.McpMarketplaceCatalog.fromJSON,
		)
	}
	static async openMcpSettings(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return McpServiceClient.makeUnaryRequest(
			"openMcpSettings",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static subscribeToMcpMarketplaceCatalog(
		request: proto.cline.EmptyRequest,
		callbacks: Callbacks<proto.cline.McpMarketplaceCatalog>,
	): () => void {
		return McpServiceClient.makeStreamingRequest(
			"subscribeToMcpMarketplaceCatalog",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.McpMarketplaceCatalog.fromJSON,
			callbacks,
		)
	}
	static async getLatestMcpServers(request: proto.cline.Empty): Promise<proto.cline.McpServers> {
		return McpServiceClient.makeUnaryRequest(
			"getLatestMcpServers",
			request,
			proto.cline.Empty.toJSON,
			proto.cline.McpServers.fromJSON,
		)
	}
	static subscribeToMcpServers(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.McpServers>): () => void {
		return McpServiceClient.makeStreamingRequest(
			"subscribeToMcpServers",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.McpServers.fromJSON,
			callbacks,
		)
	}
}
export class ModelsServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.ModelsService"
	static async getOllamaModels(request: proto.cline.StringRequest): Promise<proto.cline.StringArray> {
		return ModelsServiceClient.makeUnaryRequest(
			"getOllamaModels",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.StringArray.fromJSON,
		)
	}
	static async getLmStudioModels(request: proto.cline.StringRequest): Promise<proto.cline.StringArray> {
		return ModelsServiceClient.makeUnaryRequest(
			"getLmStudioModels",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.StringArray.fromJSON,
		)
	}
	static async getVsCodeLmModels(request: proto.cline.EmptyRequest): Promise<proto.cline.VsCodeLmModelsArray> {
		return ModelsServiceClient.makeUnaryRequest(
			"getVsCodeLmModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.VsCodeLmModelsArray.fromJSON,
		)
	}
	static async refreshOpenRouterModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshOpenRouterModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
		)
	}
	static async refreshHuggingFaceModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshHuggingFaceModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
		)
	}
	static async refreshOpenAiModels(request: proto.cline.OpenAiModelsRequest): Promise<proto.cline.StringArray> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshOpenAiModels",
			request,
			proto.cline.OpenAiModelsRequest.toJSON,
			proto.cline.StringArray.fromJSON,
		)
	}
	static async refreshRequestyModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshRequestyModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
		)
	}
	static subscribeToOpenRouterModels(
		request: proto.cline.EmptyRequest,
		callbacks: Callbacks<proto.cline.OpenRouterCompatibleModelInfo>,
	): () => void {
		return ModelsServiceClient.makeStreamingRequest(
			"subscribeToOpenRouterModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
			callbacks,
		)
	}
	static async updateApiConfigurationProto(request: proto.cline.UpdateApiConfigurationRequest): Promise<proto.cline.Empty> {
		return ModelsServiceClient.makeUnaryRequest(
			"updateApiConfigurationProto",
			request,
			proto.cline.UpdateApiConfigurationRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async refreshGroqModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshGroqModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
		)
	}
	static async refreshBasetenModels(request: proto.cline.EmptyRequest): Promise<proto.cline.OpenRouterCompatibleModelInfo> {
		return ModelsServiceClient.makeUnaryRequest(
			"refreshBasetenModels",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.OpenRouterCompatibleModelInfo.fromJSON,
		)
	}
}
export class SlashServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.SlashService"
	static async reportBug(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return SlashServiceClient.makeUnaryRequest(
			"reportBug",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async condense(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return SlashServiceClient.makeUnaryRequest(
			"condense",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class StateServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.StateService"
	static async getLatestState(request: proto.cline.EmptyRequest): Promise<proto.cline.State> {
		return StateServiceClient.makeUnaryRequest(
			"getLatestState",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.State.fromJSON,
		)
	}
	static async updateTerminalConnectionTimeout(
		request: proto.cline.UpdateTerminalConnectionTimeoutRequest,
	): Promise<proto.cline.UpdateTerminalConnectionTimeoutResponse> {
		return StateServiceClient.makeUnaryRequest(
			"updateTerminalConnectionTimeout",
			request,
			proto.cline.UpdateTerminalConnectionTimeoutRequest.toJSON,
			proto.cline.UpdateTerminalConnectionTimeoutResponse.fromJSON,
		)
	}
	static async updateTerminalReuseEnabled(request: proto.cline.BooleanRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"updateTerminalReuseEnabled",
			request,
			proto.cline.BooleanRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async updateDefaultTerminalProfile(
		request: proto.cline.StringRequest,
	): Promise<proto.cline.TerminalProfileUpdateResponse> {
		return StateServiceClient.makeUnaryRequest(
			"updateDefaultTerminalProfile",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.TerminalProfileUpdateResponse.fromJSON,
		)
	}
	static async getAvailableTerminalProfiles(request: proto.cline.EmptyRequest): Promise<proto.cline.TerminalProfiles> {
		return StateServiceClient.makeUnaryRequest(
			"getAvailableTerminalProfiles",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.TerminalProfiles.fromJSON,
		)
	}
	static subscribeToState(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.State>): () => void {
		return StateServiceClient.makeStreamingRequest(
			"subscribeToState",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.State.fromJSON,
			callbacks,
		)
	}
	static async toggleFavoriteModel(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"toggleFavoriteModel",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async resetState(request: proto.cline.ResetStateRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"resetState",
			request,
			proto.cline.ResetStateRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async togglePlanActModeProto(request: proto.cline.TogglePlanActModeRequest): Promise<proto.cline.Boolean> {
		return StateServiceClient.makeUnaryRequest(
			"togglePlanActModeProto",
			request,
			proto.cline.TogglePlanActModeRequest.toJSON,
			proto.cline.Boolean.fromJSON,
		)
	}
	static async updateAutoApprovalSettings(request: proto.cline.AutoApprovalSettingsRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"updateAutoApprovalSettings",
			request,
			proto.cline.AutoApprovalSettingsRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async updateSettings(request: proto.cline.UpdateSettingsRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"updateSettings",
			request,
			proto.cline.UpdateSettingsRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async updateTelemetrySetting(request: proto.cline.TelemetrySettingRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"updateTelemetrySetting",
			request,
			proto.cline.TelemetrySettingRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async setWelcomeViewCompleted(request: proto.cline.BooleanRequest): Promise<proto.cline.Empty> {
		return StateServiceClient.makeUnaryRequest(
			"setWelcomeViewCompleted",
			request,
			proto.cline.BooleanRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class TaskServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.TaskService"
	static async cancelTask(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"cancelTask",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async clearTask(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"clearTask",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async getTotalTasksSize(request: proto.cline.EmptyRequest): Promise<proto.cline.Int64> {
		return TaskServiceClient.makeUnaryRequest(
			"getTotalTasksSize",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Int64.fromJSON,
		)
	}
	static async deleteTasksWithIds(request: proto.cline.StringArrayRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"deleteTasksWithIds",
			request,
			proto.cline.StringArrayRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async newTask(request: proto.cline.NewTaskRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"newTask",
			request,
			proto.cline.NewTaskRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async showTaskWithId(request: proto.cline.StringRequest): Promise<proto.cline.TaskResponse> {
		return TaskServiceClient.makeUnaryRequest(
			"showTaskWithId",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.TaskResponse.fromJSON,
		)
	}
	static async exportTaskWithId(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"exportTaskWithId",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async toggleTaskFavorite(request: proto.cline.TaskFavoriteRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"toggleTaskFavorite",
			request,
			proto.cline.TaskFavoriteRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async getTaskHistory(request: proto.cline.GetTaskHistoryRequest): Promise<proto.cline.TaskHistoryArray> {
		return TaskServiceClient.makeUnaryRequest(
			"getTaskHistory",
			request,
			proto.cline.GetTaskHistoryRequest.toJSON,
			proto.cline.TaskHistoryArray.fromJSON,
		)
	}
	static async askResponse(request: proto.cline.AskResponseRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"askResponse",
			request,
			proto.cline.AskResponseRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async taskFeedback(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"taskFeedback",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async taskCompletionViewChanges(request: proto.cline.Int64Request): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"taskCompletionViewChanges",
			request,
			proto.cline.Int64Request.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async executeQuickWin(request: proto.cline.ExecuteQuickWinRequest): Promise<proto.cline.Empty> {
		return TaskServiceClient.makeUnaryRequest(
			"executeQuickWin",
			request,
			proto.cline.ExecuteQuickWinRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static async deleteAllTaskHistory(request: proto.cline.EmptyRequest): Promise<proto.cline.DeleteAllTaskHistoryCount> {
		return TaskServiceClient.makeUnaryRequest(
			"deleteAllTaskHistory",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.DeleteAllTaskHistoryCount.fromJSON,
		)
	}
}
export class UiServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.UiService"
	static async scrollToSettings(request: proto.cline.StringRequest): Promise<proto.cline.KeyValuePair> {
		return UiServiceClient.makeUnaryRequest(
			"scrollToSettings",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.KeyValuePair.fromJSON,
		)
	}
	static async onDidShowAnnouncement(request: proto.cline.EmptyRequest): Promise<proto.cline.Boolean> {
		return UiServiceClient.makeUnaryRequest(
			"onDidShowAnnouncement",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Boolean.fromJSON,
		)
	}
	static subscribeToAddToInput(request: proto.cline.StringRequest, callbacks: Callbacks<proto.cline.String>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToAddToInput",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.String.fromJSON,
			callbacks,
		)
	}
	static subscribeToMcpButtonClicked(
		request: proto.cline.WebviewProviderTypeRequest,
		callbacks: Callbacks<proto.cline.Empty>,
	): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToMcpButtonClicked",
			request,
			proto.cline.WebviewProviderTypeRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToHistoryButtonClicked(
		request: proto.cline.WebviewProviderTypeRequest,
		callbacks: Callbacks<proto.cline.Empty>,
	): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToHistoryButtonClicked",
			request,
			proto.cline.WebviewProviderTypeRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToChatButtonClicked(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToChatButtonClicked",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToAccountButtonClicked(
		request: proto.cline.EmptyRequest,
		callbacks: Callbacks<proto.cline.Empty>,
	): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToAccountButtonClicked",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToSettingsButtonClicked(
		request: proto.cline.WebviewProviderTypeRequest,
		callbacks: Callbacks<proto.cline.Empty>,
	): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToSettingsButtonClicked",
			request,
			proto.cline.WebviewProviderTypeRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToPartialMessage(
		request: proto.cline.EmptyRequest,
		callbacks: Callbacks<proto.cline.ClineMessage>,
	): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToPartialMessage",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.ClineMessage.fromJSON,
			callbacks,
		)
	}
	static subscribeToTheme(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.String>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToTheme",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.String.fromJSON,
			callbacks,
		)
	}
	static async initializeWebview(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return UiServiceClient.makeUnaryRequest(
			"initializeWebview",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
	static subscribeToRelinquishControl(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToRelinquishControl",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToFocusChatInput(request: proto.cline.StringRequest, callbacks: Callbacks<proto.cline.Empty>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToFocusChatInput",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static subscribeToDidBecomeVisible(request: proto.cline.EmptyRequest, callbacks: Callbacks<proto.cline.Empty>): () => void {
		return UiServiceClient.makeStreamingRequest(
			"subscribeToDidBecomeVisible",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
			callbacks,
		)
	}
	static async getWebviewHtml(request: proto.cline.EmptyRequest): Promise<proto.cline.String> {
		return UiServiceClient.makeUnaryRequest(
			"getWebviewHtml",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.String.fromJSON,
		)
	}
	static async openUrl(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return UiServiceClient.makeUnaryRequest("openUrl", request, proto.cline.StringRequest.toJSON, proto.cline.Empty.fromJSON)
	}
	static async openWalkthrough(request: proto.cline.EmptyRequest): Promise<proto.cline.Empty> {
		return UiServiceClient.makeUnaryRequest(
			"openWalkthrough",
			request,
			proto.cline.EmptyRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
export class WebServiceClient extends ProtoBusClient {
	static override serviceName: string = "cline.WebService"
	static async checkIsImageUrl(request: proto.cline.StringRequest): Promise<proto.cline.IsImageUrl> {
		return WebServiceClient.makeUnaryRequest(
			"checkIsImageUrl",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.IsImageUrl.fromJSON,
		)
	}
	static async fetchOpenGraphData(request: proto.cline.StringRequest): Promise<proto.cline.OpenGraphData> {
		return WebServiceClient.makeUnaryRequest(
			"fetchOpenGraphData",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.OpenGraphData.fromJSON,
		)
	}
	static async openInBrowser(request: proto.cline.StringRequest): Promise<proto.cline.Empty> {
		return WebServiceClient.makeUnaryRequest(
			"openInBrowser",
			request,
			proto.cline.StringRequest.toJSON,
			proto.cline.Empty.fromJSON,
		)
	}
}
